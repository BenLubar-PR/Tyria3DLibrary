{"version":3,"names":[],"mappings":"","sources":["T3D-1.0.5.Formats.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*\nCopyright (C) 2015 RequestTimeout <https://github.com/RequestTimeout408>\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar Utils = T3D.ParserUtils;\n\n/**\n * An auto-generated structure of arrays describing Chunk formats\n * in the GW2 dat. The main contents of this file is generated\n * using the IDA script file 'ParseAnetStructsJS.idc'\n * located in the IDA folder.\n * \n * @for T3D\n * @property Formats\n * @type Array\n */\nwindow.T3D.formats = [\n\n\t///==================================================\n\t/// Chunk: GRMT, versions: 7, strucTab: 0x13B54C0 \n\t///==================================================\n\t{\n\t\tname:'GRMT',\n\t\tversions:{\n\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.__root=this.AmatGr =[\n\t\t\t\t'texArrayRange' , 'uint8',\n\t\t\t\t'texCount' , 'uint8',\n\t\t\t\t'sortOrder' , 'uint8',\n\t\t\t\t'sortTri' , 'uint8',\n\t\t\t\t'procAnim' , 'uint8',\n\t\t\t\t'debugFlags' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.__root=this.AmatGr =[\n\t\t\t\t'texArrayRange' , 'uint8',\n\t\t\t\t'texCount' , 'uint8',\n\t\t\t\t'texTransformRange' , 'uint8',\n\t\t\t\t'sortOrder' , 'uint8',\n\t\t\t\t'sortTri' , 'uint8',\n\t\t\t\t'procAnim' , 'uint8',\n\t\t\t\t'debugFlags' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texType' , 'uint32',\n\t\t\t\t'textureMasks', ['[]', 'uint32', 4],\n\t\t\t\t'texTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.__root=this.AmatGr =[\n\t\t\t\t'texArrayRange' , 'uint8',\n\t\t\t\t'texCount' , 'uint8',\n\t\t\t\t'texTransformRange' , 'uint8',\n\t\t\t\t'sortOrder' , 'uint8',\n\t\t\t\t'sortTri' , 'uint8',\n\t\t\t\t'procAnim' , 'uint8',\n\t\t\t\t'debugFlags' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texType' , 'uint32',\n\t\t\t\t'textureMasks', ['[]', 'uint32', 4],\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.__root=this.AmatGrV3 =[\n\t\t\t\t'texArrayRange' , 'uint8',\n\t\t\t\t'texCount' , 'uint8',\n\t\t\t\t'texTransformRange' , 'uint8',\n\t\t\t\t'sortOrder' , 'uint8',\n\t\t\t\t'sortTri' , 'uint8',\n\t\t\t\t'debugFlags' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texType' , 'uint32',\n\t\t\t\t'textureMasks', ['[]', 'uint32', 4],\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.__root=this.AmatGrV2 =[\n\t\t\t\t'texArrayRange' , 'uint8',\n\t\t\t\t'texCount' , 'uint8',\n\t\t\t\t'texTransformRange' , 'uint8',\n\t\t\t\t'sortOrder' , 'uint8',\n\t\t\t\t'sortTri' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texType' , 'uint32',\n\t\t\t\t'textureMasks', ['[]', 'uint32', 4],\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.__root=this.AmatGrV1 =[\n\t\t\t\t'texArrayRange' , 'uint8',\n\t\t\t\t'texCount' , 'uint8',\n\t\t\t\t'texTransformRange' , 'uint8',\n\t\t\t\t'sortOrder' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texType' , 'uint32',\n\t\t\t\t'textureMasks', ['[]', 'uint32', 4],\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.AmatGrV0 =[\n\t\t\t\t'texArrayRange' , 'uint8',\n\t\t\t\t'texCount' , 'uint8',\n\t\t\t\t'texTransformRange' , 'uint8',\n\t\t\t\t'sortOrder' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'textureMasks', ['[]', 'uint32', 4],\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: DX9S, versions: 12, strucTab: 0x13B5520 \n\t///==================================================\n\t{\n\t\tname:'DX9S',\n\t\tversions:{\n\n\n\t\t\t// => Version: 11, ReferencedFunction: 0x7B0830\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV11 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t'usesBindTexture' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV11 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'instructionCount', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9EffectV11 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV11 =[\n\t\t\t\t'effects', Utils.getRefArrayReader(this.AmatDx9EffectV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV11 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV11),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV11 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV11),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV11),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV11),\n\t\t\t\t'useLegacyBindTextures' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV10 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV10 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'instructionCount', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9EffectV10 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV10 =[\n\t\t\t\t'effects', Utils.getRefArrayReader(this.AmatDx9EffectV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV10 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV10),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV10 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV10),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV10),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV10),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9, ReferencedFunction: 0x7B0E70\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV9 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV9 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9EffectV9 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV9 =[\n\t\t\t\t'effects', Utils.getRefArrayReader(this.AmatDx9EffectV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV9 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV9),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV9 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV9),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV9),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV9),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8, ReferencedFunction: 0x7B0C40\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV8 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV8 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9EffectV8 =[\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV8 =[\n\t\t\t\t'effects', Utils.getRefArrayReader(this.AmatDx9EffectV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV8 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV8),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV8 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV8),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV8),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV8),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7, ReferencedFunction: 0x7B0BC0\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV7 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV7 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9EffectV7 =[\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV7 =[\n\t\t\t\t'effects', ['[]', this.AmatDx9EffectV7, 8],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV7 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV7),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV7 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV7),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV7),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV7),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6, ReferencedFunction: 0x7B0B70\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV6 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV6 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9EffectV6 =[\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV6 =[\n\t\t\t\t'effects', ['[]', this.AmatDx9EffectV6, 8],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV6 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV6),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV6 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV6),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV6),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV6),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5, ReferencedFunction: 0x7B0A80\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV5 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV5 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9EffectV5 =[\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV5 =[\n\t\t\t\t'effects', ['[]', this.AmatDx9EffectV5, 7],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV5 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'sortTri' , 'uint32',\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV5),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV5 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV5),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV5),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV5),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV4 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV4 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9EffectV4 =[\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV4 =[\n\t\t\t\t'effects', ['[]', this.AmatDx9EffectV4, 7],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV4 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'sortTri' , 'uint32',\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV4),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV4 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV4),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV4),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV3 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV3 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9EffectV3 =[\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV3 =[\n\t\t\t\t'effects', ['[]', this.AmatDx9EffectV3, 7],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV3 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'sortTri' , 'uint32',\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV3),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV3 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV3),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV3),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2, ReferencedFunction: 0x7B0850\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV2 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV2 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9EffectV2 =[\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV2 =[\n\t\t\t\t'effects', ['[]', this.AmatDx9EffectV2, 7],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV2 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'sortTri' , 'uint32',\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV2),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV2 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV2),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV2),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1, ReferencedFunction: 0x7B06A0\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV1 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV1 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9RenderStatesV1 =[\n\t\t\t\t'renderStates', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV1 =[\n\t\t\t\t'effectRenderStates', Utils.getRefArrayReader(this.AmatDx9RenderStatesV1),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader', ['[]', 'uint32', 5],\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags', ['[]', 'uint32', 5],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV1 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'sortTri' , 'uint32',\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV1),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV1 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV1),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV1),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatDx9SamplerV0 =[\n\t\t\t\t'textureIndex' , 'uint32',\n\t\t\t\t'state', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9ShaderV0 =[\n\t\t\t\t'shader', Utils.getArrayReader('uint32'),\n\t\t\t\t'constRegisters', Utils.getArrayReader('uint32'),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9PassV0 =[\n\t\t\t\t'renderState', Utils.getArrayReader('uint32'),\n\t\t\t\t'samplerIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t'vsGenFlags' , 'uint32',\n\t\t\t\t'passFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatDx9TechniqueV0 =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'sortTri' , 'uint32',\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatDx9PassV0),\n\t\t\t\t'maxPsVersion', 'uint16',\n\t\t\t\t'maxVsVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatDx9MaterialV0 =[\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatDx9SamplerV0),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatDx9ShaderV0),\n\t\t\t\t'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: XBXS, versions: 1, strucTab: 0x13B55EC \n\t///==================================================\n\t{\n\t\tname:'XBXS',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatXbxShaderConstant =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'regCount' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatXbxSamplerConstant =[\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'stateIndex' , 'uint32',\n\t\t\t\t'texIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatXbxShader =[\n\t\t\t\t'isPixelShader' , 'uint32',\n\t\t\t\t'cachedData', Utils.getArrayReader('uint8'),\n\t\t\t\t'physicalData', Utils.getArrayReader('uint8'),\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatXbxShaderConstant),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatXbxSamplerConstant),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatXbxRenderState =[\n\t\t\t\t'cullMode' , 'uint32',\n\t\t\t\t'blendControl' , 'uint32',\n\t\t\t\t'alphaTestAndMask' , 'uint32',\n\t\t\t\t'alphaTestRef' , 'uint32',\n\t\t\t\t'colorWrite_ARGB' , 'uint32',\n\t\t\t\t'depthWriteEnable' , 'uint32',\n\t\t\t\t'depthFunction' , 'uint32',\n\t\t\t\t'depthBias' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatXbxPass =[\n\t\t\t\t'renderState', this.AmatXbxRenderState,\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'psFileFame' , Utils.getFileNameReader(),\n\t\t\t\t'vsFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatXbxEffect =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatXbxPass),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatXbxSamplerState =[\n\t\t\t\t'addressU' , 'uint32',\n\t\t\t\t'addressV' , 'uint32',\n\t\t\t\t'addressW' , 'uint32',\n\t\t\t\t'borderColor' , 'uint32',\n\t\t\t\t'magFilter' , 'uint32',\n\t\t\t\t'maxAnisotropy' , 'uint32',\n\t\t\t\t'maxMipLevel' , 'uint32',\n\t\t\t\t'minFilter' , 'uint32',\n\t\t\t\t'mipFilter' , 'uint32',\n\t\t\t\t'mipMapLodBias' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatXbxMaterial =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatXbxShader),\n\t\t\t\t'effects', Utils.getArrayReader(this.AmatXbxEffect),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatXbxSamplerState),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: PS3S, versions: 1, strucTab: 0x13B5514 \n\t///==================================================\n\t{\n\t\tname:'PS3S',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatPs3ShaderConstant =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'regCount' , 'uint32',\n\t\t\t\t'regValue' , ['[]','float32',4],\n\t\t\t\t'data' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatPs3SamplerConstant =[\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'stateIndex' , 'uint32',\n\t\t\t\t'texIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatPs3FragmentShaderConfig =[\n\t\t\t\t'offset' , 'uint32',\n\t\t\t\t'attributeInputMask' , 'uint32',\n\t\t\t\t'texCoordsInputMask' , 'uint32',\n\t\t\t\t'texCoords2D' , 'uint32',\n\t\t\t\t'texCoordsCentroid' , 'uint32',\n\t\t\t\t'fragmentControl' , 'uint32',\n\t\t\t\t'registerCount' , 'uint32',\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatPs3ShaderConstant),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatPs3SamplerConstant),\n\t\t\t\t'code', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatPs3VertexShaderConfig =[\n\t\t\t\t'instructionSlot' , 'uint32',\n\t\t\t\t'instructionCount' , 'uint32',\n\t\t\t\t'attributeInputMask' , 'uint32',\n\t\t\t\t'registerCount' , 'uint32',\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatPs3ShaderConstant),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatPs3SamplerConstant),\n\t\t\t\t'code', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatPs3RenderState =[\n\t\t\t\t'cullMode' , 'uint32',\n\t\t\t\t'alphaFunc' , 'uint32',\n\t\t\t\t'alphaRef' , 'uint32',\n\t\t\t\t'blendOp' , 'uint32',\n\t\t\t\t'blendSrc' , 'uint32',\n\t\t\t\t'blendDst' , 'uint32',\n\t\t\t\t'colorMask' , 'uint32',\n\t\t\t\t'depthWrite' , 'uint32',\n\t\t\t\t'depthFunc' , 'uint32',\n\t\t\t\t'depthBias' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatPs3Pass =[\n\t\t\t\t'renderState', this.AmatPs3RenderState,\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'psFileFame' , Utils.getFileNameReader(),\n\t\t\t\t'vsFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatPs3Effect =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatPs3Pass),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatPs3Sampler =[\n\t\t\t\t'wraps' , 'uint32',\n\t\t\t\t'wrapt' , 'uint32',\n\t\t\t\t'maxAniso' , 'uint32',\n\t\t\t\t'filterMin' , 'uint32',\n\t\t\t\t'filterMag' , 'uint32',\n\t\t\t\t'filterBias' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatPs3Material =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'fragmentShaders', Utils.getArrayReader(this.AmatPs3FragmentShaderConfig),\n\t\t\t\t'vertexShaders', Utils.getArrayReader(this.AmatPs3VertexShaderConfig),\n\t\t\t\t'effects', Utils.getArrayReader(this.AmatPs3Effect),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatPs3Sampler),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: MRAS, versions: 1, strucTab: 0x13B55E0 \n\t///==================================================\n\t{\n\t\tname:'MRAS',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatAppleShaderConstant =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'regCount' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatAppleShader =[\n\t\t\t\t'isPixelShader' , 'uint32',\n\t\t\t\t'cachedData', Utils.getArrayReader('uint8'),\n\t\t\t\t'physicalData', Utils.getArrayReader('uint8'),\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatAppleShaderConstant),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatAppleShaderConstant),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatAppleRenderState =[\n\t\t\t\t'cullMode' , 'uint32',\n\t\t\t\t'blendControl' , 'uint32',\n\t\t\t\t'alphaTestAndMask' , 'uint32',\n\t\t\t\t'alphaTestRef' , 'uint32',\n\t\t\t\t'colorWrite_ARGB' , 'uint32',\n\t\t\t\t'depthWriteEnable' , 'uint32',\n\t\t\t\t'depthFunction' , 'uint32',\n\t\t\t\t'depthBias' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatApplePass =[\n\t\t\t\t'renderState', this.AmatAppleRenderState,\n\t\t\t\t'pixelShader' , 'uint32',\n\t\t\t\t'vertexShader' , 'uint32',\n\t\t\t\t'psFileFame' , Utils.getFileNameReader(),\n\t\t\t\t'vsFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatAppleEffect =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'passes', Utils.getArrayReader(this.AmatApplePass),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatAppleSamplerState =[\n\t\t\t\t'addressU' , 'uint32',\n\t\t\t\t'addressV' , 'uint32',\n\t\t\t\t'addressW' , 'uint32',\n\t\t\t\t'borderColor' , 'uint32',\n\t\t\t\t'magFilter' , 'uint32',\n\t\t\t\t'maxAnisotropy' , 'uint32',\n\t\t\t\t'maxMipLevel' , 'uint32',\n\t\t\t\t'minFilter' , 'uint32',\n\t\t\t\t'mipFilter' , 'uint32',\n\t\t\t\t'mipMapLodBias' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatAppleMaterial =[\n\t\t\t\t'name', Utils.getStringReader(),\n\t\t\t\t'shaders', Utils.getArrayReader(this.AmatAppleShader),\n\t\t\t\t'effects', Utils.getArrayReader(this.AmatAppleEffect),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatAppleSamplerState),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: XSHD, versions: 1, strucTab: 0x13B5628 \n\t///==================================================\n\t{\n\t\tname:'XSHD',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatXbxShaderConstant =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'regCount' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatXbxSamplerConstant =[\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'stateIndex' , 'uint32',\n\t\t\t\t'texIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatXbxShader =[\n\t\t\t\t'isPixelShader' , 'uint32',\n\t\t\t\t'cachedData', Utils.getArrayReader('uint8'),\n\t\t\t\t'physicalData', Utils.getArrayReader('uint8'),\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatXbxShaderConstant),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatXbxSamplerConstant),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: PPSH, versions: 1, strucTab: 0x13B5610 \n\t///==================================================\n\t{\n\t\tname:'PPSH',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatPs3ShaderConstant =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'regCount' , 'uint32',\n\t\t\t\t'regValue' , ['[]','float32',4],\n\t\t\t\t'data' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatPs3SamplerConstant =[\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'stateIndex' , 'uint32',\n\t\t\t\t'texIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatPs3FragmentShaderConfig =[\n\t\t\t\t'offset' , 'uint32',\n\t\t\t\t'attributeInputMask' , 'uint32',\n\t\t\t\t'texCoordsInputMask' , 'uint32',\n\t\t\t\t'texCoords2D' , 'uint32',\n\t\t\t\t'texCoordsCentroid' , 'uint32',\n\t\t\t\t'fragmentControl' , 'uint32',\n\t\t\t\t'registerCount' , 'uint32',\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatPs3ShaderConstant),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatPs3SamplerConstant),\n\t\t\t\t'code', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: PVSH, versions: 1, strucTab: 0x13B561C \n\t///==================================================\n\t{\n\t\tname:'PVSH',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatPs3ShaderConstant =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'regCount' , 'uint32',\n\t\t\t\t'regValue' , ['[]','float32',4],\n\t\t\t\t'data' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatPs3SamplerConstant =[\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'stateIndex' , 'uint32',\n\t\t\t\t'texIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatPs3VertexShaderConfig =[\n\t\t\t\t'instructionSlot' , 'uint32',\n\t\t\t\t'instructionCount' , 'uint32',\n\t\t\t\t'attributeInputMask' , 'uint32',\n\t\t\t\t'registerCount' , 'uint32',\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatPs3ShaderConstant),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatPs3SamplerConstant),\n\t\t\t\t'code', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: SPPA, versions: 1, strucTab: 0x13B5634 \n\t///==================================================\n\t{\n\t\tname:'SPPA',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatAppleShaderConstant =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'regIndex' , 'uint32',\n\t\t\t\t'regCount' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatAppleShader =[\n\t\t\t\t'isPixelShader' , 'uint32',\n\t\t\t\t'cachedData', Utils.getArrayReader('uint8'),\n\t\t\t\t'physicalData', Utils.getArrayReader('uint8'),\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatAppleShaderConstant),\n\t\t\t\t'samplers', Utils.getArrayReader(this.AmatAppleShaderConstant),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: TOOL, versions: 4, strucTab: 0x13B55B0 \n\t///==================================================\n\t{\n\t\tname:'TOOL',\n\t\tversions:{\n\n\n\t\t\t// => Version: 3, ReferencedFunction: 0x7B10F0\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.AmatToolConstant =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'displayName', Utils.getString16Reader(),\n\t\t\t\t'defaultValue' , ['[]','float32',4],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'minValue' , ['[]','float32',4],\n\t\t\t\t'maxValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatToolTexture =[\n\t\t\t\t'texName', Utils.getString16Reader(),\n\t\t\t\t'texDefaultFile', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatToolParams =[\n\t\t\t\t'description', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'texTransformCount' , 'uint8',\n\t\t\t\t'decompressedTextCount' , 'uint32',\n\t\t\t\t'compressedText', Utils.getArrayReader('uint8'),\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatToolConstant),\n\t\t\t\t'textures', Utils.getArrayReader(this.AmatToolTexture),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2, ReferencedFunction: 0x7B1050\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.AmatToolConstant =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'displayName', Utils.getString16Reader(),\n\t\t\t\t'defaultValue' , ['[]','float32',4],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'minValue' , ['[]','float32',4],\n\t\t\t\t'maxValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatToolTexture =[\n\t\t\t\t'texName', Utils.getString16Reader(),\n\t\t\t\t'texDefaultFile', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatToolParams =[\n\t\t\t\t'description', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'text', Utils.getStringReader(),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'texTransformCount' , 'uint8',\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatToolConstant),\n\t\t\t\t'textures', Utils.getArrayReader(this.AmatToolTexture),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1, ReferencedFunction: 0x7B0FF0\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.AmatToolConstantV1 =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'displayName', Utils.getString16Reader(),\n\t\t\t\t'defaultValue' , ['[]','float32',4],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'minValue' , ['[]','float32',4],\n\t\t\t\t'maxValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatToolTextureV1 =[\n\t\t\t\t'texName', Utils.getString16Reader(),\n\t\t\t\t'texDefaultFile', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatToolParamsV1 =[\n\t\t\t\t'description', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'text', Utils.getStringReader(),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'texTransformCount' , 'uint8',\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatToolConstantV1),\n\t\t\t\t'textures', Utils.getArrayReader(this.AmatToolTextureV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatToolConstantV0 =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'displayName', Utils.getString16Reader(),\n\t\t\t\t'defaultValue' , ['[]','float32',4],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'minValue' , ['[]','float32',4],\n\t\t\t\t'maxValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmatToolTextureV0 =[\n\t\t\t\t'texName', Utils.getString16Reader(),\n\t\t\t\t'texDefaultFile', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texGen', Utils.getArrayReader('uint32'),\n\t\t\t\t'texTransform', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatToolParamsV0 =[\n\t\t\t\t'description', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'text', Utils.getStringReader(),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'texTransformCount' , 'uint8',\n\t\t\t\t'constants', Utils.getArrayReader(this.AmatToolConstantV0),\n\t\t\t\t'textures', Utils.getArrayReader(this.AmatToolTextureV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: UPDB, versions: 1, strucTab: 0x13B5604 \n\t///==================================================\n\t{\n\t\tname:'UPDB',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatXbxUPDBentry =[\n\t\t\t\t'originalSize' , 'uint32',\n\t\t\t\t'compressedData', Utils.getArrayReader('uint8'),\n\t\t\t\t'originalName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatXbxUPDBinfo =[\n\t\t\t\t'uPDBarray', Utils.getArrayReader(this.AmatXbxUPDBentry),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: UPDA, versions: 1, strucTab: 0x13B55F8 \n\t///==================================================\n\t{\n\t\tname:'UPDA',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AmatAppleUPDBentry =[\n\t\t\t\t'originalSize' , 'uint32',\n\t\t\t\t'compressedData', Utils.getArrayReader('uint8'),\n\t\t\t\t'originalName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.AmatAppleUPDBinfo =[\n\t\t\t\t'uPDBarray', Utils.getArrayReader(this.AmatAppleUPDBentry),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: CDHS, versions: 2, strucTab: 0x13BD204 \n\t///==================================================\n\t{\n\t\tname:'CDHS',\n\t\tversions:{\n\n\n\t\t\t// => Version: 1, ReferencedFunction: 0x7B3180\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackVsGenParams =[\n\t\t\t\t'pointWindCount' , 'uint8',\n\t\t\t\t'lightPointCount' , 'uint8',\n\t\t\t\t'lightSpotCount' , 'uint8',\n\t\t\t\t'texTransCount' , 'uint8',\n\t\t\t\t'hazeMode' , 'uint8',\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexShaderKey =[\n\t\t\t\t'vsGenParams', this.PackVsGenParams,\n\t\t\t\t'vertexFormat' , 'uint32',\n\t\t\t\t'texGenCount' , 'uint32',\n\t\t\t\t'texGen', ['[]', 'uint32', 14],\n\t\t\t\t'vsVersion' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackShaderCache =[\n\t\t\t\t'data', Utils.getArrayReader(this.PackVertexShaderKey),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackVertexShaderKeyV0 =[\n\t\t\t\t'params' , 'uint32',\n\t\t\t\t'vertexFormat' , 'uint32',\n\t\t\t\t'texGenCount' , 'uint32',\n\t\t\t\t'texGen', ['[]', 'uint32', 14],\n\t\t\t\t'vsVersion' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackShaderCacheV0 =[\n\t\t\t\t'data', Utils.getArrayReader(this.PackVertexShaderKeyV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: PGTB, versions: 4, strucTab: 0x13C7628 \n\t///==================================================\n\t{\n\t\tname:'PGTB',\n\t\tversions:{\n\n\n\t\t\t// => Version: 3, ReferencedFunction: 0x816360\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV3 =[\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'strippedDims', ['[]', 'uint32', 2],\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV3 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'solidColor' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PagedImageTableDataV3 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV3),\n\t\t\t\t'rawPages', Utils.getArrayReader(this.PagedImagePageDataV3),\n\t\t\t\t'strippedPages', Utils.getArrayReader(this.PagedImagePageDataV3),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV2 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV2 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'solidColor' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PagedImageTableDataV2 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV2),\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImagePageDataV2),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV1 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV1 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'solidColor' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PagedImageTableDataV1 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV1),\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImagePageDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV0 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV0 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PagedImageTableDataV0 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV0),\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImagePageDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: DATA, versions: 4, strucTab: 0x13C7658 \n\t///==================================================\n\t{\n\t\tname:'DATA',\n\t\tversions:{\n\n\n\t\t\t// => Version: 3, ReferencedFunction: 0x816500\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV3 =[\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'strippedDims', ['[]', 'uint32', 2],\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV3 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'solidColor' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PagedImageTableDataV3 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV3),\n\t\t\t\t'rawPages', Utils.getArrayReader(this.PagedImagePageDataV3),\n\t\t\t\t'strippedPages', Utils.getArrayReader(this.PagedImagePageDataV3),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV2 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV2 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'solidColor' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PagedImageTableDataV2 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV2),\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImagePageDataV2),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV1 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV1 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'solidColor' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PagedImageTableDataV1 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV1),\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImagePageDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PagedImageEmbeddedPageDataV0 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'rawData', Utils.getArrayReader('uint8'),\n\t\t\t\t'compressedData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PagedImageEmbeddedPagesDataV0 =[\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: txtm, versions: 1, strucTab: 0x13F0884 \n\t///==================================================\n\t{\n\t\tname:'txtm',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.TextPackLanguage =[\n\t\t\t\t'filenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.TextPackManifest =[\n\t\t\t\t'stringsPerFile' , 'uint32',\n\t\t\t\t'languages', Utils.getArrayReader(this.TextPackLanguage),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: txtp, versions: 1, strucTab: 0x13F089C \n\t///==================================================\n\t{\n\t\tname:'txtp',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.TextPackPassword =[\n\t\t\t\t'textId' , 'uint32',\n\t\t\t\t'password', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.TextPackPasswords =[\n\t\t\t\t'stringCount' , 'uint32',\n\t\t\t\t'passwords', Utils.getArrayReader(this.TextPackPassword),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: txtv, versions: 1, strucTab: 0x13F08B4 \n\t///==================================================\n\t{\n\t\tname:'txtv',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.TextPackVoice =[\n\t\t\t\t'textId' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.TextPackVoices =[\n\t\t\t\t'voices', Utils.getArrayReader(this.TextPackVoice),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: vari, versions: 1, strucTab: 0x13F08CC \n\t///==================================================\n\t{\n\t\tname:'vari',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.TextPackVariant =[\n\t\t\t\t'textId' , 'uint32',\n\t\t\t\t'variantTextIds', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.TextPackVariants =[\n\t\t\t\t'variants', Utils.getArrayReader(this.TextPackVariant),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: AMSP, versions: 30, strucTab: 0x1526520 \n\t///==================================================\n\t{\n\t\tname:'AMSP',\n\t\tversions:{\n\n\n\t\t\t// => Version: 29\n\t\t\t29:function(){\n\t\t\t\t\t\tthis.DspDataV29 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'normalizeFadeTime' , 'float32',\n\t\t\t\t'normalizeThreshold' , 'float32',\n\t\t\t\t'normalizeMaxAmp' , 'float32',\n\t\t\t\t'compressorThreshold' , 'float32',\n\t\t\t\t'compressorAttack' , 'float32',\n\t\t\t\t'compressorRelease' , 'float32',\n\t\t\t\t'compressorGainMakeup' , 'float32',\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV29 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV29 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV29),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV29 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV29 =[\n\t\t\t\t'time', this.RangeDataV29,\n\t\t\t\t'value', this.RangeDataV29,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV29 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV29),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV29),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV29 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV29,\n\t\t\t\t'highPass', this.DynamicParamDataV29,\n\t\t\t\t'pan3D', this.DynamicParamDataV29,\n\t\t\t\t'reverb', this.DynamicParamDataV29,\n\t\t\t\t'spread3D', this.DynamicParamDataV29,\n\t\t\t\t'volumeA', this.DynamicParamDataV29,\n\t\t\t\t'volumeB', this.DynamicParamDataV29,\n\t\t\t\t'lfe', this.DynamicParamDataV29,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'highPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'minAudible' , 'uint32',\n\t\t\t\t'maxAudibleLQ' , 'uint32',\n\t\t\t\t'maxAudibleHG' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV29),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV29),\n\t\t\t\t'focusReserve' , 'float32',\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MaterialDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'absorptionLF' , 'float32',\n\t\t\t\t'absorptionMF' , 'float32',\n\t\t\t\t'absorptionHF' , 'float32',\n\t\t\t\t'occlusion' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicConditionDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV29 =[\n\t\t\t\t'condition', Utils.getQWordReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t'noteBase' , 'uint8',\n\t\t\t\t'noteMin' , 'uint8',\n\t\t\t\t'noteMax' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicPlaylistDataV29 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'primaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'secondaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV29),\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialSilence', this.RangeDataV29,\n\t\t\t\t'intervalSilence', this.RangeDataV29,\n\t\t\t\t'maxPlayLength', this.RangeDataV29,\n\t\t\t\t'volume', this.DynamicParamDataV29,\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PropertyDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'tokenValue', Utils.getQWordReader(),\n\t\t\t\t'floatValue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV29),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV29),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicExternalDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'externalPlaylist', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV29 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'echoLevel' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'memoryPool' , 'float32',\n\t\t\t\t'reverbLevel' , 'float32',\n\t\t\t\t'minChannelsLQ' , 'uint32',\n\t\t\t\t'maxChannelsLQ' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV29),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV29),\n\t\t\t\t'material', Utils.getArrayReader(this.MaterialDataV29),\n\t\t\t\t'musicCondition', Utils.getArrayReader(this.MusicConditionDataV29),\n\t\t\t\t'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV29),\n\t\t\t\t'property', Utils.getArrayReader(this.PropertyDataV29),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV29),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV29),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV29),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicExternal', Utils.getArrayReader(this.MusicExternalDataV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV29 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV29),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV29),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV29),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV29,\n\t\t\t\t'pan', this.DynamicParamDataV29,\n\t\t\t\t'pitch', this.DynamicParamDataV29,\n\t\t\t\t'pitchMS', this.DynamicParamDataV29,\n\t\t\t\t'volume', this.DynamicParamDataV29,\n\t\t\t\t'volumeMS', this.DynamicParamDataV29,\n\t\t\t\t'initialDelay', this.RangeDataV29,\n\t\t\t\t'playLength', this.RangeDataV29,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV29,\n\t\t\t\t'positionRange', this.RangeDataV29,\n\t\t\t\t'repeatCount', this.RangeDataV29,\n\t\t\t\t'repeatTime', this.RangeDataV29,\n\t\t\t\t'replayDelay', this.RangeDataV29,\n\t\t\t\t'startTimeOffset', this.RangeDataV29,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV29 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV29 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'snapshot', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV29),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV29),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV29),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV29),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV29),\n\t\t\t\t'property', Utils.getArrayReader(this.PropertyDataV29),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t'musicMutePriority' , 'uint8',\n\t\t\t\t'soundPoolMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 28\n\t\t\t28:function(){\n\t\t\t\t\t\tthis.DspDataV28 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'normalizeFadeTime' , 'float32',\n\t\t\t\t'normalizeThreshold' , 'float32',\n\t\t\t\t'normalizeMaxAmp' , 'float32',\n\t\t\t\t'compressorThreshold' , 'float32',\n\t\t\t\t'compressorAttack' , 'float32',\n\t\t\t\t'compressorRelease' , 'float32',\n\t\t\t\t'compressorGainMakeup' , 'float32',\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV28 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV28 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV28),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV28 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV28 =[\n\t\t\t\t'time', this.RangeDataV28,\n\t\t\t\t'value', this.RangeDataV28,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV28 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV28),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV28),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV28 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV28,\n\t\t\t\t'highPass', this.DynamicParamDataV28,\n\t\t\t\t'pan3D', this.DynamicParamDataV28,\n\t\t\t\t'reverb', this.DynamicParamDataV28,\n\t\t\t\t'spread3D', this.DynamicParamDataV28,\n\t\t\t\t'volumeA', this.DynamicParamDataV28,\n\t\t\t\t'volumeB', this.DynamicParamDataV28,\n\t\t\t\t'lfe', this.DynamicParamDataV28,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'highPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'minAudible' , 'uint32',\n\t\t\t\t'maxAudibleLQ' , 'uint32',\n\t\t\t\t'maxAudibleHG' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV28),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV28),\n\t\t\t\t'focusReserve' , 'float32',\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MaterialDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'absorptionLF' , 'float32',\n\t\t\t\t'absorptionMF' , 'float32',\n\t\t\t\t'absorptionHF' , 'float32',\n\t\t\t\t'occlusion' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicConditionDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV28 =[\n\t\t\t\t'condition', Utils.getQWordReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t'noteBase' , 'uint8',\n\t\t\t\t'noteMin' , 'uint8',\n\t\t\t\t'noteMax' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicPlaylistDataV28 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'primaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'secondaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV28),\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialSilence', this.RangeDataV28,\n\t\t\t\t'intervalSilence', this.RangeDataV28,\n\t\t\t\t'maxPlayLength', this.RangeDataV28,\n\t\t\t\t'volume', this.DynamicParamDataV28,\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PropertyDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'tokenValue', Utils.getQWordReader(),\n\t\t\t\t'floatValue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV28),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV28),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV28 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'echoLevel' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'memoryPool' , 'float32',\n\t\t\t\t'reverbLevel' , 'float32',\n\t\t\t\t'minChannelsLQ' , 'uint32',\n\t\t\t\t'maxChannelsLQ' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV28),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV28),\n\t\t\t\t'material', Utils.getArrayReader(this.MaterialDataV28),\n\t\t\t\t'musicCondition', Utils.getArrayReader(this.MusicConditionDataV28),\n\t\t\t\t'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV28),\n\t\t\t\t'property', Utils.getArrayReader(this.PropertyDataV28),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV28),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV28),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV28),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV28 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV28),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV28),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV28),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV28,\n\t\t\t\t'pan', this.DynamicParamDataV28,\n\t\t\t\t'pitch', this.DynamicParamDataV28,\n\t\t\t\t'pitchMS', this.DynamicParamDataV28,\n\t\t\t\t'volume', this.DynamicParamDataV28,\n\t\t\t\t'volumeMS', this.DynamicParamDataV28,\n\t\t\t\t'initialDelay', this.RangeDataV28,\n\t\t\t\t'playLength', this.RangeDataV28,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV28,\n\t\t\t\t'positionRange', this.RangeDataV28,\n\t\t\t\t'repeatCount', this.RangeDataV28,\n\t\t\t\t'repeatTime', this.RangeDataV28,\n\t\t\t\t'replayDelay', this.RangeDataV28,\n\t\t\t\t'startTimeOffset', this.RangeDataV28,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV28 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV28 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'snapshot', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV28),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV28),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV28),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV28),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV28),\n\t\t\t\t'property', Utils.getArrayReader(this.PropertyDataV28),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t'musicMutePriority' , 'uint8',\n\t\t\t\t'soundPoolMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 27\n\t\t\t27:function(){\n\t\t\t\t\t\tthis.DspDataV27 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'normalizeFadeTime' , 'float32',\n\t\t\t\t'normalizeThreshold' , 'float32',\n\t\t\t\t'normalizeMaxAmp' , 'float32',\n\t\t\t\t'compressorThreshold' , 'float32',\n\t\t\t\t'compressorAttack' , 'float32',\n\t\t\t\t'compressorRelease' , 'float32',\n\t\t\t\t'compressorGainMakeup' , 'float32',\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV27 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV27 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV27),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV27 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV27 =[\n\t\t\t\t'time', this.RangeDataV27,\n\t\t\t\t'value', this.RangeDataV27,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV27 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV27),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV27),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV27 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV27,\n\t\t\t\t'highPass', this.DynamicParamDataV27,\n\t\t\t\t'pan3D', this.DynamicParamDataV27,\n\t\t\t\t'reverb', this.DynamicParamDataV27,\n\t\t\t\t'spread3D', this.DynamicParamDataV27,\n\t\t\t\t'volumeA', this.DynamicParamDataV27,\n\t\t\t\t'volumeB', this.DynamicParamDataV27,\n\t\t\t\t'lfe', this.DynamicParamDataV27,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'highPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'minAudible' , 'uint32',\n\t\t\t\t'maxAudibleLQ' , 'uint32',\n\t\t\t\t'maxAudibleHG' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV27),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV27),\n\t\t\t\t'focusReserve' , 'float32',\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MaterialDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'absorptionLF' , 'float32',\n\t\t\t\t'absorptionMF' , 'float32',\n\t\t\t\t'absorptionHF' , 'float32',\n\t\t\t\t'occlusion' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicConditionDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV27 =[\n\t\t\t\t'condition', Utils.getQWordReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t'noteBase' , 'uint8',\n\t\t\t\t'noteMin' , 'uint8',\n\t\t\t\t'noteMax' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicPlaylistDataV27 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'primaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'secondaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV27),\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialSilence', this.RangeDataV27,\n\t\t\t\t'intervalSilence', this.RangeDataV27,\n\t\t\t\t'maxPlayLength', this.RangeDataV27,\n\t\t\t\t'volume', this.DynamicParamDataV27,\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PropertyDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'tokenValue', Utils.getQWordReader(),\n\t\t\t\t'floatValue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV27),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV27),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV27 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'echoLevel' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'memoryPool' , 'float32',\n\t\t\t\t'reverbLevel' , 'float32',\n\t\t\t\t'minChannelsLQ' , 'uint32',\n\t\t\t\t'maxChannelsLQ' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV27),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV27),\n\t\t\t\t'material', Utils.getArrayReader(this.MaterialDataV27),\n\t\t\t\t'musicCondition', Utils.getArrayReader(this.MusicConditionDataV27),\n\t\t\t\t'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV27),\n\t\t\t\t'property', Utils.getArrayReader(this.PropertyDataV27),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV27),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV27),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV27),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV27 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV27),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV27),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV27),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV27,\n\t\t\t\t'pan', this.DynamicParamDataV27,\n\t\t\t\t'pitch', this.DynamicParamDataV27,\n\t\t\t\t'pitchMS', this.DynamicParamDataV27,\n\t\t\t\t'volume', this.DynamicParamDataV27,\n\t\t\t\t'volumeMS', this.DynamicParamDataV27,\n\t\t\t\t'initialDelay', this.RangeDataV27,\n\t\t\t\t'playLength', this.RangeDataV27,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV27,\n\t\t\t\t'positionRange', this.RangeDataV27,\n\t\t\t\t'repeatCount', this.RangeDataV27,\n\t\t\t\t'repeatTime', this.RangeDataV27,\n\t\t\t\t'startTimeOffset', this.RangeDataV27,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV27 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV27 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'snapshot', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV27),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV27),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV27),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV27),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV27),\n\t\t\t\t'property', Utils.getArrayReader(this.PropertyDataV27),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t'musicMutePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 26\n\t\t\t26:function(){\n\t\t\t\t\t\tthis.DspDataV26 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'normalizeFadeTime' , 'float32',\n\t\t\t\t'normalizeThreshold' , 'float32',\n\t\t\t\t'normalizeMaxAmp' , 'float32',\n\t\t\t\t'compressorThreshold' , 'float32',\n\t\t\t\t'compressorAttack' , 'float32',\n\t\t\t\t'compressorRelease' , 'float32',\n\t\t\t\t'compressorGainMakeup' , 'float32',\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV26 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV26 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV26),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV26 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV26 =[\n\t\t\t\t'time', this.RangeDataV26,\n\t\t\t\t'value', this.RangeDataV26,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV26 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV26),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV26),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV26 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV26,\n\t\t\t\t'highPass', this.DynamicParamDataV26,\n\t\t\t\t'pan3D', this.DynamicParamDataV26,\n\t\t\t\t'reverb', this.DynamicParamDataV26,\n\t\t\t\t'spread3D', this.DynamicParamDataV26,\n\t\t\t\t'volumeA', this.DynamicParamDataV26,\n\t\t\t\t'volumeB', this.DynamicParamDataV26,\n\t\t\t\t'lfe', this.DynamicParamDataV26,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'highPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'minAudible' , 'uint32',\n\t\t\t\t'maxAudibleLQ' , 'uint32',\n\t\t\t\t'maxAudibleHG' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV26),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV26),\n\t\t\t\t'focusReserve' , 'float32',\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MaterialDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'absorptionLF' , 'float32',\n\t\t\t\t'absorptionMF' , 'float32',\n\t\t\t\t'absorptionHF' , 'float32',\n\t\t\t\t'occlusion' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicConditionDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV26 =[\n\t\t\t\t'condition', Utils.getQWordReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t'noteBase' , 'uint8',\n\t\t\t\t'noteMin' , 'uint8',\n\t\t\t\t'noteMax' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicPlaylistDataV26 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'primaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'secondaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV26),\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialSilence', this.RangeDataV26,\n\t\t\t\t'intervalSilence', this.RangeDataV26,\n\t\t\t\t'maxPlayLength', this.RangeDataV26,\n\t\t\t\t'volume', this.DynamicParamDataV26,\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV26),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV26),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV26 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'memoryPool' , 'float32',\n\t\t\t\t'reverbLevel' , 'float32',\n\t\t\t\t'minChannelsLQ' , 'uint32',\n\t\t\t\t'maxChannelsLQ' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV26),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV26),\n\t\t\t\t'material', Utils.getArrayReader(this.MaterialDataV26),\n\t\t\t\t'musicCondition', Utils.getArrayReader(this.MusicConditionDataV26),\n\t\t\t\t'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV26),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV26),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV26),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV26 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV26),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV26),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV26),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV26,\n\t\t\t\t'pan', this.DynamicParamDataV26,\n\t\t\t\t'pitch', this.DynamicParamDataV26,\n\t\t\t\t'pitchMS', this.DynamicParamDataV26,\n\t\t\t\t'volume', this.DynamicParamDataV26,\n\t\t\t\t'volumeMS', this.DynamicParamDataV26,\n\t\t\t\t'initialDelay', this.RangeDataV26,\n\t\t\t\t'playLength', this.RangeDataV26,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV26,\n\t\t\t\t'positionRange', this.RangeDataV26,\n\t\t\t\t'repeatCount', this.RangeDataV26,\n\t\t\t\t'repeatTime', this.RangeDataV26,\n\t\t\t\t'startTimeOffset', this.RangeDataV26,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV26 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV26 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'snapshot', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV26),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV26),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV26),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV26),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV26),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t'musicMutePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 25\n\t\t\t25:function(){\n\t\t\t\t\t\tthis.DspDataV25 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV25 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV25 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV25),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV25 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV25 =[\n\t\t\t\t'time', this.RangeDataV25,\n\t\t\t\t'value', this.RangeDataV25,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV25 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV25),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV25),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV25 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV25,\n\t\t\t\t'highPass', this.DynamicParamDataV25,\n\t\t\t\t'pan3D', this.DynamicParamDataV25,\n\t\t\t\t'reverb', this.DynamicParamDataV25,\n\t\t\t\t'spread3D', this.DynamicParamDataV25,\n\t\t\t\t'volumeA', this.DynamicParamDataV25,\n\t\t\t\t'volumeB', this.DynamicParamDataV25,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'highPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV25),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV25),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MaterialDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'absorptionLF' , 'float32',\n\t\t\t\t'absorptionMF' , 'float32',\n\t\t\t\t'absorptionHF' , 'float32',\n\t\t\t\t'occlusion' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicConditionDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV25 =[\n\t\t\t\t'condition', Utils.getQWordReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t'noteBase' , 'uint8',\n\t\t\t\t'noteMin' , 'uint8',\n\t\t\t\t'noteMax' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicPlaylistDataV25 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'primaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'secondaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV25),\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialSilence', this.RangeDataV25,\n\t\t\t\t'intervalSilence', this.RangeDataV25,\n\t\t\t\t'maxPlayLength', this.RangeDataV25,\n\t\t\t\t'volume', this.DynamicParamDataV25,\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV25),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV25),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV25 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV25),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV25),\n\t\t\t\t'material', Utils.getArrayReader(this.MaterialDataV25),\n\t\t\t\t'musicCondition', Utils.getArrayReader(this.MusicConditionDataV25),\n\t\t\t\t'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV25),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV25),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV25),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV25 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV25),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV25),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV25),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV25,\n\t\t\t\t'pan', this.DynamicParamDataV25,\n\t\t\t\t'pitch', this.DynamicParamDataV25,\n\t\t\t\t'pitchMS', this.DynamicParamDataV25,\n\t\t\t\t'volume', this.DynamicParamDataV25,\n\t\t\t\t'volumeMS', this.DynamicParamDataV25,\n\t\t\t\t'initialDelay', this.RangeDataV25,\n\t\t\t\t'playLength', this.RangeDataV25,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV25,\n\t\t\t\t'positionRange', this.RangeDataV25,\n\t\t\t\t'repeatCount', this.RangeDataV25,\n\t\t\t\t'repeatTime', this.RangeDataV25,\n\t\t\t\t'startTimeOffset', this.RangeDataV25,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV25 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV25 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'snapshot', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV25),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV25),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV25),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV25),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV25),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t'musicMutePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 24\n\t\t\t24:function(){\n\t\t\t\t\t\tthis.DspDataV24 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV24 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV24 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV24),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV24 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV24 =[\n\t\t\t\t'time', this.RangeDataV24,\n\t\t\t\t'value', this.RangeDataV24,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV24 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV24),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV24),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV24 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV24,\n\t\t\t\t'highPass', this.DynamicParamDataV24,\n\t\t\t\t'pan3D', this.DynamicParamDataV24,\n\t\t\t\t'reverb', this.DynamicParamDataV24,\n\t\t\t\t'spread3D', this.DynamicParamDataV24,\n\t\t\t\t'volumeA', this.DynamicParamDataV24,\n\t\t\t\t'volumeB', this.DynamicParamDataV24,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'highPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV24),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV24),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicConditionDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV24 =[\n\t\t\t\t'condition', Utils.getQWordReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t'noteBase' , 'uint8',\n\t\t\t\t'noteMin' , 'uint8',\n\t\t\t\t'noteMax' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicPlaylistDataV24 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'primaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'secondaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV24),\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialSilence', this.RangeDataV24,\n\t\t\t\t'intervalSilence', this.RangeDataV24,\n\t\t\t\t'maxPlayLength', this.RangeDataV24,\n\t\t\t\t'volume', this.DynamicParamDataV24,\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV24),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV24),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV24 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV24),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV24),\n\t\t\t\t'musicCondition', Utils.getArrayReader(this.MusicConditionDataV24),\n\t\t\t\t'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV24),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV24),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV24),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV24 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV24),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV24),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV24),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV24,\n\t\t\t\t'pan', this.DynamicParamDataV24,\n\t\t\t\t'pitch', this.DynamicParamDataV24,\n\t\t\t\t'pitchMS', this.DynamicParamDataV24,\n\t\t\t\t'volume', this.DynamicParamDataV24,\n\t\t\t\t'volumeMS', this.DynamicParamDataV24,\n\t\t\t\t'initialDelay', this.RangeDataV24,\n\t\t\t\t'playLength', this.RangeDataV24,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV24,\n\t\t\t\t'positionRange', this.RangeDataV24,\n\t\t\t\t'repeatCount', this.RangeDataV24,\n\t\t\t\t'repeatTime', this.RangeDataV24,\n\t\t\t\t'startTimeOffset', this.RangeDataV24,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV24 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV24 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'snapshot', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV24),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV24),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV24),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV24),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV24),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t'musicMutePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 23\n\t\t\t23:function(){\n\t\t\t\t\t\tthis.DspDataV23 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV23 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV23 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV23),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV23 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV23 =[\n\t\t\t\t'time', this.RangeDataV23,\n\t\t\t\t'value', this.RangeDataV23,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV23 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV23),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV23),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV23 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV23,\n\t\t\t\t'highPass', this.DynamicParamDataV23,\n\t\t\t\t'pan3D', this.DynamicParamDataV23,\n\t\t\t\t'reverb', this.DynamicParamDataV23,\n\t\t\t\t'spread3D', this.DynamicParamDataV23,\n\t\t\t\t'volumeA', this.DynamicParamDataV23,\n\t\t\t\t'volumeB', this.DynamicParamDataV23,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'highPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV23),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV23),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicConditionDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV23 =[\n\t\t\t\t'condition', Utils.getQWordReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicPlaylistDataV23 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'primaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'secondaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV23),\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialSilence', this.RangeDataV23,\n\t\t\t\t'intervalSilence', this.RangeDataV23,\n\t\t\t\t'maxPlayLength', this.RangeDataV23,\n\t\t\t\t'volume', this.DynamicParamDataV23,\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV23),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV23),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV23 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV23),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV23),\n\t\t\t\t'musicCondition', Utils.getArrayReader(this.MusicConditionDataV23),\n\t\t\t\t'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV23),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV23),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV23),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV23 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV23),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV23),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV23),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV23,\n\t\t\t\t'pan', this.DynamicParamDataV23,\n\t\t\t\t'pitch', this.DynamicParamDataV23,\n\t\t\t\t'pitchMS', this.DynamicParamDataV23,\n\t\t\t\t'volume', this.DynamicParamDataV23,\n\t\t\t\t'volumeMS', this.DynamicParamDataV23,\n\t\t\t\t'initialDelay', this.RangeDataV23,\n\t\t\t\t'playLength', this.RangeDataV23,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV23,\n\t\t\t\t'positionRange', this.RangeDataV23,\n\t\t\t\t'repeatCount', this.RangeDataV23,\n\t\t\t\t'repeatTime', this.RangeDataV23,\n\t\t\t\t'startTimeOffset', this.RangeDataV23,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV23 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV23 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'snapshot', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV23),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV23),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV23),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV23),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV23),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t'musicMutePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 22\n\t\t\t22:function(){\n\t\t\t\t\t\tthis.DspDataV22 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV22 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV22 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV22),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV22 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV22 =[\n\t\t\t\t'time', this.RangeDataV22,\n\t\t\t\t'value', this.RangeDataV22,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV22 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV22),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV22),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV22 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV22,\n\t\t\t\t'highPass', this.DynamicParamDataV22,\n\t\t\t\t'pan3D', this.DynamicParamDataV22,\n\t\t\t\t'reverb', this.DynamicParamDataV22,\n\t\t\t\t'spread3D', this.DynamicParamDataV22,\n\t\t\t\t'volumeA', this.DynamicParamDataV22,\n\t\t\t\t'volumeB', this.DynamicParamDataV22,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'highPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV22),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV22),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicConditionDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV22 =[\n\t\t\t\t'condition', Utils.getQWordReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicPlaylistDataV22 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'primaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'secondaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV22),\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialSilence', this.RangeDataV22,\n\t\t\t\t'intervalSilence', this.RangeDataV22,\n\t\t\t\t'maxPlayLength', this.RangeDataV22,\n\t\t\t\t'volume', this.DynamicParamDataV22,\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV22),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV22),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV22 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV22),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV22),\n\t\t\t\t'musicCondition', Utils.getArrayReader(this.MusicConditionDataV22),\n\t\t\t\t'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV22),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV22),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV22),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV22 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV22),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV22),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV22),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV22,\n\t\t\t\t'pan', this.DynamicParamDataV22,\n\t\t\t\t'pitch', this.DynamicParamDataV22,\n\t\t\t\t'pitchMS', this.DynamicParamDataV22,\n\t\t\t\t'volume', this.DynamicParamDataV22,\n\t\t\t\t'volumeMS', this.DynamicParamDataV22,\n\t\t\t\t'initialDelay', this.RangeDataV22,\n\t\t\t\t'playLength', this.RangeDataV22,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV22,\n\t\t\t\t'positionRange', this.RangeDataV22,\n\t\t\t\t'repeatCount', this.RangeDataV22,\n\t\t\t\t'repeatTime', this.RangeDataV22,\n\t\t\t\t'startTimeOffset', this.RangeDataV22,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV22 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV22 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'snapshot', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV22),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV22),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV22),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV22),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV22),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 21\n\t\t\t21:function(){\n\t\t\t\t\t\tthis.DspDataV21 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV21 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV21 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV21),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV21 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV21 =[\n\t\t\t\t'time', this.RangeDataV21,\n\t\t\t\t'value', this.RangeDataV21,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV21 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV21),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV21),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV21 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV21,\n\t\t\t\t'pan3D', this.DynamicParamDataV21,\n\t\t\t\t'reverb', this.DynamicParamDataV21,\n\t\t\t\t'spread3D', this.DynamicParamDataV21,\n\t\t\t\t'volumeA', this.DynamicParamDataV21,\n\t\t\t\t'volumeB', this.DynamicParamDataV21,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV21),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV21),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicConditionDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV21 =[\n\t\t\t\t'condition', Utils.getQWordReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MusicPlaylistDataV21 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'primaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'secondaryPlaylistId', Utils.getQWordReader(),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV21),\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialSilence', this.RangeDataV21,\n\t\t\t\t'intervalSilence', this.RangeDataV21,\n\t\t\t\t'maxPlayLength', this.RangeDataV21,\n\t\t\t\t'volume', this.DynamicParamDataV21,\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV21),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV21),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV21 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV21),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV21),\n\t\t\t\t'musicCondition', Utils.getArrayReader(this.MusicConditionDataV21),\n\t\t\t\t'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV21),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV21),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV21),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV21 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV21),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV21),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV21),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV21,\n\t\t\t\t'pan', this.DynamicParamDataV21,\n\t\t\t\t'pitch', this.DynamicParamDataV21,\n\t\t\t\t'pitchMS', this.DynamicParamDataV21,\n\t\t\t\t'volume', this.DynamicParamDataV21,\n\t\t\t\t'volumeMS', this.DynamicParamDataV21,\n\t\t\t\t'initialDelay', this.RangeDataV21,\n\t\t\t\t'playLength', this.RangeDataV21,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV21,\n\t\t\t\t'positionRange', this.RangeDataV21,\n\t\t\t\t'repeatCount', this.RangeDataV21,\n\t\t\t\t'repeatTime', this.RangeDataV21,\n\t\t\t\t'startTimeOffset', this.RangeDataV21,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV21 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV21 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'snapshot', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV21),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV21),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV21),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV21),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV21),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 20\n\t\t\t20:function(){\n\t\t\t\t\t\tthis.DspDataV20 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV20 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV20 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV20),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV20 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV20 =[\n\t\t\t\t'time', this.RangeDataV20,\n\t\t\t\t'value', this.RangeDataV20,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV20 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV20),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV20),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV20 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV20,\n\t\t\t\t'pan3D', this.DynamicParamDataV20,\n\t\t\t\t'reverb', this.DynamicParamDataV20,\n\t\t\t\t'spread3D', this.DynamicParamDataV20,\n\t\t\t\t'volumeA', this.DynamicParamDataV20,\n\t\t\t\t'volumeB', this.DynamicParamDataV20,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV20),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV20),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV20),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV20),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV20 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV20),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV20),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV20),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV20),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV20 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV20 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV20),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV20),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV20),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV20,\n\t\t\t\t'pan', this.DynamicParamDataV20,\n\t\t\t\t'pitch', this.DynamicParamDataV20,\n\t\t\t\t'pitchMS', this.DynamicParamDataV20,\n\t\t\t\t'volume', this.DynamicParamDataV20,\n\t\t\t\t'volumeMS', this.DynamicParamDataV20,\n\t\t\t\t'initialDelay', this.RangeDataV20,\n\t\t\t\t'playLength', this.RangeDataV20,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV20,\n\t\t\t\t'positionRange', this.RangeDataV20,\n\t\t\t\t'repeatCount', this.RangeDataV20,\n\t\t\t\t'repeatTime', this.RangeDataV20,\n\t\t\t\t'startTimeOffset', this.RangeDataV20,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV20 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV20 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'snapshot', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV20),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV20),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV20),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV20),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV20),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 19, ReferencedFunction: 0xF5DB40\n\t\t\t19:function(){\n\t\t\t\t\t\tthis.DspDataV19 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV19 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV19 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV19),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV19 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV19 =[\n\t\t\t\t'time', this.RangeDataV19,\n\t\t\t\t'value', this.RangeDataV19,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV19 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV19),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV19),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV19 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV19,\n\t\t\t\t'pan3D', this.DynamicParamDataV19,\n\t\t\t\t'reverb', this.DynamicParamDataV19,\n\t\t\t\t'spread3D', this.DynamicParamDataV19,\n\t\t\t\t'volumeA', this.DynamicParamDataV19,\n\t\t\t\t'volumeB', this.DynamicParamDataV19,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV19),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV19),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV19),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV19),\n\t\t\t\t'priority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV19 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV19),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV19),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV19),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV19),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV19 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV19 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV19),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV19),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV19),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV19,\n\t\t\t\t'pan', this.DynamicParamDataV19,\n\t\t\t\t'pitch', this.DynamicParamDataV19,\n\t\t\t\t'pitchMS', this.DynamicParamDataV19,\n\t\t\t\t'volume', this.DynamicParamDataV19,\n\t\t\t\t'volumeMS', this.DynamicParamDataV19,\n\t\t\t\t'initialDelay', this.RangeDataV19,\n\t\t\t\t'playLength', this.RangeDataV19,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV19,\n\t\t\t\t'positionRange', this.RangeDataV19,\n\t\t\t\t'repeatCount', this.RangeDataV19,\n\t\t\t\t'repeatTime', this.RangeDataV19,\n\t\t\t\t'startTimeOffset', this.RangeDataV19,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV19 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV19 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV19),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV19),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV19),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV19),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV19),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 18, ReferencedFunction: 0xF5DA00\n\t\t\t18:function(){\n\t\t\t\t\t\tthis.DspDataV18 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV18 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV18 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV18),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV18 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV18 =[\n\t\t\t\t'time', this.RangeDataV18,\n\t\t\t\t'value', this.RangeDataV18,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV18 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV18),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV18),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV18 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV18,\n\t\t\t\t'pan3D', this.DynamicParamDataV18,\n\t\t\t\t'reverb', this.DynamicParamDataV18,\n\t\t\t\t'spread3D', this.DynamicParamDataV18,\n\t\t\t\t'volumeA', this.DynamicParamDataV18,\n\t\t\t\t'volumeB', this.DynamicParamDataV18,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV18),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV18),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV18),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV18 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV18),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV18),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV18),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV18),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV18 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV18 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV18),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV18),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV18),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV18,\n\t\t\t\t'pan', this.DynamicParamDataV18,\n\t\t\t\t'pitch', this.DynamicParamDataV18,\n\t\t\t\t'pitchMS', this.DynamicParamDataV18,\n\t\t\t\t'volume', this.DynamicParamDataV18,\n\t\t\t\t'volumeMS', this.DynamicParamDataV18,\n\t\t\t\t'initialDelay', this.RangeDataV18,\n\t\t\t\t'playLength', this.RangeDataV18,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV18,\n\t\t\t\t'positionRange', this.RangeDataV18,\n\t\t\t\t'repeatCount', this.RangeDataV18,\n\t\t\t\t'repeatTime', this.RangeDataV18,\n\t\t\t\t'startTimeOffset', this.RangeDataV18,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV18 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV18 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV18),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV18),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV18),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV18),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV18),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 17\n\t\t\t17:function(){\n\t\t\t\t\t\tthis.DspDataV17 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV17 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV17 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV17),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV17 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV17 =[\n\t\t\t\t'time', this.RangeDataV17,\n\t\t\t\t'value', this.RangeDataV17,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV17 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV17),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV17),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV17 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV17,\n\t\t\t\t'pan3D', this.DynamicParamDataV17,\n\t\t\t\t'reverb', this.DynamicParamDataV17,\n\t\t\t\t'spread3D', this.DynamicParamDataV17,\n\t\t\t\t'volumeA', this.DynamicParamDataV17,\n\t\t\t\t'volumeB', this.DynamicParamDataV17,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV17),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV17),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV17),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV17 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV17),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV17),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV17),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV17),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV17 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV17 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV17),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV17),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV17),\n\t\t\t\t'channelFadeIn' , 'float32',\n\t\t\t\t'channelFadeOut' , 'float32',\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'channelMax' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV17,\n\t\t\t\t'pan', this.DynamicParamDataV17,\n\t\t\t\t'pitch', this.DynamicParamDataV17,\n\t\t\t\t'pitchMS', this.DynamicParamDataV17,\n\t\t\t\t'volume', this.DynamicParamDataV17,\n\t\t\t\t'volumeMS', this.DynamicParamDataV17,\n\t\t\t\t'initialDelay', this.RangeDataV17,\n\t\t\t\t'playLength', this.RangeDataV17,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV17,\n\t\t\t\t'positionRange', this.RangeDataV17,\n\t\t\t\t'repeatCount', this.RangeDataV17,\n\t\t\t\t'repeatTime', this.RangeDataV17,\n\t\t\t\t'startTimeOffset', this.RangeDataV17,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV17 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV17 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV17),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV17),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV17),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV17),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV17),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 16\n\t\t\t16:function(){\n\t\t\t\t\t\tthis.DspDataV16 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV16 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV16 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV16),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV16 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV16 =[\n\t\t\t\t'time', this.RangeDataV16,\n\t\t\t\t'value', this.RangeDataV16,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV16 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV16),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV16),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV16 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV16,\n\t\t\t\t'pan3D', this.DynamicParamDataV16,\n\t\t\t\t'reverb', this.DynamicParamDataV16,\n\t\t\t\t'spread3D', this.DynamicParamDataV16,\n\t\t\t\t'volumeA', this.DynamicParamDataV16,\n\t\t\t\t'volumeB', this.DynamicParamDataV16,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV16),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV16),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'echoDelay' , 'float32',\n\t\t\t\t'echoDecayRatio' , 'float32',\n\t\t\t\t'echoWetMix' , 'float32',\n\t\t\t\t'echoDryMix' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV16),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV16 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV16),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV16),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV16),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV16),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV16 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV16 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV16),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV16),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV16),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV16,\n\t\t\t\t'pan', this.DynamicParamDataV16,\n\t\t\t\t'pitch', this.DynamicParamDataV16,\n\t\t\t\t'pitchMS', this.DynamicParamDataV16,\n\t\t\t\t'volume', this.DynamicParamDataV16,\n\t\t\t\t'volumeMS', this.DynamicParamDataV16,\n\t\t\t\t'initialDelay', this.RangeDataV16,\n\t\t\t\t'playLength', this.RangeDataV16,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV16,\n\t\t\t\t'positionRange', this.RangeDataV16,\n\t\t\t\t'repeatCount', this.RangeDataV16,\n\t\t\t\t'repeatTime', this.RangeDataV16,\n\t\t\t\t'startTimeOffset', this.RangeDataV16,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV16 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV16 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV16),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV16),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV16),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV16),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV16),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 15\n\t\t\t15:function(){\n\t\t\t\t\t\tthis.DspDataV15 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV15 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV15 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV15),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV15 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV15 =[\n\t\t\t\t'time', this.RangeDataV15,\n\t\t\t\t'value', this.RangeDataV15,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV15 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV15),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV15),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV15 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV15,\n\t\t\t\t'pan3D', this.DynamicParamDataV15,\n\t\t\t\t'reverb', this.DynamicParamDataV15,\n\t\t\t\t'spread3D', this.DynamicParamDataV15,\n\t\t\t\t'volumeA', this.DynamicParamDataV15,\n\t\t\t\t'volumeB', this.DynamicParamDataV15,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV15),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV15),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV15),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV15 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV15),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV15),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV15),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV15),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV15 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV15 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV15),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV15),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV15),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV15,\n\t\t\t\t'pan', this.DynamicParamDataV15,\n\t\t\t\t'pitch', this.DynamicParamDataV15,\n\t\t\t\t'pitchMS', this.DynamicParamDataV15,\n\t\t\t\t'volume', this.DynamicParamDataV15,\n\t\t\t\t'volumeMS', this.DynamicParamDataV15,\n\t\t\t\t'initialDelay', this.RangeDataV15,\n\t\t\t\t'playLength', this.RangeDataV15,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV15,\n\t\t\t\t'positionRange', this.RangeDataV15,\n\t\t\t\t'repeatCount', this.RangeDataV15,\n\t\t\t\t'repeatTime', this.RangeDataV15,\n\t\t\t\t'startTimeOffset', this.RangeDataV15,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV15 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV15 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV15),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV15),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV15),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV15),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV15),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 14\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.DspDataV14 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV14 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV14 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV14),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV14 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV14 =[\n\t\t\t\t'time', this.RangeDataV14,\n\t\t\t\t'value', this.RangeDataV14,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV14 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV14),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV14),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV14 =[\n\t\t\t\t'doppler' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV14,\n\t\t\t\t'pan3D', this.DynamicParamDataV14,\n\t\t\t\t'spread3D', this.DynamicParamDataV14,\n\t\t\t\t'volumeA', this.DynamicParamDataV14,\n\t\t\t\t'volumeB', this.DynamicParamDataV14,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV14),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV14),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV14),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV14 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'dopplerScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV14),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV14),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV14),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV14),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV14 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV14 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV14),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV14),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV14),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV14,\n\t\t\t\t'pan', this.DynamicParamDataV14,\n\t\t\t\t'pitch', this.DynamicParamDataV14,\n\t\t\t\t'pitchMS', this.DynamicParamDataV14,\n\t\t\t\t'volume', this.DynamicParamDataV14,\n\t\t\t\t'volumeMS', this.DynamicParamDataV14,\n\t\t\t\t'initialDelay', this.RangeDataV14,\n\t\t\t\t'playLength', this.RangeDataV14,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV14,\n\t\t\t\t'positionRange', this.RangeDataV14,\n\t\t\t\t'repeatCount', this.RangeDataV14,\n\t\t\t\t'repeatTime', this.RangeDataV14,\n\t\t\t\t'startTimeOffset', this.RangeDataV14,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV14 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV14 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV14),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV14),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV14),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV14),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV14),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.DspDataV13 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV13 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV13 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV13),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV13 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV13 =[\n\t\t\t\t'time', this.RangeDataV13,\n\t\t\t\t'value', this.RangeDataV13,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV13 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV13),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV13),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV13 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV13,\n\t\t\t\t'pan3D', this.DynamicParamDataV13,\n\t\t\t\t'spread3D', this.DynamicParamDataV13,\n\t\t\t\t'volumeA', this.DynamicParamDataV13,\n\t\t\t\t'volumeB', this.DynamicParamDataV13,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV13),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV13),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV13),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV13 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV13),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV13),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV13),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV13),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV13 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV13 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV13),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV13),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV13),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV13,\n\t\t\t\t'pan', this.DynamicParamDataV13,\n\t\t\t\t'pitch', this.DynamicParamDataV13,\n\t\t\t\t'pitchMS', this.DynamicParamDataV13,\n\t\t\t\t'volume', this.DynamicParamDataV13,\n\t\t\t\t'volumeMS', this.DynamicParamDataV13,\n\t\t\t\t'initialDelay', this.RangeDataV13,\n\t\t\t\t'playLength', this.RangeDataV13,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV13,\n\t\t\t\t'positionRange', this.RangeDataV13,\n\t\t\t\t'repeatCount', this.RangeDataV13,\n\t\t\t\t'repeatTime', this.RangeDataV13,\n\t\t\t\t'startTimeOffset', this.RangeDataV13,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV13 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV13 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'reverbOverride', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV13),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV13),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV13),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV13),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV13),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12, ReferencedFunction: 0xF5D9E0\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.DspDataV12 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV12 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV12 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV12),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV12 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV12 =[\n\t\t\t\t'time', this.RangeDataV12,\n\t\t\t\t'value', this.RangeDataV12,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV12 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV12),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV12),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV12 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV12,\n\t\t\t\t'pan3D', this.DynamicParamDataV12,\n\t\t\t\t'spread3D', this.DynamicParamDataV12,\n\t\t\t\t'volumeA', this.DynamicParamDataV12,\n\t\t\t\t'volumeB', this.DynamicParamDataV12,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV12),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV12),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV12),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV12 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV12),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV12),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV12),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV12),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV12 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV12 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV12),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV12),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV12),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV12,\n\t\t\t\t'pan', this.DynamicParamDataV12,\n\t\t\t\t'pitch', this.DynamicParamDataV12,\n\t\t\t\t'pitchMS', this.DynamicParamDataV12,\n\t\t\t\t'volume', this.DynamicParamDataV12,\n\t\t\t\t'volumeMS', this.DynamicParamDataV12,\n\t\t\t\t'initialDelay', this.RangeDataV12,\n\t\t\t\t'playLength', this.RangeDataV12,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV12,\n\t\t\t\t'positionRange', this.RangeDataV12,\n\t\t\t\t'repeatCount', this.RangeDataV12,\n\t\t\t\t'repeatTime', this.RangeDataV12,\n\t\t\t\t'startTimeOffset', this.RangeDataV12,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV12 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV12 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV12),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV12),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV12),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV12),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV12),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'musicCuePriority' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.DspDataV11 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV11 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV11 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV11),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV11 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV11 =[\n\t\t\t\t'time', this.RangeDataV11,\n\t\t\t\t'value', this.RangeDataV11,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV11 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV11),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV11),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV11 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV11,\n\t\t\t\t'pan3D', this.DynamicParamDataV11,\n\t\t\t\t'spread3D', this.DynamicParamDataV11,\n\t\t\t\t'volumeA', this.DynamicParamDataV11,\n\t\t\t\t'volumeB', this.DynamicParamDataV11,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV11),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV11),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV11),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV11 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV11),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV11),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV11),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV11),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t'musicScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV11 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV11 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV11),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV11),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV11),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV11,\n\t\t\t\t'pan', this.DynamicParamDataV11,\n\t\t\t\t'pitch', this.DynamicParamDataV11,\n\t\t\t\t'pitchMS', this.DynamicParamDataV11,\n\t\t\t\t'volume', this.DynamicParamDataV11,\n\t\t\t\t'volumeMS', this.DynamicParamDataV11,\n\t\t\t\t'initialDelay', this.RangeDataV11,\n\t\t\t\t'playLength', this.RangeDataV11,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV11,\n\t\t\t\t'positionRange', this.RangeDataV11,\n\t\t\t\t'repeatCount', this.RangeDataV11,\n\t\t\t\t'repeatTime', this.RangeDataV11,\n\t\t\t\t'startTimeOffset', this.RangeDataV11,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV11 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV11 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV11),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV11),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV11),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV11),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV11),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.DspDataV10 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV10 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV10 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV10),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV10 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV10 =[\n\t\t\t\t'time', this.RangeDataV10,\n\t\t\t\t'value', this.RangeDataV10,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV10 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV10),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV10),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV10 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV10,\n\t\t\t\t'pan3D', this.DynamicParamDataV10,\n\t\t\t\t'spread3D', this.DynamicParamDataV10,\n\t\t\t\t'volumeA', this.DynamicParamDataV10,\n\t\t\t\t'volumeB', this.DynamicParamDataV10,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV10),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV10),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV10),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV10 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV10),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV10),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV10),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV10),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV10 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV10 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV10),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV10),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV10),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV10,\n\t\t\t\t'pan', this.DynamicParamDataV10,\n\t\t\t\t'pitch', this.DynamicParamDataV10,\n\t\t\t\t'pitchMS', this.DynamicParamDataV10,\n\t\t\t\t'volume', this.DynamicParamDataV10,\n\t\t\t\t'volumeMS', this.DynamicParamDataV10,\n\t\t\t\t'initialDelay', this.RangeDataV10,\n\t\t\t\t'playLength', this.RangeDataV10,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV10,\n\t\t\t\t'positionRange', this.RangeDataV10,\n\t\t\t\t'repeatCount', this.RangeDataV10,\n\t\t\t\t'repeatTime', this.RangeDataV10,\n\t\t\t\t'startTimeOffset', this.RangeDataV10,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV10 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV10 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV10),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV10),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV10),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV10),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV10),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.DspDataV9 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV9 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV9 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV9),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV9 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV9 =[\n\t\t\t\t'time', this.RangeDataV9,\n\t\t\t\t'value', this.RangeDataV9,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV9 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV9),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV9),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV9 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV9,\n\t\t\t\t'pan3D', this.DynamicParamDataV9,\n\t\t\t\t'spread3D', this.DynamicParamDataV9,\n\t\t\t\t'volumeA', this.DynamicParamDataV9,\n\t\t\t\t'volumeB', this.DynamicParamDataV9,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'soundPoolCategory', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV9),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV9),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'soundPoolDelay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'soundPoolCount' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t'soundPoolCountBehavior' , 'uint8',\n\t\t\t\t'soundPoolMode' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV9),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV9 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV9),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV9),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV9),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV9),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV9 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV9 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV9),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV9),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV9),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV9,\n\t\t\t\t'pan', this.DynamicParamDataV9,\n\t\t\t\t'pitch', this.DynamicParamDataV9,\n\t\t\t\t'pitchMS', this.DynamicParamDataV9,\n\t\t\t\t'volume', this.DynamicParamDataV9,\n\t\t\t\t'volumeMS', this.DynamicParamDataV9,\n\t\t\t\t'initialDelay', this.RangeDataV9,\n\t\t\t\t'playLength', this.RangeDataV9,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV9,\n\t\t\t\t'positionRange', this.RangeDataV9,\n\t\t\t\t'repeatCount', this.RangeDataV9,\n\t\t\t\t'repeatTime', this.RangeDataV9,\n\t\t\t\t'startTimeOffset', this.RangeDataV9,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV9 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV9 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV9),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV9),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV9),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV9),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV9),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.DspDataV8 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV8 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV8 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV8),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV8 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV8 =[\n\t\t\t\t'time', this.RangeDataV8,\n\t\t\t\t'value', this.RangeDataV8,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV8 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV8),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV8),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV8 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV8,\n\t\t\t\t'pan3D', this.DynamicParamDataV8,\n\t\t\t\t'spread3D', this.DynamicParamDataV8,\n\t\t\t\t'volumeA', this.DynamicParamDataV8,\n\t\t\t\t'volumeB', this.DynamicParamDataV8,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'reverbDirect' , 'float32',\n\t\t\t\t'reverbRoom' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV8),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV8),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReverbDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'room' , 'float32',\n\t\t\t\t'roomHF' , 'float32',\n\t\t\t\t'roomLF' , 'float32',\n\t\t\t\t'decayTime' , 'float32',\n\t\t\t\t'decayHFRatio' , 'float32',\n\t\t\t\t'reflections' , 'float32',\n\t\t\t\t'reflectionsDelay' , 'float32',\n\t\t\t\t'reverb' , 'float32',\n\t\t\t\t'reverbDelay' , 'float32',\n\t\t\t\t'referenceHF' , 'float32',\n\t\t\t\t'referenceLF' , 'float32',\n\t\t\t\t'diffusion' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV8),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV8 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV8),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV8),\n\t\t\t\t'reverb', Utils.getArrayReader(this.ReverbDataV8),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV8),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV8 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV8 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV8),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV8),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV8),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV8,\n\t\t\t\t'pan', this.DynamicParamDataV8,\n\t\t\t\t'pitch', this.DynamicParamDataV8,\n\t\t\t\t'pitchMS', this.DynamicParamDataV8,\n\t\t\t\t'volume', this.DynamicParamDataV8,\n\t\t\t\t'volumeMS', this.DynamicParamDataV8,\n\t\t\t\t'initialDelay', this.RangeDataV8,\n\t\t\t\t'playLength', this.RangeDataV8,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV8,\n\t\t\t\t'positionRange', this.RangeDataV8,\n\t\t\t\t'repeatCount', this.RangeDataV8,\n\t\t\t\t'repeatTime', this.RangeDataV8,\n\t\t\t\t'startTimeOffset', this.RangeDataV8,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'musicPriority' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV8 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV8 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV8),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV8),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV8),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV8),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV8),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7, ReferencedFunction: 0xF5D970\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.DspDataV7 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV7 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV7 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV7),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV7 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV7 =[\n\t\t\t\t'time', this.RangeDataV7,\n\t\t\t\t'value', this.RangeDataV7,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV7 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV7),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV7),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV7 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV7,\n\t\t\t\t'pan3D', this.DynamicParamDataV7,\n\t\t\t\t'spread3D', this.DynamicParamDataV7,\n\t\t\t\t'volumeA', this.DynamicParamDataV7,\n\t\t\t\t'volumeB', this.DynamicParamDataV7,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDynamicDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'nonFocusGain' , 'float32',\n\t\t\t\t'lowPass' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV7),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV7),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV7),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDynamicDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV7 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'focusTransition' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV7),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV7),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV7),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV7 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV7 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'offsetBone', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV7),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV7),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV7),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV7,\n\t\t\t\t'pan', this.DynamicParamDataV7,\n\t\t\t\t'pitch', this.DynamicParamDataV7,\n\t\t\t\t'pitchMS', this.DynamicParamDataV7,\n\t\t\t\t'volume', this.DynamicParamDataV7,\n\t\t\t\t'volumeMS', this.DynamicParamDataV7,\n\t\t\t\t'initialDelay', this.RangeDataV7,\n\t\t\t\t'playLength', this.RangeDataV7,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV7,\n\t\t\t\t'positionRange', this.RangeDataV7,\n\t\t\t\t'repeatCount', this.RangeDataV7,\n\t\t\t\t'repeatTime', this.RangeDataV7,\n\t\t\t\t'startTimeOffset', this.RangeDataV7,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV7 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV7 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV7),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV7),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV7),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV7),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV7),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.DspDataV6 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDynamicDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'dynamicData', Utils.getPointerReader(this.BussDynamicDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV6 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV6 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV6),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV6 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV6 =[\n\t\t\t\t'time', this.RangeDataV6,\n\t\t\t\t'value', this.RangeDataV6,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV6 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV6),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV6),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV6 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV6,\n\t\t\t\t'pan3D', this.DynamicParamDataV6,\n\t\t\t\t'spread3D', this.DynamicParamDataV6,\n\t\t\t\t'volumeA', this.DynamicParamDataV6,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'outputBussName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV6),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'volumeA' , 'float32',\n\t\t\t\t'volumeAThreshold' , 'float32',\n\t\t\t\t'volumeB' , 'float32',\n\t\t\t\t'volumeBThreshold' , 'float32',\n\t\t\t\t'volumeChangeRate' , 'float32',\n\t\t\t\t'volumeDucking' , 'float32',\n\t\t\t\t'volumeDuckingTimeAttack' , 'float32',\n\t\t\t\t'volumeDuckingTimeRelease' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDynamicDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV6 =[\n\t\t\t\t'defaultSnapshot', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV6),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV6),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV6),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV6 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV6 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV6),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV6),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV6),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV6,\n\t\t\t\t'pan', this.DynamicParamDataV6,\n\t\t\t\t'pitch', this.DynamicParamDataV6,\n\t\t\t\t'pitchMS', this.DynamicParamDataV6,\n\t\t\t\t'volume', this.DynamicParamDataV6,\n\t\t\t\t'volumeMS', this.DynamicParamDataV6,\n\t\t\t\t'initialDelay', this.RangeDataV6,\n\t\t\t\t'playLength', this.RangeDataV6,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV6,\n\t\t\t\t'positionRange', this.RangeDataV6,\n\t\t\t\t'repeatCount', this.RangeDataV6,\n\t\t\t\t'repeatTime', this.RangeDataV6,\n\t\t\t\t'startTimeOffset', this.RangeDataV6,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV6 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV6 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV6),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV6),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV6),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV6),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV6),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.EnvelopePointDataV5 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV5 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV5),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV5 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV5 =[\n\t\t\t\t'time', this.RangeDataV5,\n\t\t\t\t'value', this.RangeDataV5,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV5 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV5),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV5),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV5 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV5,\n\t\t\t\t'pan3D', this.DynamicParamDataV5,\n\t\t\t\t'spread3D', this.DynamicParamDataV5,\n\t\t\t\t'volumeA', this.DynamicParamDataV5,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV5),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'volumeA' , 'float32',\n\t\t\t\t'volumeAThreshold' , 'float32',\n\t\t\t\t'volumeB' , 'float32',\n\t\t\t\t'volumeBThreshold' , 'float32',\n\t\t\t\t'volumeChangeRate' , 'float32',\n\t\t\t\t'volumeDucking' , 'float32',\n\t\t\t\t'volumeDuckingTimeAttack' , 'float32',\n\t\t\t\t'volumeDuckingTimeRelease' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DspDataV5 =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'property', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BussDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'output', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV5),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SnapshotDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'buss', Utils.getArrayReader(this.BussDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV5 =[\n\t\t\t\t'defaultBuss', Utils.getQWordReader(),\n\t\t\t\t'effectsBuss', Utils.getQWordReader(),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV5),\n\t\t\t\t'snapshot', Utils.getArrayReader(this.SnapshotDataV5),\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV5 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV5 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV5),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV5),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV5),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV5,\n\t\t\t\t'pan', this.DynamicParamDataV5,\n\t\t\t\t'pitch', this.DynamicParamDataV5,\n\t\t\t\t'pitchMS', this.DynamicParamDataV5,\n\t\t\t\t'volume', this.DynamicParamDataV5,\n\t\t\t\t'volumeMS', this.DynamicParamDataV5,\n\t\t\t\t'initialDelay', this.RangeDataV5,\n\t\t\t\t'playLength', this.RangeDataV5,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV5,\n\t\t\t\t'positionRange', this.RangeDataV5,\n\t\t\t\t'repeatCount', this.RangeDataV5,\n\t\t\t\t'repeatTime', this.RangeDataV5,\n\t\t\t\t'startTimeOffset', this.RangeDataV5,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV5 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV5 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV5),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV5),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV5),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV5),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV5),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.VolumeGroupDataV4 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'parentName', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV4 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV4 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV4),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV4 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV4 =[\n\t\t\t\t'time', this.RangeDataV4,\n\t\t\t\t'value', this.RangeDataV4,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV4 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV4),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV4),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV4 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV4,\n\t\t\t\t'pan3D', this.DynamicParamDataV4,\n\t\t\t\t'spread3D', this.DynamicParamDataV4,\n\t\t\t\t'volumeA', this.DynamicParamDataV4,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV4 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV4),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'volumeA' , 'float32',\n\t\t\t\t'volumeAThreshold' , 'float32',\n\t\t\t\t'volumeB' , 'float32',\n\t\t\t\t'volumeBThreshold' , 'float32',\n\t\t\t\t'volumeChangeRate' , 'float32',\n\t\t\t\t'volumeDucking' , 'float32',\n\t\t\t\t'volumeDuckingTimeAttack' , 'float32',\n\t\t\t\t'volumeDuckingTimeRelease' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV4 =[\n\t\t\t\t'volumeGroup', Utils.getArrayReader(this.VolumeGroupDataV4),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV4),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'bankIndexFileName' , Utils.getFileNameReader(),\n\t\t\t\t'bankScriptFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV4 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DspDataV4 =[\n\t\t\t\t'param', Utils.getArrayReader(this.DynamicParamDataV4),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV4 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV4 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV4),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV4),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV4),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV4,\n\t\t\t\t'pan', this.DynamicParamDataV4,\n\t\t\t\t'pitch', this.DynamicParamDataV4,\n\t\t\t\t'pitchMS', this.DynamicParamDataV4,\n\t\t\t\t'volume', this.DynamicParamDataV4,\n\t\t\t\t'volumeMS', this.DynamicParamDataV4,\n\t\t\t\t'initialDelay', this.RangeDataV4,\n\t\t\t\t'playLength', this.RangeDataV4,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV4,\n\t\t\t\t'positionRange', this.RangeDataV4,\n\t\t\t\t'repeatCount', this.RangeDataV4,\n\t\t\t\t'repeatTime', this.RangeDataV4,\n\t\t\t\t'startTimeOffset', this.RangeDataV4,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV4 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV4 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV4 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV4 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV4),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV4),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV4),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV4),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV4),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.VolumeGroupDataV3 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'parentName', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV3 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV3 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV3),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV3 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV3 =[\n\t\t\t\t'time', this.RangeDataV3,\n\t\t\t\t'value', this.RangeDataV3,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV3 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV3),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV3),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV3 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV3,\n\t\t\t\t'pan3D', this.DynamicParamDataV3,\n\t\t\t\t'spread3D', this.DynamicParamDataV3,\n\t\t\t\t'volumeA', this.DynamicParamDataV3,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV3 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV3),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'volumeA' , 'float32',\n\t\t\t\t'volumeAThreshold' , 'float32',\n\t\t\t\t'volumeB' , 'float32',\n\t\t\t\t'volumeBThreshold' , 'float32',\n\t\t\t\t'volumeChangeRate' , 'float32',\n\t\t\t\t'volumeDucking' , 'float32',\n\t\t\t\t'volumeDuckingTimeAttack' , 'float32',\n\t\t\t\t'volumeDuckingTimeRelease' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV3 =[\n\t\t\t\t'volumeGroup', Utils.getArrayReader(this.VolumeGroupDataV3),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV3),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'voiceBankFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV3 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DspDataV3 =[\n\t\t\t\t'param', Utils.getArrayReader(this.DynamicParamDataV3),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV3 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV3 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV3),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV3),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV3),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV3,\n\t\t\t\t'pan', this.DynamicParamDataV3,\n\t\t\t\t'pitch', this.DynamicParamDataV3,\n\t\t\t\t'pitchMS', this.DynamicParamDataV3,\n\t\t\t\t'volume', this.DynamicParamDataV3,\n\t\t\t\t'volumeMS', this.DynamicParamDataV3,\n\t\t\t\t'initialDelay', this.RangeDataV3,\n\t\t\t\t'playLength', this.RangeDataV3,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV3,\n\t\t\t\t'positionRange', this.RangeDataV3,\n\t\t\t\t'repeatCount', this.RangeDataV3,\n\t\t\t\t'repeatTime', this.RangeDataV3,\n\t\t\t\t'startTimeOffset', this.RangeDataV3,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV3 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV3 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV3 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV3 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV3),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV3),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV3),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV3),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV3),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.VolumeGroupDataV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'parentName', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV2 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV2 =[\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV2),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV2 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV2 =[\n\t\t\t\t'time', this.RangeDataV2,\n\t\t\t\t'value', this.RangeDataV2,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV2 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV2),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV2),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV2 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV2,\n\t\t\t\t'pan3D', this.DynamicParamDataV2,\n\t\t\t\t'spread3D', this.DynamicParamDataV2,\n\t\t\t\t'volumeA', this.DynamicParamDataV2,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV2),\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'volumeA' , 'float32',\n\t\t\t\t'volumeAThreshold' , 'float32',\n\t\t\t\t'volumeB' , 'float32',\n\t\t\t\t'volumeBThreshold' , 'float32',\n\t\t\t\t'volumeChangeRate' , 'float32',\n\t\t\t\t'volumeDucking' , 'float32',\n\t\t\t\t'volumeDuckingTimeAttack' , 'float32',\n\t\t\t\t'volumeDuckingTimeRelease' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV2 =[\n\t\t\t\t'volumeGroup', Utils.getArrayReader(this.VolumeGroupDataV2),\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV2),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'voiceBankFileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DspDataV2 =[\n\t\t\t\t'param', Utils.getArrayReader(this.DynamicParamDataV2),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV2 =[\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV2 =[\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV2),\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV2),\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV2),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'depth', this.DynamicParamDataV2,\n\t\t\t\t'pan', this.DynamicParamDataV2,\n\t\t\t\t'pitch', this.DynamicParamDataV2,\n\t\t\t\t'pitchMS', this.DynamicParamDataV2,\n\t\t\t\t'volume', this.DynamicParamDataV2,\n\t\t\t\t'volumeMS', this.DynamicParamDataV2,\n\t\t\t\t'initialDelay', this.RangeDataV2,\n\t\t\t\t'playLength', this.RangeDataV2,\n\t\t\t\t'positionOffsetAngle', this.RangeDataV2,\n\t\t\t\t'positionRange', this.RangeDataV2,\n\t\t\t\t'repeatCount', this.RangeDataV2,\n\t\t\t\t'repeatTime', this.RangeDataV2,\n\t\t\t\t'startTimeOffset', this.RangeDataV2,\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV2 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV2 =[\n\t\t\t\t'musicCue', Utils.getQWordReader(),\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV2),\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV2),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV2),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV2),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV2),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.EnvelopePointDataV1 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV1 =[\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV1),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV1 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV1 =[\n\t\t\t\t'time', this.RangeDataV1,\n\t\t\t\t'value', this.RangeDataV1,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV1 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV1),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV1),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV1 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV1,\n\t\t\t\t'pan3D', this.DynamicParamDataV1,\n\t\t\t\t'spread3D', this.DynamicParamDataV1,\n\t\t\t\t'volumeA', this.DynamicParamDataV1,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CategoryDataV1 =[\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV1),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'maxAudible' , 'uint32',\n\t\t\t\t'maxAudibleBehavior' , 'uint8',\n\t\t\t\t'muteFadeTime' , 'float32',\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'volumeA' , 'float32',\n\t\t\t\t'volumeAThreshold' , 'float32',\n\t\t\t\t'volumeB' , 'float32',\n\t\t\t\t'volumeBThreshold' , 'float32',\n\t\t\t\t'volumeChangeRate' , 'float32',\n\t\t\t\t'volumeDucking' , 'float32',\n\t\t\t\t'volumeDuckingTimeAttack' , 'float32',\n\t\t\t\t'volumeDuckingTimeRelease' , 'float32',\n\t\t\t\t'volumeGroupName', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.VolumeGroupDataV1 =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'parentName', Utils.getQWordReader(),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AudioSettingsDataV1 =[\n\t\t\t\t'category', Utils.getArrayReader(this.CategoryDataV1),\n\t\t\t\t'distanceScale' , 'float32',\n\t\t\t\t'voiceBankFileName' , Utils.getFileNameReader(),\n\t\t\t\t'volumeGroup', Utils.getArrayReader(this.VolumeGroupDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.HandlerDataV1 =[\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DspDataV1 =[\n\t\t\t\t'param', Utils.getArrayReader(this.DynamicParamDataV1),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV1 =[\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV1 =[\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV1),\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'depth', this.DynamicParamDataV1,\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV1),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV1),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialDelay', this.RangeDataV1,\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'pan', this.DynamicParamDataV1,\n\t\t\t\t'pitch', this.DynamicParamDataV1,\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'playLength', this.RangeDataV1,\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'positionOffsetAngle', this.RangeDataV1,\n\t\t\t\t'positionRange', this.RangeDataV1,\n\t\t\t\t'repeatCount', this.RangeDataV1,\n\t\t\t\t'repeatTime', this.RangeDataV1,\n\t\t\t\t'startTimeOffset', this.RangeDataV1,\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t'volume', this.DynamicParamDataV1,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV1 =[\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV1 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV1 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV1 =[\n\t\t\t\t'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV1),\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV1),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV1),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV1),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV1),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.HandlerDataV0 =[\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopePointDataV0 =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.EnvelopeDataV0 =[\n\t\t\t\t'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV0),\n\t\t\t\t'offsetType' , 'uint8',\n\t\t\t\t'offsetParameter', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RangeDataV0 =[\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'min' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.RandomParamDataV0 =[\n\t\t\t\t'time', this.RangeDataV0,\n\t\t\t\t'value', this.RangeDataV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DynamicParamDataV0 =[\n\t\t\t\t'envelopeData', Utils.getPointerReader(this.EnvelopeDataV0),\n\t\t\t\t'randomParamData', Utils.getPointerReader(this.RandomParamDataV0),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AttenuationDataV0 =[\n\t\t\t\t'coneInsideAngle' , 'float32',\n\t\t\t\t'coneOutsideAngle' , 'float32',\n\t\t\t\t'coneOutsideVolume' , 'float32',\n\t\t\t\t'lowPass', this.DynamicParamDataV0,\n\t\t\t\t'pan3D', this.DynamicParamDataV0,\n\t\t\t\t'spread3D', this.DynamicParamDataV0,\n\t\t\t\t'volumeA', this.DynamicParamDataV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.DspDataV0 =[\n\t\t\t\t'param', Utils.getArrayReader(this.DynamicParamDataV0),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameDataV0 =[\n\t\t\t\t'audioType' , 'uint8',\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'language', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MetaSoundDataV0 =[\n\t\t\t\t'attenuation', Utils.getPointerReader(this.AttenuationDataV0),\n\t\t\t\t'category', Utils.getQWordReader(),\n\t\t\t\t'channelMode' , 'uint8',\n\t\t\t\t'channelPriority' , 'uint8',\n\t\t\t\t'depth', this.DynamicParamDataV0,\n\t\t\t\t'dsp', Utils.getArrayReader(this.DspDataV0),\n\t\t\t\t'endCue', Utils.getQWordReader(),\n\t\t\t\t'endCueOffset' , 'float32',\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'fadeOutTime' , 'float32',\n\t\t\t\t'fileIterateMode' , 'uint8',\n\t\t\t\t'fileName', Utils.getArrayReader(this.FileNameDataV0),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'initialDelay', this.RangeDataV0,\n\t\t\t\t'loopCount' , 'uint32',\n\t\t\t\t'loopMode' , 'uint8',\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'pan', this.DynamicParamDataV0,\n\t\t\t\t'pitch', this.DynamicParamDataV0,\n\t\t\t\t'playbackMode' , 'uint8',\n\t\t\t\t'playLength', this.RangeDataV0,\n\t\t\t\t'playlistId', Utils.getQWordReader(),\n\t\t\t\t'positionMode' , 'uint8',\n\t\t\t\t'positionOffset' , ['[]','float32',3],\n\t\t\t\t'positionOffsetAngle', this.RangeDataV0,\n\t\t\t\t'positionRange', this.RangeDataV0,\n\t\t\t\t'repeatCount', this.RangeDataV0,\n\t\t\t\t'repeatTime', this.RangeDataV0,\n\t\t\t\t'startTimeOffset', this.RangeDataV0,\n\t\t\t\t'repeatTimeFrom' , 'uint8',\n\t\t\t\t'volume', this.DynamicParamDataV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptRefDataV0 =[\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerMarkerDataV0 =[\n\t\t\t\t'cue', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV0 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ScriptFileDataV0 =[\n\t\t\t\t'fadeInTime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'handler', Utils.getArrayReader(this.HandlerDataV0),\n\t\t\t\t'metaSound', Utils.getArrayReader(this.MetaSoundDataV0),\n\t\t\t\t'scriptRef', Utils.getArrayReader(this.ScriptRefDataV0),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV0),\n\t\t\t\t'volume' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: BKCK, versions: 3, strucTab: 0x1526B90 \n\t///==================================================\n\t{\n\t\tname:'BKCK',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.AsndFileDataV2 =[\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'reserved1' , 'uint32',\n\t\t\t\t'reserved2' , 'uint32',\n\t\t\t\t'reserved3' , 'uint32',\n\t\t\t\t'reserved4' , 'uint32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'reserved5' , 'uint8',\n\t\t\t\t'reserved6' , 'uint8',\n\t\t\t\t'reserved7' , 'uint8',\n\t\t\t\t'reserved8' , 'uint8',\n\t\t\t\t'audioData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ReservedBankDataV2 =[\n\t\t\t\t'reserved1' , 'uint32',\n\t\t\t\t'reserved2' , 'uint32',\n\t\t\t\t'reserved3' , 'uint32',\n\t\t\t\t'reserved4' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.BankFileDataV2 =[\n\t\t\t\t'reserved1' , 'uint32',\n\t\t\t\t'reserved2' , 'uint32',\n\t\t\t\t'reserved3' , 'uint32',\n\t\t\t\t'reserved4' , 'uint32',\n\t\t\t\t'asndFile', Utils.getArrayReader(this.AsndFileDataV2),\n\t\t\t\t'reservedData', Utils.getPointerReader(this.ReservedBankDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.AsndFileDataV1 =[\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'reserved1' , 'uint32',\n\t\t\t\t'reserved2' , 'uint32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'audioData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.BankFileDataV1 =[\n\t\t\t\t'reserved1' , 'uint32',\n\t\t\t\t'reserved2' , 'uint32',\n\t\t\t\t'asndFile', Utils.getArrayReader(this.AsndFileDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.AsndFileDataV0 =[\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'reserved1' , 'uint32',\n\t\t\t\t'reserved2' , 'uint32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'audioData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.BankFileDataV0 =[\n\t\t\t\t'reserved1' , 'uint32',\n\t\t\t\t'reserved2' , 'uint32',\n\t\t\t\t'asndFile', Utils.getArrayReader(this.AsndFileDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: BIDX, versions: 1, strucTab: 0x1526E2C \n\t///==================================================\n\t{\n\t\tname:'BIDX',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.BankFileNameDataV0 =[\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.BankLanguageDataV0 =[\n\t\t\t\t'bankFileName', Utils.getArrayReader(this.BankFileNameDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.BankIndexDataV0 =[\n\t\t\t\t'bankLanguage', Utils.getArrayReader(this.BankLanguageDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: ASND, versions: 3, strucTab: 0x1526FF0 \n\t///==================================================\n\t{\n\t\tname:'ASND',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.ReservedWaveformDataV2 =[\n\t\t\t\t'reserved1' , 'uint32',\n\t\t\t\t'reserved2' , 'uint32',\n\t\t\t\t'reserved3' , 'uint32',\n\t\t\t\t'reserved4' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.WaveformDataV2 =[\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'reservedData', Utils.getPointerReader(this.ReservedWaveformDataV2),\n\t\t\t\t'reserved1' , 'uint32',\n\t\t\t\t'reserved2' , 'uint32',\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'numSamples' , 'uint32',\n\t\t\t\t'loopStart' , 'uint32',\n\t\t\t\t'loopEnd' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'format' , 'uint8',\n\t\t\t\t'reserved3' , 'uint8',\n\t\t\t\t'reserved4' , 'uint8',\n\t\t\t\t'reserved5' , 'uint8',\n\t\t\t\t'numChannels' , 'uint8',\n\t\t\t\t'reserved6' , 'uint8',\n\t\t\t\t'reserved7' , 'uint8',\n\t\t\t\t'reserved8' , 'uint8',\n\t\t\t\t'audioData', Utils.getArrayReader('uint8'),\n\t\t\t\t'otherData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1, ReferencedFunction: 0xF5DC10\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.__root=this.WaveformDataV1 =[\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'numSamples' , 'uint32',\n\t\t\t\t'loopStart' , 'uint32',\n\t\t\t\t'loopEnd' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'format' , 'uint8',\n\t\t\t\t'noteBase' , 'uint8',\n\t\t\t\t'noteHigh' , 'uint8',\n\t\t\t\t'noteLow' , 'uint8',\n\t\t\t\t'numChannels' , 'uint8',\n\t\t\t\t'reserved1' , 'uint8',\n\t\t\t\t'reserved2' , 'uint8',\n\t\t\t\t'reserved3' , 'uint8',\n\t\t\t\t'audioData', Utils.getArrayReader('uint8'),\n\t\t\t\t'otherData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.WaveformDataV0 =[\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'noteBase' , 'uint8',\n\t\t\t\t'noteHigh' , 'uint8',\n\t\t\t\t'noteLow' , 'uint8',\n\t\t\t\t'numChannels' , 'uint8',\n\t\t\t\t'numSamples' , 'uint32',\n\t\t\t\t'waveformDataType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: CSCN, versions: 37, strucTab: 0x1540030 \n\t///==================================================\n\t{\n\t\tname:'CSCN',\n\t\tversions:{\n\n\n\t\t\t// => Version: 36, ReferencedFunction: 0xF73C40\n\t\t\t36:function(){\n\t\t\t\t\t\tthis.PropertyDataV36 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV36 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV36 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV36 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV36 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV36),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV36),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV36),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV36 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV36),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV36),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV36 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV36 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV36 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV36,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV36,\n\t\t\t\t'fillColor', this.ColorDefDataV36,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV36,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV36 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV36 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV36 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV36 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'index' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SpeciesResourceDataV36 =[\n\t\t\t\t'speciesId', ['[]', 'uint8', 16],\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'modelId', Utils.getQWordReader(),\n\t\t\t\t'modelVariant', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV36 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV36),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV36),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV36),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV36),\n\t\t\t\t'speciesResource', Utils.getArrayReader(this.SpeciesResourceDataV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV36 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV36),\n\t\t\t\t'resources', this.ResourceDataV36,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV36),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 35\n\t\t\t35:function(){\n\t\t\t\t\t\tthis.PropertyDataV35 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV35 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV35 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV35 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV35 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV35),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV35),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV35),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV35 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV35),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV35),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV35 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV35 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV35 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV35,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV35,\n\t\t\t\t'fillColor', this.ColorDefDataV35,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV35,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV35 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV35 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV35 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV35 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'index' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SpeciesResourceDataV35 =[\n\t\t\t\t'speciesId', ['[]', 'uint8', 16],\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'modelId', Utils.getQWordReader(),\n\t\t\t\t'modelVariant', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV35 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV35),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV35),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV35),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV35),\n\t\t\t\t'speciesResource', Utils.getArrayReader(this.SpeciesResourceDataV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV35 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV35),\n\t\t\t\t'resources', this.ResourceDataV35,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV35),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 34, ReferencedFunction: 0xF73BA0\n\t\t\t34:function(){\n\t\t\t\t\t\tthis.PropertyDataV34 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV34 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV34 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV34 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV34 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV34),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV34),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV34),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV34 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV34),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV34),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV34 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV34 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV34 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV34,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV34,\n\t\t\t\t'fillColor', this.ColorDefDataV34,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV34,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV34 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV34 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV34 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV34 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'index' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SpeciesResourceDataV34 =[\n\t\t\t\t'speciesId', ['[]', 'uint8', 16],\n\t\t\t\t'modelId', Utils.getQWordReader(),\n\t\t\t\t'modelVariant', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV34 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV34),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV34),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV34),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV34),\n\t\t\t\t'speciesResource', Utils.getArrayReader(this.SpeciesResourceDataV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV34 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV34),\n\t\t\t\t'resources', this.ResourceDataV34,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV34),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 33, ReferencedFunction: 0xF73B00\n\t\t\t33:function(){\n\t\t\t\t\t\tthis.PropertyDataV33 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV33 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV33 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV33 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV33 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV33),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV33),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV33),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV33 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV33),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV33),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV33 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV33 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV33 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV33,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV33,\n\t\t\t\t'fillColor', this.ColorDefDataV33,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV33,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV33 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV33 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV33 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV33 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'index' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV33 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV33),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV33),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV33),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV33 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV33),\n\t\t\t\t'resources', this.ResourceDataV33,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV33),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 32, ReferencedFunction: 0xF73A60\n\t\t\t32:function(){\n\t\t\t\t\t\tthis.PropertyDataV32 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV32 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV32 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV32 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV32 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV32),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV32),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV32),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV32 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV32),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV32),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV32 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV32 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV32 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV32,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV32,\n\t\t\t\t'fillColor', this.ColorDefDataV32,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV32,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV32 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV32 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV32 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV32 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'index' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV32 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV32),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV32),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV32),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV32 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV32),\n\t\t\t\t'resources', this.ResourceDataV32,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV32),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 31, ReferencedFunction: 0xF739C0\n\t\t\t31:function(){\n\t\t\t\t\t\tthis.PropertyDataV31 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV31 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV31 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV31 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV31 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV31),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV31),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV31),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV31 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV31),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV31),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV31 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV31 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV31 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV31,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV31,\n\t\t\t\t'fillColor', this.ColorDefDataV31,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV31,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV31 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV31 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV31 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV31 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'index' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV31 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV31),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV31),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV31),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV31 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV31),\n\t\t\t\t'resources', this.ResourceDataV31,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV31),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 30, ReferencedFunction: 0xF73970\n\t\t\t30:function(){\n\t\t\t\t\t\tthis.PropertyDataV30 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV30 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV30 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV30 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV30 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV30),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV30),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV30),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV30 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV30),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV30),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV30 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV30 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV30 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV30,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV30,\n\t\t\t\t'fillColor', this.ColorDefDataV30,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV30,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV30 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV30 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV30 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV30 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'index' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV30 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV30),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV30),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV30),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV30 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV30),\n\t\t\t\t'resources', this.ResourceDataV30,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV30),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 29\n\t\t\t29:function(){\n\t\t\t\t\t\tthis.PropertyDataV29 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV29 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV29 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV29 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV29),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV29),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV29),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV29),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV29),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV29 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV29 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV29,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV29,\n\t\t\t\t'fillColor', this.ColorDefDataV29,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV29,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV29 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV29 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV29 =[\n\t\t\t\t'guid', ['[]', 'uint8', 16],\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV29 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV29),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV29),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV29),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV29 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV29),\n\t\t\t\t'resources', this.ResourceDataV29,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV29),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 28, ReferencedFunction: 0xF738D0\n\t\t\t28:function(){\n\t\t\t\t\t\tthis.PropertyDataV28 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV28 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV28 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV28 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV28),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV28),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV28),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV28),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV28),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV28 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV28 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV28,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV28,\n\t\t\t\t'fillColor', this.ColorDefDataV28,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV28,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV28 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV28 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV28 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV28),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV28),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV28),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV28 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV28),\n\t\t\t\t'resources', this.ResourceDataV28,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV28),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 27, ReferencedFunction: 0xF73830\n\t\t\t27:function(){\n\t\t\t\t\t\tthis.PropertyDataV27 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV27 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV27 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV27 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV27),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV27),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV27),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV27),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV27),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV27 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV27 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV27,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV27,\n\t\t\t\t'fillColor', this.ColorDefDataV27,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV27,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV27 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV27 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV27 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV27),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV27),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV27),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV27 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV27),\n\t\t\t\t'resources', this.ResourceDataV27,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV27),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 26, ReferencedFunction: 0xF73790\n\t\t\t26:function(){\n\t\t\t\t\t\tthis.PropertyDataV26 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV26 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV26 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV26 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV26),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV26),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV26),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV26),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV26),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV26 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV26 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV26,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV26,\n\t\t\t\t'fillColor', this.ColorDefDataV26,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV26,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV26 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV26 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV26 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV26),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV26),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV26),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV26 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV26),\n\t\t\t\t'resources', this.ResourceDataV26,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV26),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 25, ReferencedFunction: 0xF736F0\n\t\t\t25:function(){\n\t\t\t\t\t\tthis.PropertyDataV25 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV25 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV25 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV25 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV25),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV25),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV25),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV25),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV25),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV25 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV25 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV25,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV25,\n\t\t\t\t'fillColor', this.ColorDefDataV25,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV25,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV25 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV25 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV25),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV25),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV25),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV25 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV25),\n\t\t\t\t'resources', this.ResourceDataV25,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 24, ReferencedFunction: 0xF73650\n\t\t\t24:function(){\n\t\t\t\t\t\tthis.PropertyDataV24 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV24 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV24 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV24 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV24),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV24),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV24),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV24),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV24),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'playScript', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV24 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV24 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV24,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV24,\n\t\t\t\t'fillColor', this.ColorDefDataV24,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV24,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV24 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV24 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV24),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV24),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV24),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV24 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV24),\n\t\t\t\t'resources', this.ResourceDataV24,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 23\n\t\t\t23:function(){\n\t\t\t\t\t\tthis.PropertyDataV23 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV23 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV23 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV23 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV23),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV23),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV23),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV23),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV23),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV23 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV23 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV23,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV23,\n\t\t\t\t'fillColor', this.ColorDefDataV23,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV23,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV23 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV23 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV23),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV23),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV23),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV23 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV23),\n\t\t\t\t'resources', this.ResourceDataV23,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 22, ReferencedFunction: 0xF735B0\n\t\t\t22:function(){\n\t\t\t\t\t\tthis.PropertyDataV22 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV22 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV22 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV22 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV22),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV22),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV22),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV22),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV22),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV22 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV22 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV22,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV22,\n\t\t\t\t'fillColor', this.ColorDefDataV22,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV22,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV22 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV22 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV22),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV22),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV22),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV22 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV22),\n\t\t\t\t'resources', this.ResourceDataV22,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 21\n\t\t\t21:function(){\n\t\t\t\t\t\tthis.PropertyDataV21 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV21 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV21 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV21 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV21),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV21),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV21),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV21),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV21),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV21 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV21 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV21,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV21,\n\t\t\t\t'fillColor', this.ColorDefDataV21,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV21,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV21 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV21 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV21),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV21),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV21),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV21 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV21),\n\t\t\t\t'resources', this.ResourceDataV21,\n\t\t\t\t'trackGroup', Utils.getPointerReader(this.TrackGroupDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 20, ReferencedFunction: 0xF73510\n\t\t\t20:function(){\n\t\t\t\t\t\tthis.PropertyDataV20 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV20 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV20 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV20 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV20),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV20),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV20),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV20),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV20),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV20 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV20 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV20,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV20,\n\t\t\t\t'fillColor', this.ColorDefDataV20,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV20,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV20 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV20 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV20),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV20),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV20),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV20 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV20),\n\t\t\t\t'resources', this.ResourceDataV20,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 19, ReferencedFunction: 0xF73470\n\t\t\t19:function(){\n\t\t\t\t\t\tthis.PropertyDataV19 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV19 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV19 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV19 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV19),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV19),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV19),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV19),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV19),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV19 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV19 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV19,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV19,\n\t\t\t\t'fillColor', this.ColorDefDataV19,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV19,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV19 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV19 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV19),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV19),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV19),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV19 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV19),\n\t\t\t\t'resources', this.ResourceDataV19,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 18, ReferencedFunction: 0xF73470\n\t\t\t18:function(){\n\t\t\t\t\t\tthis.PropertyDataV18 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV18 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV18 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV18 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV18),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV18),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV18),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV18),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV18),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV18 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV18 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV18,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV18,\n\t\t\t\t'fillColor', this.ColorDefDataV18,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV18,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV18 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV18 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV18),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV18),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV18),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV18 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV18),\n\t\t\t\t'resources', this.ResourceDataV18,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 17, ReferencedFunction: 0xF733D0\n\t\t\t17:function(){\n\t\t\t\t\t\tthis.PropertyDataV17 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV17 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV17 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV17 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV17),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV17),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV17),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV17),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV17),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV17 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV17 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV17,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV17,\n\t\t\t\t'fillColor', this.ColorDefDataV17,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV17,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV17 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV17 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV17),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV17),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV17),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV17 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV17),\n\t\t\t\t'resources', this.ResourceDataV17,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 16, ReferencedFunction: 0xF73330\n\t\t\t16:function(){\n\t\t\t\t\t\tthis.PropertyDataV16 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV16 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV16 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV16 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV16),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV16),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV16),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV16),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV16),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV16 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV16 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV16,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV16,\n\t\t\t\t'fillColor', this.ColorDefDataV16,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV16,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV16 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV16 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV16),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV16),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV16),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV16 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV16),\n\t\t\t\t'resources', this.ResourceDataV16,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 15\n\t\t\t15:function(){\n\t\t\t\t\t\tthis.PropertyDataV15 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV15 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV15 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV15 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV15),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV15),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV15),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV15),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV15),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'updateScript', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV15 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV15 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV15,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV15,\n\t\t\t\t'fillColor', this.ColorDefDataV15,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV15,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV15 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV15 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV15),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV15),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV15),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV15 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV15),\n\t\t\t\t'resources', this.ResourceDataV15,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 14\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.PropertyDataV14 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV14 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV14 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV14 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV14),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV14),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV14),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV14),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV14),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV14 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV14 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV14,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV14,\n\t\t\t\t'fillColor', this.ColorDefDataV14,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV14,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV14 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'voiceId' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV14 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV14),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV14),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV14),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV14 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV14),\n\t\t\t\t'resources', this.ResourceDataV14,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13, ReferencedFunction: 0xF732B0\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.PropertyDataV13 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV13 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV13 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV13 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV13),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV13),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV13),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV13),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV13),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV13 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV13 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV13,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV13,\n\t\t\t\t'fillColor', this.ColorDefDataV13,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV13,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV13 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV13 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV13),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV13),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV13),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV13 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV13),\n\t\t\t\t'resources', this.ResourceDataV13,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12, ReferencedFunction: 0xF731C0\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.PropertyDataV12 =[\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV12 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV12 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV12 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV12),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV12),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV12),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV12),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV12),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'environmentMap', Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV12 =[\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV12 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV12,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV12,\n\t\t\t\t'fillColor', this.ColorDefDataV12,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV12,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV12 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV12 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV12),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV12),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV12),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV12 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV12),\n\t\t\t\t'resources', this.ResourceDataV12,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11, ReferencedFunction: 0xF73120\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.PropertyDataV11 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV11 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV11 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV11 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV11),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV11),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV11),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV11 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV11 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV11,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV11,\n\t\t\t\t'fillColor', this.ColorDefDataV11,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV11,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV11 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV11 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV11),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV11),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV11),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV11 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV11),\n\t\t\t\t'resources', this.ResourceDataV11,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10, ReferencedFunction: 0xF730C0\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.PropertyDataV10 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV10 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV10 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV10 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV10),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV10),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV10),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV10 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV10 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV10,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV10,\n\t\t\t\t'fillColor', this.ColorDefDataV10,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV10,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV10 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV10 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV10),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV10),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV10),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV10 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV10),\n\t\t\t\t'resources', this.ResourceDataV10,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9, ReferencedFunction: 0xF73010\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.PropertyDataV9 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV9 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV9 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV9 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV9),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV9),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV9),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV9 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV9 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV9,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV9,\n\t\t\t\t'fillColor', this.ColorDefDataV9,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV9,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV9 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV9 =[\n\t\t\t\t'crc' , 'uint32',\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV9),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV9),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV9),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV9 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV9),\n\t\t\t\t'resources', this.ResourceDataV9,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.PropertyDataV8 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV8 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV8 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV8 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV8),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV8),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV8),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV8 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV8 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV8,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV8,\n\t\t\t\t'fillColor', this.ColorDefDataV8,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV8,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FileNameRefDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'fileName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV8 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV8 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV8),\n\t\t\t\t'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV8),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV8),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV8 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV8),\n\t\t\t\t'resources', this.ResourceDataV8,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7, ReferencedFunction: 0xF72F30\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.PropertyDataV7 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV7 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV7 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV7 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV7),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV7),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV7),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV7 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV7 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV7,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV7,\n\t\t\t\t'fillColor', this.ColorDefDataV7,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV7,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV7 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV7 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV7),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV7),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV7 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV7),\n\t\t\t\t'resources', this.ResourceDataV7,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6, ReferencedFunction: 0xF72E60\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.PropertyDataV6 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV6 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV6 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV6 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV6),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV6),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV6),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV6 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV6 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV6,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV6,\n\t\t\t\t'fillColor', this.ColorDefDataV6,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV6,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV6 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV6 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV6),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV6),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV6 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV6),\n\t\t\t\t'resources', this.ResourceDataV6,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5, ReferencedFunction: 0xF72DC0\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.PropertyDataV5 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV5 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV5 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV5 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV5),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV5),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV5),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV5 =[\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV5 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV5 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV5,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV5,\n\t\t\t\t'fillColor', this.ColorDefDataV5,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV5,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV5 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV5 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV5),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV5),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV5 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV5),\n\t\t\t\t'resources', this.ResourceDataV5,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4, ReferencedFunction: 0xF72D20\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.PropertyDataV4 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV4 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV4 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV4 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV4 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV4),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV4),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV4 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV4),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV4 =[\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV4 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV4 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV4,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV4,\n\t\t\t\t'fillColor', this.ColorDefDataV4,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV4,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV4 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV4 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV4 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'id' , 'uint32',\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV4 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV4),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV4),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV4 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV4),\n\t\t\t\t'resources', this.ResourceDataV4,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3, ReferencedFunction: 0xF72C80\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PropertyDataV3 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV3 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV3 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV3 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV3 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV3),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV3),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV3 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV3),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV3 =[\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV3 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV3 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV3,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV3,\n\t\t\t\t'fillColor', this.ColorDefDataV3,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV3,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV3 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV3 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV3 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV3 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV3),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV3),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV3 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV3),\n\t\t\t\t'resources', this.ResourceDataV3,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PropertyDataV2 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV2 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV2 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV2 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV2),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV2),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV2),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV2 =[\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV2 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV2 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV2,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV2,\n\t\t\t\t'fillColor', this.ColorDefDataV2,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV2,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV2 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV2 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV2),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV2),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV2 =[\n\t\t\t\t'startingSequence', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV2),\n\t\t\t\t'resources', this.ResourceDataV2,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1, ReferencedFunction: 0xF72B70\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PropertyDataV1 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV1 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV1 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV1 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV1 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV1),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV1),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV1 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV1),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV1 =[\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV1 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV1 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV1,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV1,\n\t\t\t\t'fillColor', this.ColorDefDataV1,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV1,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScriptDataV1 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'byteCode', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV1 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV1 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV1 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV1),\n\t\t\t\t'script', Utils.getArrayReader(this.ScriptDataV1),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV1 =[\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV1),\n\t\t\t\t'resources', this.ResourceDataV1,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PropertyDataV0 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'value', Utils.getQWordReader(),\n\t\t\t\t'pathVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.CurveKeyDataV0 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'inTangent' , 'float32',\n\t\t\t\t'outTangent' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.FlagKeyDataV0 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TriggerKeyDataV0 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'flags1' , 'uint8',\n\t\t\t\t'flags2' , 'uint8',\n\t\t\t\t'flags3' , 'uint8',\n\t\t\t\t'flags4' , 'uint8',\n\t\t\t\t'token1', Utils.getQWordReader(),\n\t\t\t\t'token2', Utils.getQWordReader(),\n\t\t\t\t'value1' , 'float32',\n\t\t\t\t'value2' , 'float32',\n\t\t\t\t'value3' , 'float32',\n\t\t\t\t'value4' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackDataV0 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'curveKey', Utils.getArrayReader(this.CurveKeyDataV0),\n\t\t\t\t'flagKey', Utils.getArrayReader(this.FlagKeyDataV0),\n\t\t\t\t'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TrackGroupDataV0 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'prop', Utils.getArrayReader(this.PropertyDataV0),\n\t\t\t\t'track', Utils.getArrayReader(this.TrackDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SequenceDataV0 =[\n\t\t\t\t'environmentMap' , Utils.getFileNameReader(),\n\t\t\t\t'map', Utils.getString16Reader(),\n\t\t\t\t'clientMap', Utils.getString16Reader(),\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'trackGroup', Utils.getArrayReader(this.TrackGroupDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ColorDefDataV0 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.AmbientLightDataV0 =[\n\t\t\t\t'ambientGroundColor', this.ColorDefDataV0,\n\t\t\t\t'ambientSkyColor', this.ColorDefDataV0,\n\t\t\t\t'fillColor', this.ColorDefDataV0,\n\t\t\t\t'hemisphericalColor', this.ColorDefDataV0,\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextEntryDataV0 =[\n\t\t\t\t'text', Utils.getString16Reader(),\n\t\t\t\t'language' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.TextResourceDataV0 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'textEntry', Utils.getArrayReader(this.TextEntryDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ResourceDataV0 =[\n\t\t\t\t'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV0),\n\t\t\t\t'textResource', Utils.getArrayReader(this.TextResourceDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneDataV0 =[\n\t\t\t\t'sequence', Utils.getArrayReader(this.SequenceDataV0),\n\t\t\t\t'resources', this.ResourceDataV0,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: shad, versions: 2, strucTab: 0x157F250 \n\t///==================================================\n\t{\n\t\tname:'shad',\n\t\tversions:{\n\n\n\t\t\t// => Version: 1, ReferencedFunction: 0xFFD130\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapShadowTileV1 =[\n\t\t\t\t'compressionMode' , 'uint32',\n\t\t\t\t'bytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapShadowV1 =[\n\t\t\t\t'shadowDims', ['[]', 'uint32', 2],\n\t\t\t\t'tileDims', ['[]', 'uint32', 2],\n\t\t\t\t'tiles', Utils.getArrayReader(this.PackMapShadowTileV1),\n\t\t\t\t'worldToShadow', ['[]', 'float32', 16],\n\t\t\t\t's' , ['[]','float32',2],\n\t\t\t\t't' , ['[]','float32',2],\n\t\t\t\t'u' , ['[]','float32',2],\n\t\t\t\t'shadowEye' , ['[]','float32',3],\n\t\t\t\t'shadowDir' , ['[]','float32',3],\n\t\t\t\t'shadowUp' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapShadowTileV0 =[\n\t\t\t\t'compressionMode' , 'uint32',\n\t\t\t\t'bytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapShadowV0 =[\n\t\t\t\t'shadowDims', ['[]', 'uint32', 2],\n\t\t\t\t'tileDims', ['[]', 'uint32', 2],\n\t\t\t\t'tiles', Utils.getArrayReader(this.PackMapShadowTileV0),\n\t\t\t\t'worldToShadow', ['[]', 'float32', 16],\n\t\t\t\t's' , ['[]','float32',2],\n\t\t\t\t't' , ['[]','float32',2],\n\t\t\t\t'u' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: pack, versions: 1, strucTab: 0x157DABC \n\t///==================================================\n\t{\n\t\tname:'pack',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.MapVariant =[\n\t\t\t\t'file', Utils.getString16Reader(),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapPackage =[\n\t\t\t\t'baseFile' , Utils.getFileNameReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.MapVariant),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: area, versions: 5, strucTab: 0x157FEB0 \n\t///==================================================\n\t{\n\t\tname:'area',\n\t\tversions:{\n\n\n\t\t\t// => Version: 4, ReferencedFunction: 0xFFCBA0\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.PackMapAreaPolygonV4 =[\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'height' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaPortalV4 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaVolumeV4 =[\n\t\t\t\t'portals', Utils.getArrayReader(this.PackMapAreaPortalV4),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'pointInterior' , ['[]','float32',3],\n\t\t\t\t'pointExterior' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaV4 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'floor' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'polygon', this.PackMapAreaPolygonV4,\n\t\t\t\t'volume', this.PackMapAreaVolumeV4,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaToolV4 =[\n\t\t\t\t'annotation', Utils.getString16Reader(),\n\t\t\t\t'renderOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapAreasV4 =[\n\t\t\t\t'areas', Utils.getArrayReader(this.PackMapAreaV4),\n\t\t\t\t'areaTools', Utils.getArrayReader(this.PackMapAreaToolV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PackMapAreaPolygonV3 =[\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'height' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaPortalV3 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaVolumeV3 =[\n\t\t\t\t'portals', Utils.getArrayReader(this.PackMapAreaPortalV3),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'pointInterior' , ['[]','float32',3],\n\t\t\t\t'pointExterior' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaV3 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'floor' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'polygon', this.PackMapAreaPolygonV3,\n\t\t\t\t'volume', this.PackMapAreaVolumeV3,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaToolV3 =[\n\t\t\t\t'annotation', Utils.getString16Reader(),\n\t\t\t\t'renderOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapAreasV3 =[\n\t\t\t\t'areas', Utils.getArrayReader(this.PackMapAreaV3),\n\t\t\t\t'areaTools', Utils.getArrayReader(this.PackMapAreaToolV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapAreaPolygonV2 =[\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'height' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaPortalV2 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaVolumeV2 =[\n\t\t\t\t'portals', Utils.getArrayReader(this.PackMapAreaPortalV2),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'pointInterior' , ['[]','float32',3],\n\t\t\t\t'pointExterior' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaV2 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'floor' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'polygon', this.PackMapAreaPolygonV2,\n\t\t\t\t'volume', this.PackMapAreaVolumeV2,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaToolV2 =[\n\t\t\t\t'annotation', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapAreasV2 =[\n\t\t\t\t'areas', Utils.getArrayReader(this.PackMapAreaV2),\n\t\t\t\t'areaTools', Utils.getArrayReader(this.PackMapAreaToolV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1, ReferencedFunction: 0xF6B280\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapAreaPolygonV1 =[\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'height' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaPortalV1 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaVolumeV1 =[\n\t\t\t\t'portals', Utils.getArrayReader(this.PackMapAreaPortalV1),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'pointInterior' , ['[]','float32',3],\n\t\t\t\t'pointExterior' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAreaV1 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'floor' , 'uint8',\n\t\t\t\t'polygon', this.PackMapAreaPolygonV1,\n\t\t\t\t'volume', this.PackMapAreaVolumeV1,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapAreasV1 =[\n\t\t\t\t'areas', Utils.getArrayReader(this.PackMapAreaV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapAreaV0 =[\n\t\t\t\t'min' , ['[]','float32',3],\n\t\t\t\t'max' , ['[]','float32',3],\n\t\t\t\t'internal' , ['[]','float32',3],\n\t\t\t\t'external' , ['[]','float32',3],\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPortalV0 =[\n\t\t\t\t'portalVerts', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapAreasV0 =[\n\t\t\t\t'areas', Utils.getArrayReader(this.PackMapAreaV0),\n\t\t\t\t'portals', Utils.getArrayReader(this.PackMapPortalV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: audi, versions: 9, strucTab: 0x1580178 \n\t///==================================================\n\t{\n\t\tname:'audi',\n\t\tversions:{\n\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.PackMapAudioRegion =[\n\t\t\t\t'regionType' , 'uint32',\n\t\t\t\t'overrideMode' , 'uint32',\n\t\t\t\t'filenameSourceDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameSourceNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameInterior' , Utils.getFileNameReader(),\n\t\t\t\t'exteriorVolume' , 'float32',\n\t\t\t\t'priority' , 'uint32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'orientation' , ['[]','float32',3],\n\t\t\t\t'fadeBand' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAudioRegionTool =[\n\t\t\t\t'annotation', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAudioDep =[\n\t\t\t\t'dependency' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapAudio =[\n\t\t\t\t'filenameAmbientDaySurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightSurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),\n\t\t\t\t'audioRegionTools', Utils.getArrayReader(this.PackMapAudioRegionTool),\n\t\t\t\t'audioDepArray', Utils.getArrayReader(this.PackMapAudioDep),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.PackMapAudioRegion =[\n\t\t\t\t'regionType' , 'uint32',\n\t\t\t\t'overrideMode' , 'uint32',\n\t\t\t\t'filenameSourceDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameSourceNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameInterior' , Utils.getFileNameReader(),\n\t\t\t\t'exteriorVolume' , 'float32',\n\t\t\t\t'priority' , 'uint32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'orientation' , ['[]','float32',3],\n\t\t\t\t'fadeBand' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapAudioRegionTool =[\n\t\t\t\t'annotation', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapAudio =[\n\t\t\t\t'filenameAmbientDaySurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightSurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),\n\t\t\t\t'audioRegionTools', Utils.getArrayReader(this.PackMapAudioRegionTool),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.PackMapAudioRegion =[\n\t\t\t\t'regionType' , 'uint32',\n\t\t\t\t'overrideMode' , 'uint32',\n\t\t\t\t'filenameSourceDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameSourceNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameInterior' , Utils.getFileNameReader(),\n\t\t\t\t'exteriorVolume' , 'float32',\n\t\t\t\t'priority' , 'uint32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'orientation' , ['[]','float32',3],\n\t\t\t\t'fadeBand' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapAudio =[\n\t\t\t\t'filenameAmbientDaySurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightSurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.PackMapAudioRegion =[\n\t\t\t\t'regionType' , 'uint32',\n\t\t\t\t'overrideMode' , 'uint32',\n\t\t\t\t'filenameSourceDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameSourceNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNight' , Utils.getFileNameReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'orientation' , ['[]','float32',3],\n\t\t\t\t'fadeBand' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapAudio =[\n\t\t\t\t'filenameAmbientDaySurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightSurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4, ReferencedFunction: 0xFFB450\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.PackMapAudioRegion =[\n\t\t\t\t'regionType' , 'uint32',\n\t\t\t\t'overrideMode' , 'uint32',\n\t\t\t\t'filenameSourceDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameSourceNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicNight' , Utils.getFileNameReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'orientation' , ['[]','float32',3],\n\t\t\t\t'fadeBand' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapAudio =[\n\t\t\t\t'filenameAmbientDaySurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicDaySurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicDayUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightSurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicNightSurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicNightUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3, ReferencedFunction: 0xFFB340\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PackMapAudioRegion =[\n\t\t\t\t'regionType' , 'uint32',\n\t\t\t\t'overrideMode' , 'uint32',\n\t\t\t\t'filenameSourceDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicDay' , Utils.getFileNameReader(),\n\t\t\t\t'filenameSourceNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNight' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicNight' , Utils.getFileNameReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'orientation' , ['[]','float32',3],\n\t\t\t\t'fadeBand' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapAudio =[\n\t\t\t\t'filenameAmbientDaySurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicDaySurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicDayUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightSurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicNightSurface' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusicNightUnderwater' , Utils.getFileNameReader(),\n\t\t\t\t'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapAudioRegion =[\n\t\t\t\t'regionType' , 'uint32',\n\t\t\t\t'overrideMode' , 'uint32',\n\t\t\t\t'filenameSource' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbient' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusic' , Utils.getFileNameReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'orientation' , ['[]','float32',3],\n\t\t\t\t'fadeBand' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapAudio =[\n\t\t\t\t'globalAmbientScriptFilename' , Utils.getFileNameReader(),\n\t\t\t\t'globalMusicScriptFilename' , Utils.getFileNameReader(),\n\t\t\t\t'globalAmbientUnderwaterScriptFilename' , Utils.getFileNameReader(),\n\t\t\t\t'globalMusicUnderwaterScriptFilename' , Utils.getFileNameReader(),\n\t\t\t\t'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapAudioRegion =[\n\t\t\t\t'regionType' , 'uint32',\n\t\t\t\t'overrideMode' , 'uint32',\n\t\t\t\t'filenameSource' , Utils.getFileNameReader(),\n\t\t\t\t'filenameAmbient' , Utils.getFileNameReader(),\n\t\t\t\t'filenameMusic' , Utils.getFileNameReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'orientation' , ['[]','float32',3],\n\t\t\t\t'fadeBand' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapAudio =[\n\t\t\t\t'globalAmbientScriptFilename' , Utils.getFileNameReader(),\n\t\t\t\t'globalMusicScriptFilename' , Utils.getFileNameReader(),\n\t\t\t\t'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.MapAudio =[\n\t\t\t\t'globalAmbientScriptFilename' , Utils.getFileNameReader(),\n\t\t\t\t'globalMusicScriptFilename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: bloc, versions: 1, strucTab: 0x1581298 \n\t///==================================================\n\t{\n\t\tname:'bloc',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapBlockRecord =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapBlock =[\n\t\t\t\t'blockDims', ['[]', 'uint32', 2],\n\t\t\t\t'blockRecordArray', Utils.getArrayReader(this.PackMapBlockRecord),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: cng, versions: 1, strucTab: 0x1580D9C \n\t///==================================================\n\t{\n\t\tname:'cng',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapCoarseNavGraphNodeV0 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'bottomLeftBound' , ['[]','float32',3],\n\t\t\t\t'topRightBound' , ['[]','float32',3],\n\t\t\t\t'centroid' , ['[]','float32',3],\n\t\t\t\t'faces', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCoarseNavGraphConnectionEdgeV0 =[\n\t\t\t\t'edgeStart' , ['[]','float32',3],\n\t\t\t\t'edgeEnd' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCoarseNavGraphConnectionV0 =[\n\t\t\t\t'targetSectionUid' , 'uint32',\n\t\t\t\t'targetNodeIndex' , 'uint32',\n\t\t\t\t'edges', Utils.getArrayReader(this.PackMapCoarseNavGraphConnectionEdgeV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCoarseNavGraphNodeConnectionsV0 =[\n\t\t\t\t'nodeIndex' , 'uint32',\n\t\t\t\t'connections', Utils.getArrayReader(this.PackMapCoarseNavGraphConnectionV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCoarseNavGraphSectionV0 =[\n\t\t\t\t'sectionUid' , 'uint32',\n\t\t\t\t'nodes', Utils.getArrayReader(this.PackMapCoarseNavGraphNodeV0),\n\t\t\t\t'nodeConnections', Utils.getArrayReader(this.PackMapCoarseNavGraphNodeConnectionsV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCoarseNavGraphV0 =[\n\t\t\t\t'sections', Utils.getArrayReader(this.PackMapCoarseNavGraphSectionV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: cube, versions: 4, strucTab: 0x15813D8 \n\t///==================================================\n\t{\n\t\tname:'cube',\n\t\tversions:{\n\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PackMapCubeMapSampleV3 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'filenameDayDefault' , Utils.getFileNameReader(),\n\t\t\t\t'filenameNightDefault' , Utils.getFileNameReader(),\n\t\t\t\t'filenameDayScript' , Utils.getFileNameReader(),\n\t\t\t\t'filenameNightScript' , Utils.getFileNameReader(),\n\t\t\t\t'envID', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCubeMapParamsV3 =[\n\t\t\t\t'modulateColor' , 'uint32',\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'contrast' , 'float32',\n\t\t\t\t'blurPasses' , 'uint32',\n\t\t\t\t'envVolume', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCubeMapV3 =[\n\t\t\t\t'sampleArray', Utils.getArrayReader(this.PackMapCubeMapSampleV3),\n\t\t\t\t'paramsArray', Utils.getArrayReader(this.PackMapCubeMapParamsV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2, ReferencedFunction: 0x5EABE0\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapCubeMapSampleV2 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'filenameDayDefault' , Utils.getFileNameReader(),\n\t\t\t\t'filenameNightDefault' , Utils.getFileNameReader(),\n\t\t\t\t'filenameDayScript' , Utils.getFileNameReader(),\n\t\t\t\t'filenameNightScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCubeMapParamsV2 =[\n\t\t\t\t'modulateColor' , 'uint32',\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'contrast' , 'float32',\n\t\t\t\t'blurPasses' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCubeMapV2 =[\n\t\t\t\t'sampleArray', Utils.getArrayReader(this.PackMapCubeMapSampleV2),\n\t\t\t\t'paramsArray', Utils.getArrayReader(this.PackMapCubeMapParamsV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1, ReferencedFunction: 0xFFCB60\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapCubeMapSampleV1 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dayPtr', Utils.getArrayReader('uint8'),\n\t\t\t\t'nightPtr', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCubeMapParamsV1 =[\n\t\t\t\t'modulateColor' , 'uint32',\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'contrast' , 'float32',\n\t\t\t\t'blurPasses' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCubeMapV1 =[\n\t\t\t\t'sampleArray', Utils.getArrayReader(this.PackMapCubeMapSampleV1),\n\t\t\t\t'paramsArray', Utils.getArrayReader(this.PackMapCubeMapParamsV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapCubeMapSampleV0 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dataPtr', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCubeMapParamsV0 =[\n\t\t\t\t'modulateColor' , 'uint32',\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'contrast' , 'float32',\n\t\t\t\t'blurPasses' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCubeMapV0 =[\n\t\t\t\t'sampleArray', Utils.getArrayReader(this.PackMapCubeMapSampleV0),\n\t\t\t\t'paramsArray', Utils.getArrayReader(this.PackMapCubeMapParamsV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: havk, versions: 15, strucTab: 0x1580940 \n\t///==================================================\n\t{\n\t\tname:'havk',\n\t\tversions:{\n\n\n\t\t\t// => Version: 14, ReferencedFunction: 0xFF70D0\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.PackMoppType =[\n\t\t\t\t'moppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideCollisionV14 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint16'),\n\t\t\t\t'moppCodeData', this.PackMoppType,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideBlockerV14 =[\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideNavMeshV14 =[\n\t\t\t\t'navMesh', Utils.getArrayReader('uint8'),\n\t\t\t\t'graph', Utils.getArrayReader('uint8'),\n\t\t\t\t'mediator', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideAnimationV14 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'collisionIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'blockerIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideGeometryV14 =[\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'animations', Utils.getArrayReader('uint32'),\n\t\t\t\t'navMeshIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelObsV14 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelPropV14 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelZoneV14 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCollideV14 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'collisions', Utils.getArrayReader(this.PackMapCollideCollisionV14),\n\t\t\t\t'blockers', Utils.getArrayReader(this.PackMapCollideBlockerV14),\n\t\t\t\t'navMeshes', Utils.getArrayReader(this.PackMapCollideNavMeshV14),\n\t\t\t\t'animations', Utils.getArrayReader(this.PackMapCollideAnimationV14),\n\t\t\t\t'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV14),\n\t\t\t\t'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV14),\n\t\t\t\t'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV14),\n\t\t\t\t'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV14),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13, ReferencedFunction: 0xFF6E30\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.PackMapCollideCollisionV13 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint16'),\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideBlockerV13 =[\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideAnimationV13 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'collisionIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'blockerIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideGeometryV13 =[\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'animations', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelObsV13 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelPropV13 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelZoneV13 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCollideV13 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'collisions', Utils.getArrayReader(this.PackMapCollideCollisionV13),\n\t\t\t\t'blockers', Utils.getArrayReader(this.PackMapCollideBlockerV13),\n\t\t\t\t'animations', Utils.getArrayReader(this.PackMapCollideAnimationV13),\n\t\t\t\t'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV13),\n\t\t\t\t'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV13),\n\t\t\t\t'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV13),\n\t\t\t\t'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV13),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.PackMapCollideMeshV12 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint16'),\n\t\t\t\t'moppCodeScale' , 'float32',\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshRefV12 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'meshIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideGeometryV12 =[\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelObsV12 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelPropV12 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelZoneV12 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideAiChunkV12 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'queryMediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCollideV12 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'meshes', Utils.getArrayReader(this.PackMapCollideMeshV12),\n\t\t\t\t'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV12),\n\t\t\t\t'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV12),\n\t\t\t\t'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV12),\n\t\t\t\t'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV12),\n\t\t\t\t'aiChunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV12),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.PackMapCollideMeshV11 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeScale' , 'float32',\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshRefV11 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'meshIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideGeometryV11 =[\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelObsV11 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelPropV11 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelZoneV11 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideAiChunkV11 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'queryMediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCollideV11 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'meshes', Utils.getArrayReader(this.PackMapCollideMeshV11),\n\t\t\t\t'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV11),\n\t\t\t\t'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV11),\n\t\t\t\t'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV11),\n\t\t\t\t'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV11),\n\t\t\t\t'aiChunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV11),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.PackMapCollideMeshV10 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeScale' , 'float32',\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshRefV10 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'meshIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideGeometryV10 =[\n\t\t\t\t'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelObsV10 =[\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelPropV10 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelZoneV10 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideAiChunkV10 =[\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'queryMediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCollideV10 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'meshes', Utils.getArrayReader(this.PackMapCollideMeshV10),\n\t\t\t\t'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV10),\n\t\t\t\t'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV10),\n\t\t\t\t'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV10),\n\t\t\t\t'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV10),\n\t\t\t\t'aiBoundaryMin' , ['[]','float32',3],\n\t\t\t\t'aiBoundaryMax' , ['[]','float32',3],\n\t\t\t\t'aiChunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV10),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.PackMapCollideMeshV9 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeScale' , 'float32',\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshRefV9 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'meshIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideGeometryV9 =[\n\t\t\t\t'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelObsV9 =[\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelPropV9 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelZoneV9 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideAiChunkV9 =[\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCollideV9 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'meshes', Utils.getArrayReader(this.PackMapCollideMeshV9),\n\t\t\t\t'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV9),\n\t\t\t\t'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV9),\n\t\t\t\t'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV9),\n\t\t\t\t'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV9),\n\t\t\t\t'aiBoundaryMin' , ['[]','float32',3],\n\t\t\t\t'aiBoundaryMax' , ['[]','float32',3],\n\t\t\t\t'aiChunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV9),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8, ReferencedFunction: 0xFF7140\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.PackMapCollideMeshV8 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeScale' , 'float32',\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshRefV8 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'meshIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideGeometryV8 =[\n\t\t\t\t'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelPropV8 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelZoneV8 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideAiChunkV8 =[\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCollideV8 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'meshes', Utils.getArrayReader(this.PackMapCollideMeshV8),\n\t\t\t\t'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV8),\n\t\t\t\t'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV8),\n\t\t\t\t'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV8),\n\t\t\t\t'aiBoundaryMin' , ['[]','float32',3],\n\t\t\t\t'aiBoundaryMax' , ['[]','float32',3],\n\t\t\t\t'aiChunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV8),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.PackMapCollideMoppCodeV7 =[\n\t\t\t\t'cookedData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshSizeV7 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'moppCodeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshV7 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'sizes', Utils.getArrayReader(this.PackMapCollideMeshSizeV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshRefV7 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'meshIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideGeometryV7 =[\n\t\t\t\t'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelPropV7 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelZoneV7 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideAiChunkV7 =[\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCollideV7 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'moppCodes', Utils.getArrayReader(this.PackMapCollideMoppCodeV7),\n\t\t\t\t'meshes', Utils.getArrayReader(this.PackMapCollideMeshV7),\n\t\t\t\t'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV7),\n\t\t\t\t'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV7),\n\t\t\t\t'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV7),\n\t\t\t\t'aiBoundaryMin' , ['[]','float32',3],\n\t\t\t\t'aiBoundaryMax' , ['[]','float32',3],\n\t\t\t\t'aiChunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV7),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.PackMapCollideMoppCodeV6 =[\n\t\t\t\t'cookedData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshSizeV6 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'moppCodeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshV6 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'sizes', Utils.getArrayReader(this.PackMapCollideMeshSizeV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideMeshRefV6 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'meshIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideGeometryV6 =[\n\t\t\t\t'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelPropV6 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCollideModelZoneV6 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapCollideV6 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'moppCodes', Utils.getArrayReader(this.PackMapCollideMoppCodeV6),\n\t\t\t\t'meshes', Utils.getArrayReader(this.PackMapCollideMeshV6),\n\t\t\t\t'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV6),\n\t\t\t\t'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV6),\n\t\t\t\t'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV6),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: env, versions: 76, strucTab: 0x157D2C0 \n\t///==================================================\n\t{\n\t\tname:'env',\n\t\tversions:{\n\n\n\t\t\t// => Version: 75, ReferencedFunction: 0xFF8EA0\n\t\t\t75:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV75 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV75 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV75),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t'backlightColor', ['[]', 'uint8', 3],\n\t\t\t\t'backlightIntensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV46 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV46 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV75 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t'reserved' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV75 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV75),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'reserved' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV75 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV75),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV46 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectExV46 =[\n\t\t\t\t'dummy' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV75 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'ssaoAmount' , 'float32',\n\t\t\t\t'ssaoBrighten' , 'float32',\n\t\t\t\t'ssaoContrast' , 'float32',\n\t\t\t\t'ssaoSunScale' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'clutTexturePath' , Utils.getFileNameReader(),\n\t\t\t\t'ext', Utils.getPointerReader(this.PackMapEnvDataEffectExV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV75 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV75 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS' , 'float32',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'reserved' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV46 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV75 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvLensFlareAtomV46 =[\n\t\t\t\t'rows' , 'uint32',\n\t\t\t\t'columns' , 'uint32',\n\t\t\t\t'start' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'offset' , ['[]','float32',2],\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'baseRotation' , 'float32',\n\t\t\t\t'cameraRotation' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvLensFlareTextureV46 =[\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShaderConstantV46 =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvLensFlareV46 =[\n\t\t\t\t'atoms', Utils.getArrayReader(this.PackMapEnvLensFlareAtomV46),\n\t\t\t\t'textures', Utils.getArrayReader(this.PackMapEnvLensFlareTextureV46),\n\t\t\t\t'material' , Utils.getFileNameReader(),\n\t\t\t\t'fadeBand' , ['[]','float32',2],\n\t\t\t\t'reverseFadeBand' , ['[]','float32',2],\n\t\t\t\t'opacityCoeff' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'constants', Utils.getArrayReader(this.PackMapEnvDataShaderConstantV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesExV46 =[\n\t\t\t\t'dummy' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV75 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'lensFlare', Utils.getPointerReader(this.PackMapEnvLensFlareV46),\n\t\t\t\t'ext', Utils.getPointerReader(this.PackMapEnvDataSkyCardAttributesExV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShaderTextureV46 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackEnvDataSkyCardAnimationV46 =[\n\t\t\t\t'textureAnimTranslation' , ['[]','float32',2],\n\t\t\t\t'textureAnimScaleRangeX' , ['[]','float32',2],\n\t\t\t\t'textureAnimScaleRangeY' , ['[]','float32',2],\n\t\t\t\t'textureAnimScaleSpeed' , ['[]','float32',2],\n\t\t\t\t'textureAnimRotation' , 'float32',\n\t\t\t\t'texCoords' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkycardFlipbookV46 =[\n\t\t\t\t'rows' , 'uint32',\n\t\t\t\t'columns' , 'uint32',\n\t\t\t\t'start' , 'uint32',\n\t\t\t\t'count' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardMaterialV46 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'constants', Utils.getArrayReader(this.PackMapEnvDataShaderConstantV46),\n\t\t\t\t'textures', Utils.getArrayReader(this.PackMapEnvDataShaderTextureV46),\n\t\t\t\t'textureAnimation', this.PackEnvDataSkyCardAnimationV46,\n\t\t\t\t'flipbook', this.PackMapEnvDataSkycardFlipbookV46,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardExV46 =[\n\t\t\t\t'dummy' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV75 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV75,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV75,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'location' , ['[]','float32',3],\n\t\t\t\t'material', Utils.getPointerReader(this.PackMapEnvDataSkyCardMaterialV46),\n\t\t\t\t'ext', Utils.getPointerReader(this.PackMapEnvDataSkyCardExV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV75 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV75),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV46 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV46 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV46 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV46),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV75 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV75 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataAudioV46 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataBaseEx2V46 =[\n\t\t\t\t'dummy' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataBaseExV46 =[\n\t\t\t\t'ext2', Utils.getPointerReader(this.PackMapEnvDataBaseEx2V46),\n\t\t\t\t'brightTime' , 'float32',\n\t\t\t\t'dimTime' , 'float32',\n\t\t\t\t'darkCoeff' , 'float32',\n\t\t\t\t'darkExp' , 'float32',\n\t\t\t\t'darkMin' , 'float32',\n\t\t\t\t'darkMax' , 'float32',\n\t\t\t\t'brightMin' , 'float32',\n\t\t\t\t'brightMax' , 'float32',\n\t\t\t\t'brightScale' , 'float32',\n\t\t\t\t'darkScale' , 'float32',\n\t\t\t\t'waterReflectionParams' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShapeV46 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'shapeType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV75 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV75),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV46),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV75),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV46),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV75),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV75),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV75),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV46),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV75),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV75),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV46),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV75),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV75),\n\t\t\t\t'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV46),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'ext', Utils.getPointerReader(this.PackMapEnvDataBaseExV46),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV75 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV75 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV75),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV46),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV75),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV46),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV75),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV75),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV75),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV46),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV75),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV75),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV46),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV75),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV75),\n\t\t\t\t'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV46),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'ext', Utils.getPointerReader(this.PackMapEnvDataBaseExV46),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV75),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV75 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV75),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV75),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 74\n\t\t\t74:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV74 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV74 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV74),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t'backlightColor', ['[]', 'uint8', 3],\n\t\t\t\t'backlightIntensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV45 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV45 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV74 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t'reserved' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV74 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV74),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'reserved' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV74 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV74),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV45 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV74 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV74 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV74 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS' , 'float32',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'reserved' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV45 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV74 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV74 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV74 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV74,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV74,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV74 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV74),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV45 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV45 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV45 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV45),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV74 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV74 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataAudioV45 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShapeV45 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'shapeType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV74 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV74),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV45),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV74),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV45),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV74),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV74),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV74),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV45),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV74),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV74),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV45),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV74),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV74),\n\t\t\t\t'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV45),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV74 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV74 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV74),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV45),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV74),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV45),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV74),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV74),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV74),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV45),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV74),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV74),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV45),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV74),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV74),\n\t\t\t\t'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV45),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV74),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV74 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV74),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV74),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 73\n\t\t\t73:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV73 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV73 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV73),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t'backlightColor', ['[]', 'uint8', 3],\n\t\t\t\t'backlightIntensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV44 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV44 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV73 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV73 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV73),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV73 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV73),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV44 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV73 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV73 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV73 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS' , 'float32',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV44 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV73 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV73 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV73 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV73,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV73,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV73 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV73),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV44 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV44 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV44 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV44),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV73 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV73 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataAudioV44 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShapeV44 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'shapeType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV73 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV73),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV44),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV73),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV44),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV73),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV73),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV73),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV44),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV73),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV73),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV44),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV73),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV73),\n\t\t\t\t'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV44),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV73 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV73 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV73),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV44),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV73),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV44),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV73),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV73),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV73),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV44),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV73),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV73),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV44),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV73),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV73),\n\t\t\t\t'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV44),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV73),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV73 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV73),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV73),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 72\n\t\t\t72:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV72 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV72 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV72),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t'backlightColor', ['[]', 'uint8', 3],\n\t\t\t\t'backlightIntensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV43 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV43 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV72 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV72 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV72),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV72 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV72),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV43 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV72 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV72 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV72 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS' , 'float32',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV43 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV72 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV72 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV72 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV72,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV72,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV72 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV72),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV43 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV43 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV43 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV43),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV72 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV72 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShapeV43 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'shapeType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV72 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV72),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV43),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV72),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV43),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV72),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV72),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV72),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV43),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV72),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV72),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV43),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV72),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV72),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'audioToken', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV72 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV72 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV72),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV43),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV72),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV43),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV72),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV72),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV72),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV43),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV72),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV72),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV43),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV72),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV72),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'audioToken', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV72),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV72 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV72),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV72),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 71, ReferencedFunction: 0xFF8E00\n\t\t\t71:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV71 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV71 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV71),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t'backlightColor', ['[]', 'uint8', 3],\n\t\t\t\t'backlightIntensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV42 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV42 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV71 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV71 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV71),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV71 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV71),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV42 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV71 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV71 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV71 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS' , 'float32',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV42 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV71 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV71 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV71 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV71,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV71,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV71 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV71),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV42 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV42 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV42 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV42),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV71 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV71 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShapeV42 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'shapeType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV71 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV71),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV42),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV71),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV42),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV71),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV71),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV71),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV42),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV71),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV71),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV42),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV71),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV71),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV71 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV71 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV71),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV42),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV71),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV42),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV71),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV71),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV71),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV42),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV71),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV71),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV42),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV71),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV71),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV71),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV71 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV71),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV71),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 70, ReferencedFunction: 0xFF8DB0\n\t\t\t70:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV70 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV70 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV70),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV41 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV41 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV70 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV70 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV70),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV70 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV70),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV41 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV70 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV70 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV70 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS' , 'float32',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV41 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV70 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV70 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV70 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV70,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV70,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV70 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV70),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV41 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV41 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV41 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV41),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV70 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV70 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShapeV41 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'shapeType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV70 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV70),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV41),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV70),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV41),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV70),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV70),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV70),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV41),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV70),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV70),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV41),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV70),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV70),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV70 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV70 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV70),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV41),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV70),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV41),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV70),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV70),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV70),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV41),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV70),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV70),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV41),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV70),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV70),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV70),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV70 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV70),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV70),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 69\n\t\t\t69:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV69 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV69 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV69),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV40 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV40 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV69 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV69 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV69),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV69 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV69),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV40 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV69 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV69 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV69 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV40 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV69 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV69 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV69 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV69,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV69,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV69 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV69),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV40 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV40 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV40 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV40),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV69 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV69 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShapeV40 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'shapeType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV69 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV69),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV40),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV69),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV40),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV69),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV69),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV69),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV40),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV69),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV69),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV40),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV69),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV69),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV69 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV69 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV69),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV40),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV69),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV40),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV69),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV69),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV69),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV40),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV69),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV69),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV40),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV69),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV69),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV69),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV69 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV69),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV69),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 68, ReferencedFunction: 0xFF8C90\n\t\t\t68:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV68 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV68 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV68),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t'backlight', Utils.getPointerReader(this.PackMapEnvDataLightV68),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV39 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV39 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV68 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV68 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV68),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV68 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV68),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV39 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV68 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV68 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV68 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV39 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV68 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV68 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV68 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV68,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV68,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV68 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV68),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV39 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV39 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV39 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV39),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV68 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV68 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShapeV39 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'shapeType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV68 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV68),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV39),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV68),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV39),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV68),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV68),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV68),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV39),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV68),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV68),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV39),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV68),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV68),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV68 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV68 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV68),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV39),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV68),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV39),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV68),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV68),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV68),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV39),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV68),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV68),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV39),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV68),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV68),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV68),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV68 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV68),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV68),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 67\n\t\t\t67:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV67 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV67 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV67),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV38 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV38 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV67 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV67 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV67),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV67 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV67),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV38 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV67 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV67 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV67 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV38 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV67 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV67 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV67 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV67,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV67,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV67 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV67),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV38 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV38 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV38 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV38),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV67 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV67 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShapeV38 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'shapeType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV67 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV67),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV38),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV67),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV38),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV67),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV67),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV67),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV38),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV67),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV67),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV38),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV67),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV67),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV67 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV67 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV67),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV38),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV67),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV38),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV67),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV67),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV67),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV38),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV67),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV67),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV38),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV67),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV67),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV67),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV67 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV67),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV67),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 66, ReferencedFunction: 0xFF8B40\n\t\t\t66:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV66 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV66 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV66),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV37 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV37 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV66 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV66 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV66),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV66 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV66),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV37 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV66 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV66 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV66 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV37 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV66 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV66 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV66 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV66,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV66,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV66 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV66),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV37 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV37 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV37 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV37),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV66 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV66 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataShapeV37 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'shapeType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV66 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV66),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV37),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV66),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV37),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV66),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV66),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV66),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV37),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV66),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV66),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV37),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV66),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV66),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV66 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV66 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV66),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV37),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV66),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV37),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV66),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV66),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV66),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV37),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV66),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV66),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV37),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV66),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV66),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV66),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV66 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV66),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV66),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 65, ReferencedFunction: 0xFF8AE0\n\t\t\t65:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV65 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV65 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV65),\n\t\t\t\t'shadowInfluence' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV36 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV36 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV65 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV65 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV65),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV65 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV65),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV36 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV65 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV65 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV65 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV36 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV65 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV65 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV65 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV65,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV65,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV65 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV65),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV36 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV36 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV36 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV36),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV65 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV65 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV65 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV65),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV36),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV65),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV36),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV65),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV65),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV65),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV36),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV65),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV65),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV36),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV65),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV65),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV65 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV65 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV65),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV36),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV65),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV36),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV65),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV65),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV65),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV36),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV65),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV65),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV36),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV65),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV65),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV65),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV65 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV65),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV65),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 64, ReferencedFunction: 0xFF89F0\n\t\t\t64:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV64 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV64 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV35 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV35 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV64 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV64 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV64),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV64 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV35 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV64 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV64 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV64 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV35 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV64 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t'verticalOffset' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV64 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV64 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV64,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV64,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV64 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV35 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV35 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV35 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV35),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV64 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV64 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t'gustSpeed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV64 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV64),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV35),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV64),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV35),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV64),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV64),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV64),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV35),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV64),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV64),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV35),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV64),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV64),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV64 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV64 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV64),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV35),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV64),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV35),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV64),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV64),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV64),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV35),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV64),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV64),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV35),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV64),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV64),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV64),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV64 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV64),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV64),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 63, ReferencedFunction: 0xFF88F0\n\t\t\t63:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV63 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV63 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV34 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV34 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV63 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV63 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV63),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV63 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV34 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV63 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV63 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV63 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV34 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV63 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV63 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV63 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV63,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV63,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV63 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV34 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV34 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV34 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV34),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV63 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'foamSpawn' , 'float32',\n\t\t\t\t'foamDissolve' , 'float32',\n\t\t\t\t'foamDepthAttenuation' , 'float32',\n\t\t\t\t'foamColor0' , ['[]','uint8',4],\n\t\t\t\t'foamColor1' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV63 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV63 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV63),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV34),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV63),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV34),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV63),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV63),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV63),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV34),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV63),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV63),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV34),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV63),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV63),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV63 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV63 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV63),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV34),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV63),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV34),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV63),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV63),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV63),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV34),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV63),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV63),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV34),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV63),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV63),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV63),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV63 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV63),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV63),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 62, ReferencedFunction: 0xFF88C0\n\t\t\t62:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV62 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV62 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV33 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV33 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV62 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV62 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV62),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV62 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV33 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV62 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV62 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t'sunDirRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV62 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV33 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV62 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV62 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV62 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV62,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV62,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV62 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV33 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV33 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV33 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV33),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV62 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV62 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV62 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV62),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV33),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV62),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV33),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV62),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV62),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV62),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV33),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV62),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV62),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV33),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV62),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV62),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV62 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV62 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV62),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV33),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV62),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV33),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV62),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV62),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV62),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV33),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV62),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV62),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV33),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV62),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV62),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV62),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV62 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV62),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV62),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 61, ReferencedFunction: 0xFF8890\n\t\t\t61:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV61 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV61 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV32 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV32 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV61 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV61 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV61),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV61 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV32 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV61 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t'flatteningCharacterRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV61 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV61 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV32 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV61 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV61 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV61 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV61,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV61,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV61 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV32 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV32 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV32 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV32),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV61 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV61 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV61 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV61),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV32),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV61),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV32),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV61),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV61),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV61),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV32),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV61),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV61),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV32),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV61),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV61),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV61 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV61 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV61),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV32),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV61),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV32),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV61),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV61),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV61),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV32),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV61),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV61),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV32),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV61),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV61),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV61),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV61 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV61),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV61),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 60, ReferencedFunction: 0xFF8860\n\t\t\t60:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV60 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV60 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV31 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV31 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV60 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV60 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV60),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV60 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV31 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV60 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t'flatteningRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV60 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV60 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV31 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV60 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV60 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV60 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV60,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV60,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV60 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV31 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV31 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV31 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV31),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV60 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV60 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV60 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV60),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV31),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV60),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV31),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV60),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV60),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV60),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV31),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV60),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV60),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV31),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV60),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV60),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV60 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV60 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV60),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV31),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV60),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV31),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV60),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV60),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV60),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV31),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV60),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV60),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV31),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV60),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV60),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV60),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV60 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV60),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV60),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 59, ReferencedFunction: 0xFF8750\n\t\t\t59:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV59 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV59 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV30 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV30 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV59 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV59 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV59),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV59 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV30 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV59 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV59 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV59 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV30 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV59 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV59 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV59 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV59,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV59,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV59 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV30 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile' , Utils.getFileNameReader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV30 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV30 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV30),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV59 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV59 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV59 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV59),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV30),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV59),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV30),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV59),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV59),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV59),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV30),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV59),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV59),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV30),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV59),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV59),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV59 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV59 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV59),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV30),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV59),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV30),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV59),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV59),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV59),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV30),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV59),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV59),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV30),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV59),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV59),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV59),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV59 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV59),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV59),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 58, ReferencedFunction: 0xFF8640\n\t\t\t58:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV58 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV58 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV29 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV29 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV58 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV58 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV58),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV58 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV29 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV58 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV58 =[\n\t\t\t\t'nearColor' , ['[]','uint8',4],\n\t\t\t\t'farColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV58 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV29 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV58 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV58 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV58 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV58,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV58,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV58 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV29 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile', Utils.getString16Reader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV29 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV29 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV29),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV58 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV58 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV58 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV58),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV29),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV58),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV29),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV58),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV58),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV58),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV29),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV58),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV58),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV29),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV58),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV58),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV58 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV58 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV58),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV29),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV58),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV29),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV58),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV58),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV58),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV29),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV58),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV58),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV29),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV58),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV58),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV58),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV58 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV58),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV58),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 57\n\t\t\t57:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV57 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV57 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV28 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV28 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV57 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV57 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV57),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV57 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV28 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV57 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV57 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV57 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV28 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV57 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV57 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV57 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV57,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV57,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV57 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV28 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile', Utils.getString16Reader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV28 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV28 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV28),\n\t\t\t\t'targetVolume', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV57 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV57 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV57 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV57),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV28),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV57),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV28),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV57),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV57),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV57),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV28),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV57),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV57),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV28),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV57),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV57),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV57 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV57 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV57),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV28),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV57),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV28),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV57),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV57),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV57),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV28),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV57),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV57),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV28),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV57),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV57),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV57),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV57 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV57),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV57),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 56, ReferencedFunction: 0xFF8530\n\t\t\t56:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV56 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV56 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV27 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV27 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV56 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV56 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV56),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV56 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV27 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV56 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV56 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV56 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV27 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV56 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV56 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV56 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV56,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV56,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV56 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV27 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'rotXRange' , ['[]','float32',2],\n\t\t\t\t'rotYRange' , ['[]','float32',2],\n\t\t\t\t'rotZRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile', Utils.getString16Reader(),\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV27 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV27 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV27),\n\t\t\t\t'targetVolume', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV56 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV56 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV56 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV56),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV27),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV56),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV27),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV56),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV56),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV56),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV27),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV56),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV56),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV27),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV56),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV56),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV56 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV56 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV56),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV27),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV56),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV27),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV56),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV56),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV56),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV27),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV56),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV56),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV27),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV56),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV56),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV56),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV56 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV56),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV56),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 55\n\t\t\t55:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV55 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV55 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV26 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV26 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV55 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV55 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV55),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV55 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV26 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV55 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV55 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV55 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV26 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV55 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV55 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV55 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV55,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV55,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV55 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnModelDataV26 =[\n\t\t\t\t'spawnRange', ['[]', 'uint32', 2],\n\t\t\t\t'lifeSpan', ['[]', 'uint32', 2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'delay' , 'float32',\n\t\t\t\t'maxConcurrent', 'uint16',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'modelFile', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnListV26 =[\n\t\t\t\t'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSpawnGroupsV26 =[\n\t\t\t\t'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV26),\n\t\t\t\t'targetVolume', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV55 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV55 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV55 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV55),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV26),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV55),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV26),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV55),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV55),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV55),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV26),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV55),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV55),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV26),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV55),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV55),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV55 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV55 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV55),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV26),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV55),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV26),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV55),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV55),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV55),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV26),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV55),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV55),\n\t\t\t\t'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV26),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV55),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV55),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV55),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV55 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV55),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV55),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 54, ReferencedFunction: 0xFF8480\n\t\t\t54:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV54 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV54 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV25 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV25 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV54 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV54 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV54),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV54 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV25 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV54 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV54 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV54 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV25 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV54 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV54 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV54 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV54,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV54,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV54 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV54 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV54 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV54 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV54),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV25),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV54),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV25),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV54),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV54),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV54),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV25),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV54),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV54),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV54),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV54),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV54 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV54 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV54),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV25),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV54),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV25),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV54),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV54),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV54),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV25),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV54),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV54),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV54),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV54),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV54),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV54 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV54),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV54),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 53, ReferencedFunction: 0xFF83D0\n\t\t\t53:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV53 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV53 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV24 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV24 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV53 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV53 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV53),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV53 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV24 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV53 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV53 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV53 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'deviationSpeed' , ['[]','float32',2],\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV24 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV53 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV53 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV53 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV53,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV53,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV53 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV53 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV53 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV53 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV53),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV24),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV53),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV24),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV53),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV53),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV53),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV24),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV53),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV53),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV53),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV53),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV53 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV53 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV53),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV24),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV53),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV24),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV53),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV53),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV53),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV24),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV53),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV53),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV53),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV53),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV53),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV53 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV53),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV53),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 52, ReferencedFunction: 0xFF82F0\n\t\t\t52:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV52 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV52 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV23 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV23 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV52 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV52 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV52),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV52 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV23 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV52 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV52 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV52 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'clusterCount', 'uint16',\n\t\t\t\t'clustering' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , ['[]','float32',2],\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'seed' , 'uint32',\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV23 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV52 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV52 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV52 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV52,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV52,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV52 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV52 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV52 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV52 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV52),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV23),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV52),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV23),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV52),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV52),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV52),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV23),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV52),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV52),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV52),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV52),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV52 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV52 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV52),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV23),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV52),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV23),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV52),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV52),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV52),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV23),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV52),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV52),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV52),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV52),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV52),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV52 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV52),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV52),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 51\n\t\t\t51:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV51 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV51 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV22 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV22 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV51 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV51 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV51),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV51 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV22 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV51 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV51 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV51 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV22 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV51 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV51 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV51 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV51,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV51,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV51 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV51 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV51 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV51 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV51),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV22),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV51),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV22),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV51),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV51),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV51),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV22),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV51),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV51),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV51),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV51),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV51 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV51 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV51),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV22),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV51),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV22),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV51),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV51),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV51),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV22),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV51),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV51),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV51),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV51),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV51),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV51 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV51),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV51),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 50, ReferencedFunction: 0xFF81E0\n\t\t\t50:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV50 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV50 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV50),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV21 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV21 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV50 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV50 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV50),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV50 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV50),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV21 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t'lightColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'shadowColors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV50 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV50 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV50 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV21 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV50 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV50 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV50 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV50,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV50,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV50 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV50),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV50 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV50 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV50 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV50),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV21),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV50),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV21),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV50),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV50),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV50),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV21),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV50),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV50),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV50),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV50),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV50 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV50 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV50),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV21),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV50),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV21),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV50),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV50),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV50),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV21),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV50),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV50),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV50),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV50),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV50),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV50 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV50),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV50),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 49, ReferencedFunction: 0xFF8090\n\t\t\t49:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV49 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV49 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV49),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV20 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharGroupV20 =[\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV49 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV49 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV49),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV49 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV49),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV20 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'colors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV49 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV49 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV49 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV20 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV49 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV49 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV49 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV49,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV49,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV49 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV49),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV49 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV49 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV49 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV49),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV20),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV49),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV20),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV49),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV49),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV49),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV20),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV49),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV49),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV49),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV49),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV49 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV49 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV49),\n\t\t\t\t'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV20),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV49),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV20),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV49),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV49),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV49),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV20),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV49),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV49),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV49),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV49),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV49),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV49 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV49),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV49),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 48\n\t\t\t48:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV48 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV48 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV48),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV19 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV48 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV48 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV48),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV48 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV48),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV19 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'colors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV48 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV48 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV48 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV19 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV48 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV48 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV48 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV48,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV48,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV48 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV48),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV48 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV48 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV48 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV48),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV19),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV48),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV19),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV48),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV48),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV48),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV19),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV48),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV48),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV48),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV48),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV48 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV48 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV48),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV19),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV48),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV19),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV48),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV48),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV48),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV19),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV48),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV48),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV48),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV48),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'bindTarget', Utils.getQWordReader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV48),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV48 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV48),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV48),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 47\n\t\t\t47:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV47 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV47 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV47),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV18 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV47 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV47 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV47),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV47 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV47),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV18 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'colors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV47 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV47 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV47 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV18 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV47 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV47 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV47 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV47,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV47,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV47 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV47),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV47 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV47 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV47 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV47),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV18),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV47),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV18),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV47),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV47),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV47),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV18),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV47),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV47),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV47),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV47),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV47 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV47 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV47),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV18),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV47),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV18),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV47),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV47),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV47),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV18),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV47),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV47),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV47),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV47),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV47),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV47 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV47),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV47),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 46\n\t\t\t46:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV46 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV46 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV17 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV46 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV46 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV46),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV46 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV17 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'colors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV46 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV46 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV46 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV17 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV46 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV46 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV46 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV46,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV46,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV46 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV46 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV46 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV46 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV46),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV17),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV46),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV17),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV46),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV46),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV46),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV17),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV46),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV46),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV46),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV46),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV46 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV46 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV46),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV17),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV46),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV17),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV46),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV46),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV46),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV17),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV46),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV46),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV46),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV46),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV46),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV46 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV46),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV46),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 45\n\t\t\t45:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV45 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV45 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV16 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV45 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV45 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV45),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV45 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV16 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'colors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV45 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV45 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV45 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV16 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV45 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV45 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV45 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV45,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV45,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV45 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV45 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV45 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV45 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV45),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV16),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV45),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV16),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV45),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV45),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV45),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV16),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV45),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV45),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV45),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV45),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV45 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV45 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV45),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV16),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV45),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV16),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV45),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV45),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV45),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV16),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV45),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV45),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV45),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV45),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV45),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV45 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV45),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV45),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 44, ReferencedFunction: 0xFF7F80\n\t\t\t44:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV44 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV44 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV15 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV44 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV44 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV44),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV44 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataColoredLightRingsV15 =[\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'colors', ['[]', ['[]','uint8',4], 6],\n\t\t\t\t'distances', ['[]', 'float32', 6],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV44 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV44 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV44 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV15 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV44 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV44 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV44 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV44,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV44,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV44 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV44 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV44 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV44 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV44),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV15),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV44),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV15),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV44),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV44),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV44),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV15),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV44),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV44),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV44),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV44),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV44 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV44 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV44),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV15),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV44),\n\t\t\t\t'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV15),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV44),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV44),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV44),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV15),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV44),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV44),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV44),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV44),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV44),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV44 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV44),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV44),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 43, ReferencedFunction: 0xFF7ED0\n\t\t\t43:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV43 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV43 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV14 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV43 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t'fadeWidth' , 'float32',\n\t\t\t\t'fadeEnd' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV43 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV43),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV43 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV43 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV43 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV43 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV14 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV43 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV43 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV43 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV43,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV43,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV43 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV43 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV43 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV43 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV43),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV14),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV43),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV43),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV43),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV43),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV14),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV43),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV43),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV43),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV43),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV43 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV43 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV43),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV14),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV43),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV43),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV43),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV43),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV14),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV43),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV43),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV43),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV43),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV43),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV43 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV43),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV43),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 42, ReferencedFunction: 0xFF7E30\n\t\t\t42:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV42 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV42 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV13 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV42 =[\n\t\t\t\t'brightness' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV42 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV42),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV42 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV42 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV42 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV42 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV13 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV42 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV42 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV42 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV42,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV42,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV42 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV42 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV42 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV42 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV42),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV13),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV42),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV42),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV42),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV42),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV13),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV42),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV42),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV42),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV42),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV42 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV42 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV42),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV13),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV42),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV42),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV42),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV42),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV13),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV42),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV42),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV42),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV42),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV42),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV42 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV42),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV42),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 41, ReferencedFunction: 0xFF7D10\n\t\t\t41:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV41 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV41 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV12 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV41 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV41 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV41),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV41 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV41 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV41 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV41 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV12 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV41 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV41 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV41 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV41,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV41,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV41 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV41 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV41 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV41 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV41),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV12),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV41),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV41),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV41),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV41),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV12),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV41),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV41),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV41),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV41),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV41 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV41 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV41),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV12),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV41),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV41),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV41),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV41),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV12),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV41),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV41),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV41),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV41),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nightMods', Utils.getArrayReader('uint8'),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV41),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV41 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV41),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV41),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 40, ReferencedFunction: 0xFF7CD0\n\t\t\t40:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV40 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV40 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV11 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV40 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV40 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV40),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV40 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV40 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV40 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV40 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV11 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV40 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV40 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV40 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV40,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV40,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV40 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV40 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV40 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV40 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV40),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV11),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV40),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV40),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV40),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV40),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV11),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV40),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV40),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV40),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV40),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV40 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV40 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV40),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV11),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV40),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV40),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV40),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV40),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV11),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV40),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV40),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV40),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV40),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV40),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV40 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV40),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV40),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 39\n\t\t\t39:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV39 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV39 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingCharV10 =[\n\t\t\t\t'sunScale' , 'float32',\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'sunFill' , 'float32',\n\t\t\t\t'ambScale' , 'float32',\n\t\t\t\t'ambFill' , 'float32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV39 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV39 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV39),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV39 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV39 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV39 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV39 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV10 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV39 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV39 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV39 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV39,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV39,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV39 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV39 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV39 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV39 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV39),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV10),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV39),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV39),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV39),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV39),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV10),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV39),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV39),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV39),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV39),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV39 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV39 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV39),\n\t\t\t\t'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV10),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV39),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV39),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV39),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV39),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV10),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV39),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV39),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV39),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV39),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV39),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV39 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV39),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV39),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 38, ReferencedFunction: 0xFF7C30\n\t\t\t38:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV38 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV38 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV38 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV38 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV38),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV38 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV38 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t'focalDepth' , 'float32',\n\t\t\t\t'focalRange' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV38 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV38 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV9 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV38 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV38 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV38 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV38,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV38,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV38 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV38 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV38 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV38 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV38),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV38),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV38),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV38),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV38),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV9),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV38),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV38),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV38),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV38),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV38 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV38 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV38),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV38),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV38),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV38),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV38),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV9),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV38),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV38),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV38),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV38),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV38),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV38 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV38),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV38),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 37, ReferencedFunction: 0xFF7BB0\n\t\t\t37:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV37 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV37 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV37 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV37 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'extent' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV37),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV37 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV37 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV37 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV37 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV8 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV37 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV37 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV37 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV37,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV37,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV37 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV37 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV37 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV37 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV37),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV37),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV37),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV37),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV37),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV8),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV37),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV37),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV37),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV37),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV37 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV37 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV37),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV37),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV37),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV37),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV37),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV8),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV37),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV37),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV37),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV37),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV37),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV37 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV37),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV37),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 36\n\t\t\t36:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV36 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV36 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV36 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV36 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV36),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV36 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV36 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV36 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV36 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV7 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV36 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV36 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV36 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV36,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV36,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV36 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV36 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t'depthAttenuation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV36 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV36 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV36),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV36),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV36),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV36),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV36),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV7),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV36),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV36),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV36),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV36),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV36 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV36 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV36),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV36),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV36),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV36),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV36),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV7),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV36),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV36),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV36),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV36),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV36),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV36 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV36),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV36),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 35, ReferencedFunction: 0xFF7B50\n\t\t\t35:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV35 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV35 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV35 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV35 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV35),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV35 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV35 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV35 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV35 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldCutoutV6 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV35 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayBrightness' , 'float32',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightBrightness' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV35 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV35 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV35,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV35,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV35 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV35 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV35 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV35 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV35),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV35),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV35),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV35),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV35),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV6),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV35),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV35),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV35),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV35),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV35 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV35 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV35),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV35),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV35),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV35),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV35),\n\t\t\t\t'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV6),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV35),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV35),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV35),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV35),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV35),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV35 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV35),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV35),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 34\n\t\t\t34:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV34 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV34 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV34 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV34 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV34),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV34 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV34 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'tintTargetColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'tintFocus' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV34 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV34 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV34 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV34 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV34 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV34,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV34,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV34 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV34 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV34 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV34 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV34),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV34),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV34),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV34),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV34),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV34),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV34),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV34),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV34),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV34 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV34 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV34),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV34),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV34),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV34),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV34),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV34),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV34),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV34),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV34),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV34),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV34 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV34),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV34),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 33\n\t\t\t33:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV33 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV33 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV33 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV33 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV33),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV33 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV33 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV33 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV33 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV33 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV33 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV33 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV33,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV33,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV33 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV33 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV33 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV33 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV33),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV33),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV33),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV33),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV33),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV33),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV33),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV33),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV33),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV33 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV33 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV33),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV33),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV33),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV33),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV33),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV33),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV33),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV33),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV33),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV33),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV33 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV33),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV33),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 32, ReferencedFunction: 0xFF79C0\n\t\t\t32:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV32 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV32 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV32 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV32 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV32),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV32 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV32 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV32 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV32 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV32 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV32 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV32 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV32,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV32,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV32 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV32 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV32 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV32 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV32),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV32),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV32),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV32),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV32),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV32),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV32),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV32),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV32),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV32 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV32 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV32),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV32),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV32),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV32),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV32),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV32),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV32),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV32),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV32),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV32),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV32 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV32),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV32),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 31, ReferencedFunction: 0xFF7950\n\t\t\t31:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV31 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV31 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV31 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV31 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'day', this.PackMapEnvDataLayerAttributesV31,\n\t\t\t\t'night', this.PackMapEnvDataLayerAttributesV31,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV31 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV31 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV31 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV31 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fade' , 'float32',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV31 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV31 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV31 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV31,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV31,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV31 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV31 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'patternEdge' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV31 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV31 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV31),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV31),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV31),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV31),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV31),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV31),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV31),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV31),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV31),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV31 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV31 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV31),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV31),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV31),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV31),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV31),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV31),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV31),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV31),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV31),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV31),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV31 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV31),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV31),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 30, ReferencedFunction: 0xFF78D0\n\t\t\t30:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV30 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV30 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV30 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV30 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'cutOut' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'day', this.PackMapEnvDataLayerAttributesV30,\n\t\t\t\t'night', this.PackMapEnvDataLayerAttributesV30,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV30 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV30 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV30 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV30 =[\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV30 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV30 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV30 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV30,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV30,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV30 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV30 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV30 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV30 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV30),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV30),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV30),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV30),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV30),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV30),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV30),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV30),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV30),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV30 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV30 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV30),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV30),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV30),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV30),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV30),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV30),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV30),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV30),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV30),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV30),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV30 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV30),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV30),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 29\n\t\t\t29:function(){\n\t\t\t\t\t\tthis.PackMapEnvDataLightV29 =[\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLightingV29 =[\n\t\t\t\t'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerAttributesV29 =[\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'haze' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLayerV29 =[\n\t\t\t\t'altitude' , 'float32',\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'day', this.PackMapEnvDataLayerAttributesV29,\n\t\t\t\t'night', this.PackMapEnvDataLayerAttributesV29,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataCloudsV29 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataEffectV29 =[\n\t\t\t\t'glow' , ['[]','uint8',4],\n\t\t\t\t'tintColor' , ['[]','uint8',4],\n\t\t\t\t'saturation' , 'float32',\n\t\t\t\t'tintAmount' , 'float32',\n\t\t\t\t'glowLevel' , ['[]','uint8',4],\n\t\t\t\t'glowAmplify' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataHazeV29 =[\n\t\t\t\t'distColor' , ['[]','uint8',4],\n\t\t\t\t'distRange' , ['[]','float32',2],\n\t\t\t\t'heightColor' , ['[]','uint8',4],\n\t\t\t\t'heightRange' , ['[]','float32',2],\n\t\t\t\t'depthCue' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataPFieldV29 =[\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'deviation' , 'float32',\n\t\t\t\t'extent', 'uint16',\n\t\t\t\t'fieldDirection' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'particleCount', 'uint16',\n\t\t\t\t'rotation' , ['[]','float32',2],\n\t\t\t\t'scaleX' , ['[]','float32',2],\n\t\t\t\t'scaleY' , ['[]','float32',2],\n\t\t\t\t'speed' , ['[]','float32',2],\n\t\t\t\t'texColRow', ['[]', 'uint32', 2],\n\t\t\t\t'texFPS', 'uint16',\n\t\t\t\t'texPath' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyV29 =[\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'dayHazeBottom' , 'float32',\n\t\t\t\t'dayHazeDensity' , 'float32',\n\t\t\t\t'dayHazeFalloff' , 'float32',\n\t\t\t\t'dayLightIntensity' , 'float32',\n\t\t\t\t'dayStarDensity' , 'float32',\n\t\t\t\t'nightHazeBottom' , 'float32',\n\t\t\t\t'nightHazeDensity' , 'float32',\n\t\t\t\t'nightHazeFalloff' , 'float32',\n\t\t\t\t'nightLightIntensity' , 'float32',\n\t\t\t\t'nightStarDensity' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardAttributesV29 =[\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'density' , 'float32',\n\t\t\t\t'hazeDensity' , 'float32',\n\t\t\t\t'latitude' , 'float32',\n\t\t\t\t'lightIntensity' , 'float32',\n\t\t\t\t'minHaze' , 'float32',\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'texture' , Utils.getFileNameReader(),\n\t\t\t\t'textureUV' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardV29 =[\n\t\t\t\t'day', this.PackMapEnvDataSkyCardAttributesV29,\n\t\t\t\t'night', this.PackMapEnvDataSkyCardAttributesV29,\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyCardsV29 =[\n\t\t\t\t'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWaterV29 =[\n\t\t\t\t'waterFlags' , 'uint32',\n\t\t\t\t'animAmplitude' , 'float32',\n\t\t\t\t'animChoppiness' , 'float32',\n\t\t\t\t'animWind' , ['[]','float32',2],\n\t\t\t\t'bumpAmount' , 'float32',\n\t\t\t\t'bumpAngle0' , 'float32',\n\t\t\t\t'bumpAngle1' , 'float32',\n\t\t\t\t'bumpScale0' , 'float32',\n\t\t\t\t'bumpScale1' , 'float32',\n\t\t\t\t'bumpSpeed0' , 'float32',\n\t\t\t\t'bumpSpeed1' , 'float32',\n\t\t\t\t'bumpTile0' , 'float32',\n\t\t\t\t'bumpTile1' , 'float32',\n\t\t\t\t'patternAngle' , 'float32',\n\t\t\t\t'patternTile' , 'float32',\n\t\t\t\t'patternSpeed' , 'float32',\n\t\t\t\t'surfaceShallowColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceDeepColor' , ['[]','uint8',4],\n\t\t\t\t'patternColor' , ['[]','uint8',4],\n\t\t\t\t'surfaceFresnel' , 'float32',\n\t\t\t\t'distortAmount' , 'float32',\n\t\t\t\t'bumpTexture' , Utils.getFileNameReader(),\n\t\t\t\t'patternTexture' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataWindV29 =[\n\t\t\t\t'azimuth' , 'uint8',\n\t\t\t\t'elevation' , 'uint8',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'speed' , 'uint8',\n\t\t\t\t'gust' , 'uint8',\n\t\t\t\t'gustFreq' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataLocalV29 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV29),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV29),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV29),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV29),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV29),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV29),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV29),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV29),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV29),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t'fadeHorizInner' , 'float32',\n\t\t\t\t'fadeHorizOuter' , 'float32',\n\t\t\t\t'fadeVertical' , 'float32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataSkyModeTexV29 =[\n\t\t\t\t'texPathNE' , Utils.getFileNameReader(),\n\t\t\t\t'texPathSW' , Utils.getFileNameReader(),\n\t\t\t\t'texPathT' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEnvDataGlobalV29 =[\n\t\t\t\t'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV29),\n\t\t\t\t'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV29),\n\t\t\t\t'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV29),\n\t\t\t\t'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV29),\n\t\t\t\t'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV29),\n\t\t\t\t'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV29),\n\t\t\t\t'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV29),\n\t\t\t\t'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV29),\n\t\t\t\t'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV29),\n\t\t\t\t'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV29),\n\t\t\t\t'starFile' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapEnvironmentV29 =[\n\t\t\t\t'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV29),\n\t\t\t\t'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV29),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: laye, versions: 1, strucTab: 0x157D75C \n\t///==================================================\n\t{\n\t\tname:'laye',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapLayerProp =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerIds', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLayer =[\n\t\t\t\t'layerId' , 'uint32',\n\t\t\t\t'metaData', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLayers =[\n\t\t\t\t'props', Utils.getArrayReader(this.PackMapLayerProp),\n\t\t\t\t'layers', Utils.getArrayReader(this.PackMapLayer),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: lght, versions: 18, strucTab: 0x157D8A8 \n\t///==================================================\n\t{\n\t\tname:'lght',\n\t\tversions:{\n\n\n\t\t\t// => Version: 17\n\t\t\t17:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPortalData =[\n\t\t\t\t'fadeCamera' , 'float32',\n\t\t\t\t'fadeLight' , 'float32',\n\t\t\t\t'lighten' , 'float32',\n\t\t\t\t'darken' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPortalLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'portalData', Utils.getArrayReader(this.PackMapPortalData),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapSpotShadow =[\n\t\t\t\t'shadowFilename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapSpotLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'upDirection' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t'shadowData', Utils.getPointerReader(this.PackMapSpotShadow),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapSpotLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapSpotLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'floodPoints', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'portalLights', Utils.getArrayReader(this.PackMapPortalLight),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapSpotLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 16\n\t\t\t16:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPortalData =[\n\t\t\t\t'fadeCamera' , 'float32',\n\t\t\t\t'fadeLight' , 'float32',\n\t\t\t\t'lighten' , 'float32',\n\t\t\t\t'darken' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPortalLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'portalData', Utils.getArrayReader(this.PackMapPortalData),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapSpotShadow =[\n\t\t\t\t'shadowFilename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapSpotLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t'shadowData', Utils.getPointerReader(this.PackMapSpotShadow),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapSpotLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapSpotLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'floodPoints', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'portalLights', Utils.getArrayReader(this.PackMapPortalLight),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapSpotLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 15, ReferencedFunction: 0xFFB8E0\n\t\t\t15:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPortalData =[\n\t\t\t\t'fadeCamera' , 'float32',\n\t\t\t\t'fadeLight' , 'float32',\n\t\t\t\t'lighten' , 'float32',\n\t\t\t\t'darken' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPortalLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'portalData', Utils.getArrayReader(this.PackMapPortalData),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapSpotLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'floodPoints', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLightsV15 =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'portalLights', Utils.getArrayReader(this.PackMapPortalLight),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapSpotLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 14\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapProtalLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'fadeCamera' , 'float32',\n\t\t\t\t'fadeLight' , 'float32',\n\t\t\t\t'lighten' , 'float32',\n\t\t\t\t'darken' , 'float32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapSpotLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'floodPoints', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLightsV14 =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'portalLights', Utils.getArrayReader(this.PackMapProtalLight),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapSpotLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13, ReferencedFunction: 0xFFB780\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'floodPoints', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12, ReferencedFunction: 0xFFB4F0\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'floodPoint' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11, ReferencedFunction: 0xFFB4F0\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'floodPoint' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10, ReferencedFunction: 0xFFC0D0\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'floodPoint' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9, ReferencedFunction: 0xFFC010\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims' , 'uint32',\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'floodPoint' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8, ReferencedFunction: 0xFFBF90\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims' , 'uint32',\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'minExt' , ['[]','float32',3],\n\t\t\t\t'maxExt' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'floodPoint' , ['[]','float32',3],\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims' , 'uint32',\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'minExt' , ['[]','float32',3],\n\t\t\t\t'maxExt' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeImage =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'dims' , 'uint32',\n\t\t\t\t'format' , 'uint32',\n\t\t\t\t'image', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapVolumeLight =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'minExt' , ['[]','float32',3],\n\t\t\t\t'maxExt' , ['[]','float32',3],\n\t\t\t\t'intensities' , ['[]','float32',2],\n\t\t\t\t'pack' , ['[]','float32',4],\n\t\t\t\t'images', Utils.getArrayReader(this.PackMapVolumeImage),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5, ReferencedFunction: 0xFFBE00\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t'innerAngle' , 'float32',\n\t\t\t\t'outerAngle' , 'float32',\n\t\t\t\t'textureName' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPointLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapPointLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'pointLights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4, ReferencedFunction: 0xFFBC00\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'amplitude' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3, ReferencedFunction: 0xFFBAC0\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'elevation' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapCurve =[\n\t\t\t\t'gust' , 'float32',\n\t\t\t\t'gustFreq' , 'float32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'phase' , 'float32',\n\t\t\t\t'curveType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t'curves', Utils.getArrayReader(this.PackMapCurve),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2, ReferencedFunction: 0xFFB9A0\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'elevation' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapLightgroups =[\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'groups', Utils.getArrayReader(this.PackMapLightgroups),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapLight =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'elevation' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapLights =[\n\t\t\t\t'lights', Utils.getArrayReader(this.PackMapLight),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: msn, versions: 3, strucTab: 0x157D980 \n\t///==================================================\n\t{\n\t\tname:'msn',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapInterestPoint =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'forward' , ['[]','float32',3],\n\t\t\t\t'description', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapMission =[\n\t\t\t\t'interestPoint', Utils.getArrayReader(this.PackMapInterestPoint),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapInterestPoint =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'forward' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapMission =[\n\t\t\t\t'interestPoint', Utils.getArrayReader(this.PackMapInterestPoint),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: nvms, versions: 3, strucTab: 0x1580A24 \n\t///==================================================\n\t{\n\t\tname:'nvms',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapNavMeshChunkV2 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'queryMediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapNavMeshMoverV2 =[\n\t\t\t\t'mapPropId', Utils.getQWordReader(),\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'mediatorData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapNavMeshV2 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkV2),\n\t\t\t\t'dynamicArray', Utils.getArrayReader(this.PackMapNavMeshMoverV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1, ReferencedFunction: 0xFFCF40\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapNavMeshChunkV1 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'queryMediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapNavMeshV1 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapNavMeshChunkV0 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'queryMediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapNavMeshV0 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: nmex, versions: 3, strucTab: 0x1580D18 \n\t///==================================================\n\t{\n\t\tname:'nmex',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapNavMeshChunkExternalV2 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapNavMeshMoverV2 =[\n\t\t\t\t'mapPropId', Utils.getQWordReader(),\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'mediatorData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapNavMeshExternalV2 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkExternalV2),\n\t\t\t\t'dynamicArray', Utils.getArrayReader(this.PackMapNavMeshMoverV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapNavMeshChunkExternalV1 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapNavMeshExternalV1 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkExternalV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapNavMeshChunkExternalV0 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapNavMeshExternalV0 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkExternalV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: obs, versions: 3, strucTab: 0x157D9A4 \n\t///==================================================\n\t{\n\t\tname:'obs',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapEditCollision =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'bottmVertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'topVertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'surface', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapObstacles =[\n\t\t\t\t'obstacles', Utils.getArrayReader(this.PackMapEditCollision),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapEditCollision =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'bottmVertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'topVertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapObstacles =[\n\t\t\t\t'obstacles', Utils.getArrayReader(this.PackMapEditCollision),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapEditCollision =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'bottmVertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'topVertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapObstacles =[\n\t\t\t\t'obstacles', Utils.getArrayReader(this.PackMapEditCollision),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: occ, versions: 1, strucTab: 0x157DA98 \n\t///==================================================\n\t{\n\t\tname:'occ',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.MapOcclusion =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapOcclusions =[\n\t\t\t\t'Occlusions', Utils.getArrayReader(this.MapOcclusion),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: octm, versions: 1, strucTab: 0x157DAA4 \n\t///==================================================\n\t{\n\t\tname:'octm',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.MapOcclusionTome =[\n\t\t\t\t'enableTomeQueries' , 'uint32',\n\t\t\t\t'tome', Utils.getArrayReader('uint8'),\n\t\t\t\t'propIDMap', Utils.getArrayReader('uint8'),\n\t\t\t\t'reserved', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: parm, versions: 1, strucTab: 0x157DAB0 \n\t///==================================================\n\t{\n\t\tname:'parm',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.MapParam =[\n\t\t\t\t'rect' , ['[]','float32',4],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'guid', ['[]', 'uint8', 16],\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: phys, versions: 11, strucTab: 0x157DE58 \n\t///==================================================\n\t{\n\t\tname:'phys',\n\t\tversions:{\n\n\n\t\t\t// => Version: 10\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsMeshV10 =[\n\t\t\t\t'indexArray', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectV10 =[\n\t\t\t\t'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV10),\n\t\t\t\t'sceneFilePtr', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectRefV10 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'objectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsGeometryV10 =[\n\t\t\t\t'filePath', Utils.getString16Reader(),\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV10),\n\t\t\t\t'surface', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelPropV10 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelZoneV8 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelObstacleV10 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsBlockV10 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV10),\n\t\t\t\t'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV10),\n\t\t\t\t'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV10),\n\t\t\t\t'debrisModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV10),\n\t\t\t\t'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV8),\n\t\t\t\t'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsV10 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'blockArray', Utils.getArrayReader(this.PackMapPhysicsBlockV10),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9, ReferencedFunction: 0xFFB230\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsMeshV9 =[\n\t\t\t\t'indexArray', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectV9 =[\n\t\t\t\t'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV9),\n\t\t\t\t'sceneFilePtr', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectRefV9 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'objectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsGeometryV9 =[\n\t\t\t\t'filePath', Utils.getString16Reader(),\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelPropV9 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelZoneV7 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelObstacleV9 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsBlockV9 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV9),\n\t\t\t\t'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV9),\n\t\t\t\t'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV9),\n\t\t\t\t'debrisModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV9),\n\t\t\t\t'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV7),\n\t\t\t\t'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsV9 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'blockArray', Utils.getArrayReader(this.PackMapPhysicsBlockV9),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsMeshV8 =[\n\t\t\t\t'indexArray', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneBoxShapeV7 =[\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneSphereShapeV7 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCapsuleShapeV7 =[\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMeshShapeV7 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneFilePhysicsV7 =[\n\t\t\t\t'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),\n\t\t\t\t'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),\n\t\t\t\t'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathNodeV6 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t'singlesided' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV6 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV6),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV6 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV6 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV6),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameSurfaceV6 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneFileGameV6 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV6),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV6),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.SceneGameSurfaceV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectV8 =[\n\t\t\t\t'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV8),\n\t\t\t\t'physics', Utils.getPointerReader(this.SceneFilePhysicsV7),\n\t\t\t\t'game', Utils.getPointerReader(this.SceneFileGameV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectRefV8 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'objectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsGeometryV8 =[\n\t\t\t\t'filePath', Utils.getString16Reader(),\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelPropV8 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelZoneV6 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelObstacleV8 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsBlockV8 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV8),\n\t\t\t\t'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV8),\n\t\t\t\t'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV8),\n\t\t\t\t'debrisModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV8),\n\t\t\t\t'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV6),\n\t\t\t\t'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsV8 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'blockArray', Utils.getArrayReader(this.PackMapPhysicsBlockV8),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsMeshV7 =[\n\t\t\t\t'indexArray', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneBoxShapeV7 =[\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneSphereShapeV7 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCapsuleShapeV7 =[\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMeshShapeV7 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneFilePhysicsV7 =[\n\t\t\t\t'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),\n\t\t\t\t'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),\n\t\t\t\t'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathNodeV6 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t'singlesided' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV6 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV6),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV6 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV6 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV6),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameSurfaceV6 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneFileGameV6 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV6),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV6),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.SceneGameSurfaceV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectV7 =[\n\t\t\t\t'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV7),\n\t\t\t\t'physics', Utils.getPointerReader(this.SceneFilePhysicsV7),\n\t\t\t\t'game', Utils.getPointerReader(this.SceneFileGameV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectRefV7 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'objectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsGeometryV7 =[\n\t\t\t\t'filePath', Utils.getString16Reader(),\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelPropV7 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelZoneV5 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelObstacleV7 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsBlockV7 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV7),\n\t\t\t\t'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV7),\n\t\t\t\t'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV7),\n\t\t\t\t'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV5),\n\t\t\t\t'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsV7 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'blockArray', Utils.getArrayReader(this.PackMapPhysicsBlockV7),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6, ReferencedFunction: 0xFFB210\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsMeshV6 =[\n\t\t\t\t'indexArray', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneBoxShapeV7 =[\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneSphereShapeV7 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCapsuleShapeV7 =[\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMeshShapeV7 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneFilePhysicsV7 =[\n\t\t\t\t'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),\n\t\t\t\t'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),\n\t\t\t\t'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathNodeV6 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t'singlesided' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV6 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV6),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV6 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV6 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV6),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameSurfaceV6 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneFileGameV6 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV6),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV6),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.SceneGameSurfaceV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectV6 =[\n\t\t\t\t'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV6),\n\t\t\t\t'physics', Utils.getPointerReader(this.SceneFilePhysicsV7),\n\t\t\t\t'game', Utils.getPointerReader(this.SceneFileGameV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectRefV6 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'objectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsGeometryV6 =[\n\t\t\t\t'filePath', Utils.getString16Reader(),\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelPropV6 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelZoneV4 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelObstacleV6 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsV6 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV6),\n\t\t\t\t'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV6),\n\t\t\t\t'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV6),\n\t\t\t\t'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV4),\n\t\t\t\t'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV6),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5, ReferencedFunction: 0xFFB210\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsMeshV5 =[\n\t\t\t\t'indexArray', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneBoxShapeV7 =[\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneSphereShapeV7 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCapsuleShapeV7 =[\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMeshShapeV7 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneFilePhysicsV7 =[\n\t\t\t\t'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),\n\t\t\t\t'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),\n\t\t\t\t'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathNodeV5 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t'singlesided' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV5 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV5),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV5 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV5 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV5),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'surfaceFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneFileGameV5 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV5),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectV5 =[\n\t\t\t\t'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV5),\n\t\t\t\t'physics', Utils.getPointerReader(this.SceneFilePhysicsV7),\n\t\t\t\t'game', Utils.getPointerReader(this.SceneFileGameV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectRefV5 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'objectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsGeometryV5 =[\n\t\t\t\t'filePath', Utils.getString16Reader(),\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelPropV5 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelZoneV3 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelObstacleV5 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsV5 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV5),\n\t\t\t\t'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV5),\n\t\t\t\t'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV5),\n\t\t\t\t'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV3),\n\t\t\t\t'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV5),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4, ReferencedFunction: 0xFFB210\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsMeshV4 =[\n\t\t\t\t'indexArray', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneBoxShapeV7 =[\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneSphereShapeV7 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCapsuleShapeV7 =[\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMeshShapeV7 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneFilePhysicsV7 =[\n\t\t\t\t'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),\n\t\t\t\t'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),\n\t\t\t\t'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathNodeV5 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t'singlesided' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV5 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV5),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV5 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV5 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV5),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'surfaceFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneFileGameV5 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV5),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectV4 =[\n\t\t\t\t'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV4),\n\t\t\t\t'physics', Utils.getPointerReader(this.SceneFilePhysicsV7),\n\t\t\t\t'game', Utils.getPointerReader(this.SceneFileGameV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsObjectRefV4 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'objectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsGeometryV4 =[\n\t\t\t\t'filePath', Utils.getFileNameReader(),\n\t\t\t\t'quantizedExtents' , 'uint8',\n\t\t\t\t'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelPropV4 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelZoneV2 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',4],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelObstacleV4 =[\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsV4 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV4),\n\t\t\t\t'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV4),\n\t\t\t\t'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV4),\n\t\t\t\t'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV2),\n\t\t\t\t'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsMeshV3 =[\n\t\t\t\t'indexArray', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertexArray', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppCodeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsShapeDataV3 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'gameDataPtr', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsGeometryV3 =[\n\t\t\t\t'shapeDataIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelPropV3 =[\n\t\t\t\t'token', ['[]', 'uint32', 2],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelZoneV1 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsV3 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'meshArray', Utils.getArrayReader(this.PackMapPhysicsMeshV3),\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapPhysicsShapeDataV3),\n\t\t\t\t'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV3),\n\t\t\t\t'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV3),\n\t\t\t\t'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2, ReferencedFunction: 0xFFB1F0\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsShapeDataV2 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'gameDataPtr', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsGeometryV2 =[\n\t\t\t\t'shapeDataIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelPropV2 =[\n\t\t\t\t'token', ['[]', 'uint32', 2],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelZoneV0 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsV2 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapPhysicsShapeDataV2),\n\t\t\t\t'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV2),\n\t\t\t\t'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV2),\n\t\t\t\t'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1, ReferencedFunction: 0xFFB1D0\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsShapeDataV1 =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'gameDataPtr', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsGeometryV1 =[\n\t\t\t\t'shapeDataIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPhysicsModelPropV1 =[\n\t\t\t\t'token', ['[]', 'uint32', 2],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'geometryIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsV1 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'shapeArray', Utils.getArrayReader(this.PackMapPhysicsShapeDataV1),\n\t\t\t\t'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV1),\n\t\t\t\t'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: pnvm, versions: 3, strucTab: 0x157DFC4 \n\t///==================================================\n\t{\n\t\tname:'pnvm',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsNavMeshChunkV2 =[\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'mediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsNavMeshV2 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'erosionRadius' , 'float32',\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1, ReferencedFunction: 0xFFD110\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsNavMeshChunkV1 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'mediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsNavMeshV1 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapPhysicsNavMeshChunkV0 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'mediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPhysicsNavMeshV0 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: prp2, versions: 22, strucTab: 0x157E208 \n\t///==================================================\n\t{\n\t\tname:'prp2',\n\t\tversions:{\n\n\n\t\t\t// => Version: 21\n\t\t\t21:function(){\n\t\t\t\t\t\tthis.PackMapPropConstantV18 =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'constant' , ['[]','float32',4],\n\t\t\t\t'submodel' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjV21 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constants', Utils.getArrayReader(this.PackMapPropConstantV18),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'reserved' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV21 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constants', Utils.getArrayReader(this.PackMapPropConstantV18),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'reserved' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropTransformV21 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjInstanceV21 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constants', Utils.getArrayReader(this.PackMapPropConstantV18),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'reserved' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'transforms', Utils.getArrayReader(this.PackMapPropTransformV21),\n\t\t\t\t'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV21 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjMetaV21 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constants', Utils.getArrayReader(this.PackMapPropConstantV18),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'reserved' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'parent', Utils.getQWordReader(),\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjVolumeV21 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV21 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV21),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV21),\n\t\t\t\t'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV21),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV21),\n\t\t\t\t'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV21),\n\t\t\t\t'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV21),\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 20\n\t\t\t20:function(){\n\t\t\t\t\t\tthis.PackMapPropConstantV17 =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'constant' , ['[]','float32',4],\n\t\t\t\t'submodel' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjV20 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constants', Utils.getArrayReader(this.PackMapPropConstantV17),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV20 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constants', Utils.getArrayReader(this.PackMapPropConstantV17),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropTransformV20 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjInstanceV20 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constants', Utils.getArrayReader(this.PackMapPropConstantV17),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'transforms', Utils.getArrayReader(this.PackMapPropTransformV20),\n\t\t\t\t'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV20 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjMetaV20 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constants', Utils.getArrayReader(this.PackMapPropConstantV17),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'parent', Utils.getQWordReader(),\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjVolumeV20 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV20 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV20),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV20),\n\t\t\t\t'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV20),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV20),\n\t\t\t\t'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV20),\n\t\t\t\t'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV20),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 19\n\t\t\t19:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV19 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV19 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropTransformV19 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjInstanceV19 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'transforms', Utils.getArrayReader(this.PackMapPropTransformV19),\n\t\t\t\t'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV19 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjMetaV19 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'parent', Utils.getQWordReader(),\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjVolumeV19 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV19 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV19),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV19),\n\t\t\t\t'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV19),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV19),\n\t\t\t\t'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV19),\n\t\t\t\t'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV19),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 18\n\t\t\t18:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV18 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV18 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropTransformV18 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjInstanceV18 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'transforms', Utils.getArrayReader(this.PackMapPropTransformV18),\n\t\t\t\t'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV18 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjMetaV18 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'sortLayer' , 'uint8',\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'parent', Utils.getQWordReader(),\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjVolumeV18 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV18 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV18),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV18),\n\t\t\t\t'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV18),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV18),\n\t\t\t\t'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV18),\n\t\t\t\t'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV18),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 17, ReferencedFunction: 0xFFA800\n\t\t\t17:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV17 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV17 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropTransformV17 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjInstanceV17 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'transforms', Utils.getArrayReader(this.PackMapPropTransformV17),\n\t\t\t\t'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV17 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjMetaV17 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'parent', Utils.getQWordReader(),\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjVolumeV17 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV17 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV17),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV17),\n\t\t\t\t'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV17),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV17),\n\t\t\t\t'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV17),\n\t\t\t\t'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV17),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 16\n\t\t\t16:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV16 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV16 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropTransformV16 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjInstanceV16 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'transforms', Utils.getArrayReader(this.PackMapPropTransformV16),\n\t\t\t\t'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV16 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjMetaV16 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'parent', Utils.getQWordReader(),\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjVolumeV16 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV16 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV16),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV16),\n\t\t\t\t'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV16),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV16),\n\t\t\t\t'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV16),\n\t\t\t\t'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV16),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 15\n\t\t\t15:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV15 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV15 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropTransformV15 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjInstanceV15 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'transforms', Utils.getArrayReader(this.PackMapPropTransformV15),\n\t\t\t\t'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV15 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjMetaV15 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'bounds' , ['[]','float32',4],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'parent', Utils.getQWordReader(),\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjVolumeV15 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV15 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV15),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV15),\n\t\t\t\t'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV15),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV15),\n\t\t\t\t'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV15),\n\t\t\t\t'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV15),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 14, ReferencedFunction: 0xFFA790\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV14 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV14 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV14 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjMetaV14 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'bucketId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'parent', Utils.getQWordReader(),\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjVolumeV14 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV14 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV14),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV14),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV14),\n\t\t\t\t'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV14),\n\t\t\t\t'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV14),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV13 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV13 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV13 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjMetaV13 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'parent', Utils.getQWordReader(),\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjVolumeV13 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'children', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV13 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV13),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV13),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV13),\n\t\t\t\t'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV13),\n\t\t\t\t'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV13),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12, ReferencedFunction: 0xFF95A0\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV12 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV12 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV12 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjMetaV12 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'parent', Utils.getQWordReader(),\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjVolumeV12 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV12 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV12),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV12),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV12),\n\t\t\t\t'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV12),\n\t\t\t\t'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV12),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11, ReferencedFunction: 0xFF93A0\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV11 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV11 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV11 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'glomTargetId', Utils.getQWordReader(),\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV11 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV11),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV11),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV11),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10, ReferencedFunction: 0xFFACB0\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV10 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV10 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV10 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'glomTargetId', Utils.getQWordReader(),\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV10 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV10),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV10),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV10),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9, ReferencedFunction: 0xFFAB60\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV9 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV9 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV9 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'glomTargetId', Utils.getQWordReader(),\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV9 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV9),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV9),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV9),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV8 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV8 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV8 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'glomTargetId', Utils.getQWordReader(),\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV8 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV8),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV8),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV8),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7, ReferencedFunction: 0xFFAB10\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV7 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV7 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV7 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'glomTargetId', Utils.getQWordReader(),\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV7 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV7),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV7),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV7),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6, ReferencedFunction: 0xFFA960\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV6 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV6 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1' , 'float32',\n\t\t\t\t'lod2' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV6 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'glomTargetId', Utils.getQWordReader(),\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV6 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV6),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV6),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV6),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV5 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1', 'uint16',\n\t\t\t\t'lod2', 'uint16',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV5 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1', 'uint16',\n\t\t\t\t'lod2', 'uint16',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV5 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t'glomOrigin' , ['[]','float32',3],\n\t\t\t\t'glomClipScale' , ['[]','float32',3],\n\t\t\t\t'glomTargetId', Utils.getQWordReader(),\n\t\t\t\t'glomType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV5 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV5),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV5),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV5),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV4 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1', 'uint16',\n\t\t\t\t'lod2', 'uint16',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV4 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1', 'uint16',\n\t\t\t\t'lod2', 'uint16',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'byte' , 'uint8',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV4 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV4 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV4),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV4),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PackMapPropObjV3 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1', 'uint16',\n\t\t\t\t'lod2', 'uint16',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjAnimSeqV3 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'lod1', 'uint16',\n\t\t\t\t'lod2', 'uint16',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animSequence', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapPropObjToolV3 =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'layerMask' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapPropV3 =[\n\t\t\t\t'propArray', Utils.getArrayReader(this.PackMapPropObjV3),\n\t\t\t\t'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV3),\n\t\t\t\t'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: reso, versions: 2, strucTab: 0x157EBD0 \n\t///==================================================\n\t{\n\t\tname:'reso',\n\t\tversions:{\n\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapResourceMapNodeItemV1 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapResourceMapNodeV1 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'itemArray', Utils.getArrayReader(this.PackMapResourceMapNodeItemV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapResourceMapV1 =[\n\t\t\t\t'nodeArray', Utils.getArrayReader(this.PackMapResourceMapNodeV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapResourceMapNodeItemV0 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapResourceMapNodeV0 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'itemArray', Utils.getArrayReader(this.PackMapResourceMapNodeItemV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapResourceMapV0 =[\n\t\t\t\t'nodeArray', Utils.getArrayReader(this.PackMapResourceMapNodeV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: rive, versions: 6, strucTab: 0x157EED8 \n\t///==================================================\n\t{\n\t\tname:'rive',\n\t\tversions:{\n\n\n\t\t\t// => Version: 5, ReferencedFunction: 0xFFCFE0\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.PackMapRiverProperty =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverReach =[\n\t\t\t\t'properties', Utils.getArrayReader(this.PackMapRiverProperty),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiver =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'properties', Utils.getArrayReader(this.PackMapRiverProperty),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'reaches', Utils.getArrayReader(this.MapRiverReach),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapRivers =[\n\t\t\t\t'rivers', Utils.getArrayReader(this.MapRiver),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.MapRiverTextureMap =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'speedX' , 'float32',\n\t\t\t\t'speedY' , 'float32',\n\t\t\t\t'tiling' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverMaterial =[\n\t\t\t\t'materialFile' , Utils.getFileNameReader(),\n\t\t\t\t'textureFiles', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'textureMaps', Utils.getArrayReader(this.MapRiverTextureMap),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverReach =[\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'curveLength' , 'float32',\n\t\t\t\t'curvePercent' , 'float32',\n\t\t\t\t'xTessellation' , 'uint32',\n\t\t\t\t'yTessellation', ['[]', 'uint32', 2],\n\t\t\t\t'broadId' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materials', Utils.getArrayReader(this.MapRiverMaterial),\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiver =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'xTiling' , 'float32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'reaches', Utils.getArrayReader(this.MapRiverReach),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapRivers =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t'rivers', Utils.getArrayReader(this.MapRiver),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.MapRiverTextureMap =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'speedX' , 'float32',\n\t\t\t\t'speedY' , 'float32',\n\t\t\t\t'tiling' , 'float32',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverMaterial =[\n\t\t\t\t'materialFile' , Utils.getFileNameReader(),\n\t\t\t\t'textureFiles', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'textureMaps', Utils.getArrayReader(this.MapRiverTextureMap),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverReach =[\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'curveLength' , 'float32',\n\t\t\t\t'curvePercent' , 'float32',\n\t\t\t\t'xTessellation' , 'uint32',\n\t\t\t\t'yTessellation', ['[]', 'uint32', 2],\n\t\t\t\t'broadId' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materials', Utils.getArrayReader(this.MapRiverMaterial),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiver =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'xTiling' , 'float32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'reaches', Utils.getArrayReader(this.MapRiverReach),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapRivers =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t'rivers', Utils.getArrayReader(this.MapRiver),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.MapRiverTextureMap =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'speedX' , 'float32',\n\t\t\t\t'speedY' , 'float32',\n\t\t\t\t'tiling' , 'float32',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverMaterial =[\n\t\t\t\t'materialFile' , Utils.getFileNameReader(),\n\t\t\t\t'textureFiles', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'textureMaps', Utils.getArrayReader(this.MapRiverTextureMap),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverReach =[\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'curveLength' , 'float32',\n\t\t\t\t'curvePercent' , 'float32',\n\t\t\t\t'xTessellation' , 'uint32',\n\t\t\t\t'yTessellation', ['[]', 'uint32', 2],\n\t\t\t\t'broadId' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materials', Utils.getArrayReader(this.MapRiverMaterial),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiver =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'xTiling' , 'float32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'reaches', Utils.getArrayReader(this.MapRiverReach),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapRivers =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t'rivers', Utils.getArrayReader(this.MapRiver),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.MapRiverTextureMap =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'speedX' , 'float32',\n\t\t\t\t'speedY' , 'float32',\n\t\t\t\t'tiling' , 'float32',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverMaterial =[\n\t\t\t\t'materialFile' , Utils.getFileNameReader(),\n\t\t\t\t'textureFiles', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'textureMaps', Utils.getArrayReader(this.MapRiverTextureMap),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverReach =[\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'curveLength' , 'float32',\n\t\t\t\t'curvePercent' , 'float32',\n\t\t\t\t'xTessellation' , 'uint32',\n\t\t\t\t'yTessellation', ['[]', 'uint32', 2],\n\t\t\t\t'broadId' , 'uint32',\n\t\t\t\t'materials', Utils.getArrayReader(this.MapRiverMaterial),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiver =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'xTiling' , 'float32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'reaches', Utils.getArrayReader(this.MapRiverReach),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapRivers =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t'rivers', Utils.getArrayReader(this.MapRiver),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.MapRiverTextureMap =[\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t'speed' , 'float32',\n\t\t\t\t'tiling' , 'float32',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverMaterial =[\n\t\t\t\t'materialFile' , Utils.getFileNameReader(),\n\t\t\t\t'textureFiles', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'textureMaps', Utils.getArrayReader(this.MapRiverTextureMap),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiverReach =[\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'curveLength' , 'float32',\n\t\t\t\t'curvePercent' , 'float32',\n\t\t\t\t'xTessellation' , 'uint32',\n\t\t\t\t'yTessellation', ['[]', 'uint32', 2],\n\t\t\t\t'broadId' , 'uint32',\n\t\t\t\t'materials', Utils.getArrayReader(this.MapRiverMaterial),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapRiver =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'xTiling' , 'float32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'reaches', Utils.getArrayReader(this.MapRiverReach),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapRivers =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'nextBroadId' , 'uint32',\n\t\t\t\t'rivers', Utils.getArrayReader(this.MapRiver),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: tlfs, versions: 1, strucTab: 0x157DBB8 \n\t///==================================================\n\t{\n\t\tname:'tlfs',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapToolFsFileV0 =[\n\t\t\t\t'filename', Utils.getFileNameReader(),\n\t\t\t\t'time', Utils.getQWordReader(),\n\t\t\t\t'dataPtr', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapToolFsV0 =[\n\t\t\t\t'filePtr', Utils.getArrayReader(this.PackMapToolFsFileV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: shex, versions: 2, strucTab: 0x157F268 \n\t///==================================================\n\t{\n\t\tname:'shex',\n\t\tversions:{\n\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.__root=this.PackMapShadowExtV1 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'shadowDims', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: shor, versions: 4, strucTab: 0x157F380 \n\t///==================================================\n\t{\n\t\tname:'shor',\n\t\tversions:{\n\n\n\t\t\t// => Version: 3, ReferencedFunction: 0xFFB300\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.MapShoreChain =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacity' , 'float32',\n\t\t\t\t'animationSpeed' , 'float32',\n\t\t\t\t'edgeSize' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'restTime' , 'float32',\n\t\t\t\t'fadeRanges', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'simplifyDistMin' , 'float32',\n\t\t\t\t'simplifyDistMax' , 'float32',\n\t\t\t\t'simplifyDot' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapShore =[\n\t\t\t\t'chains', Utils.getArrayReader(this.MapShoreChain),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.MapShoreChain =[\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacity' , 'float32',\n\t\t\t\t'animationSpeed' , 'float32',\n\t\t\t\t'edgeSize' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'restTime' , 'float32',\n\t\t\t\t'fadeRanges', ['[]', ['[]','float32',2], 4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapShore =[\n\t\t\t\t'chains', Utils.getArrayReader(this.MapShoreChain),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: snd, versions: 1, strucTab: 0x157F584 \n\t///==================================================\n\t{\n\t\tname:'snd',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.MapLegacy =[\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'files', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: surf, versions: 3, strucTab: 0x157F560 \n\t///==================================================\n\t{\n\t\tname:'surf',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.MapSurfaceAttribute =[\n\t\t\t\t'Id', Utils.getQWordReader(),\n\t\t\t\t'Sound', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapSurfaceAttributeTool =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'category', Utils.getString16Reader(),\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapSurfaceOverride =[\n\t\t\t\t'surfaceId', Utils.getQWordReader(),\n\t\t\t\t'bitArray', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapSurfaceTerrainOverride =[\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t'overrideArray', Utils.getArrayReader(this.MapSurfaceOverride),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapSurfacePropOverride =[\n\t\t\t\t'propId', Utils.getQWordReader(),\n\t\t\t\t'overrideArray', Utils.getArrayReader(this.MapSurfaceOverride),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapSurfaces =[\n\t\t\t\t'attributeData', Utils.getArrayReader(this.MapSurfaceAttribute),\n\t\t\t\t'toolData', Utils.getArrayReader(this.MapSurfaceAttributeTool),\n\t\t\t\t'terrainArray', Utils.getArrayReader(this.MapSurfaceTerrainOverride),\n\t\t\t\t'propArray', Utils.getArrayReader(this.MapSurfacePropOverride),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.MapSurfaceAttribute =[\n\t\t\t\t'Id', Utils.getQWordReader(),\n\t\t\t\t'Sound', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapSurfaceAttributeTool =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'category', Utils.getString16Reader(),\n\t\t\t\t'color' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapSurfaces =[\n\t\t\t\t'attributeData', Utils.getArrayReader(this.MapSurfaceAttribute),\n\t\t\t\t'toolData', Utils.getArrayReader(this.MapSurfaceAttributeTool),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.MapSurfaceMeta =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'descriptor' , 'uint8',\n\t\t\t\t'data' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapSurfaceChunk =[\n\t\t\t\t'coord', ['[]', 'uint32', 3],\n\t\t\t\t'metadata', Utils.getArrayReader(this.MapSurfaceMeta),\n\t\t\t\t'typeData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapSurfaces =[\n\t\t\t\t'chunkData', Utils.getArrayReader(this.MapSurfaceChunk),\n\t\t\t\t'typeData', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: zon2, versions: 22, strucTab: 0x1580230 \n\t///==================================================\n\t{\n\t\tname:'zon2',\n\t\tversions:{\n\n\n\t\t\t// => Version: 21\n\t\t\t21:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV22 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hslOffset' , ['[]','float32',3],\n\t\t\t\t'zOffsets', ['[]', 'uint8', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV22 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'hslRanges', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'instanceScaleJitter' , 'float32',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'materialname' , Utils.getFileNameReader(),\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV22),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV22),\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageV10 =[\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'paintFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'string', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageTableV10 =[\n\t\t\t\t'pageArray', Utils.getArrayReader(this.PackMapZonePageV10),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV22 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV22),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV10),\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV22 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV22 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV22 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV22),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV22),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV22 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV22),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV22),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t'string', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 20, ReferencedFunction: 0xFFC530\n\t\t\t20:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV21 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hslOffset' , ['[]','float32',3],\n\t\t\t\t'zOffsets', ['[]', 'uint8', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV21 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'hslRanges', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'instanceScaleJitter' , 'float32',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'materialname' , Utils.getFileNameReader(),\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV21),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageV9 =[\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'paintFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageTableV9 =[\n\t\t\t\t'pageArray', Utils.getArrayReader(this.PackMapZonePageV9),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV21 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV21),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV21 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV21 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV21 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV21),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV21),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV21 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV21),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV21),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 19, ReferencedFunction: 0x5EABE0\n\t\t\t19:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV20 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hslOffset' , ['[]','float32',3],\n\t\t\t\t'zOffsets', ['[]', 'uint8', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV20 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'hslRanges', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'instanceScaleJitter' , 'float32',\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'materialname' , Utils.getFileNameReader(),\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV20),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageV8 =[\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'paintFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageTableV8 =[\n\t\t\t\t'pageArray', Utils.getArrayReader(this.PackMapZonePageV8),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV20 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV20),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV20 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV20 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV20 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV20),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV20),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV20 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV20),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV20),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 18, ReferencedFunction: 0xFFC4A0\n\t\t\t18:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV19 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hslOffset' , ['[]','float32',3],\n\t\t\t\t'zOffsets', ['[]', 'uint8', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV19 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'hslRanges', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'materialname' , Utils.getFileNameReader(),\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV19),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageV7 =[\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'paintFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageTableV7 =[\n\t\t\t\t'pageArray', Utils.getArrayReader(this.PackMapZonePageV7),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV19 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV19),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV19 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV19 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV19 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV19),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV19),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV19 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV19),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV19),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 17, ReferencedFunction: 0xFFC3E0\n\t\t\t17:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV18 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hslOffset' , ['[]','float32',3],\n\t\t\t\t'zOffsets', ['[]', 'uint8', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV18 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'hslRanges', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'materialname' , Utils.getFileNameReader(),\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV18),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageV6 =[\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'paintFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageTableV6 =[\n\t\t\t\t'pageArray', Utils.getArrayReader(this.PackMapZonePageV6),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV18 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV18),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV18 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV18 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV18 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV18),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV18),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV18 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV18),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV18),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 16, ReferencedFunction: 0xFFC1A0\n\t\t\t16:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV17 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hslOffset' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV17 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV17),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageV5 =[\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'paintFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageTableV5 =[\n\t\t\t\t'pageArray', Utils.getArrayReader(this.PackMapZonePageV5),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV17 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV17),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV17 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV17 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV17 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV17),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV17),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV17 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV17),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV17),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 15, ReferencedFunction: 0xFFC1A0\n\t\t\t15:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV16 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hslOffset' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV16 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV16),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageV4 =[\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'paintFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageTableV4 =[\n\t\t\t\t'pageArray', Utils.getArrayReader(this.PackMapZonePageV4),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV16 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV16),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV16 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV16 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV16 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV16),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV16),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'broadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackBroadphaseType =[\n\t\t\t\t'broadphaseData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV16 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV16),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV16),\n\t\t\t\t'broadPhase', this.PackBroadphaseType,\n\t\t\t\t'maxBroadId', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 14\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV15 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hslOffset' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV15 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV15),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageV3 =[\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'paintFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageTableV3 =[\n\t\t\t\t'pageArray', Utils.getArrayReader(this.PackMapZonePageV3),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV15 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV15),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV15 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV15 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV15 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV15),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV15),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV15 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV15),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV15),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV14 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV14 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV14),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageV2 =[\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'paintFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZonePageTableV2 =[\n\t\t\t\t'pageArray', Utils.getArrayReader(this.PackMapZonePageV2),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV14 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV14),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV14 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV14 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV14 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV14),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV14),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV14 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV14),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV14),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV13 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV13 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV13),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV13 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV13),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV13 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV13 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV13 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV13),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV13),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV13 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV13),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV13),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.PackMapZoneModelV12 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneLayerDefV12 =[\n\t\t\t\t'height' , 'uint8',\n\t\t\t\t'width' , 'uint8',\n\t\t\t\t'radiusGround' , 'uint8',\n\t\t\t\t'sortGroup' , 'uint8',\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'scaleRange' , ['[]','float32',2],\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'fadeRange' , ['[]','float32',2],\n\t\t\t\t'rotRange', ['[]', ['[]','float32',2], 3],\n\t\t\t\t'noise' , 'uint8',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t'modelArray', Utils.getArrayReader(this.PackMapZoneModelV12),\n\t\t\t\t'subModel', Utils.getPointerReader(this.PackMapZoneModelV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneDefV12 =[\n\t\t\t\t'defFilename' , Utils.getFileNameReader(),\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV12),\n\t\t\t\t'timeStamp', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneEncodingDataV12 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'offset' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneCollideDataV12 =[\n\t\t\t\t'normalX' , 'float32',\n\t\t\t\t'normalY' , 'float32',\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapZoneV12 =[\n\t\t\t\t'zoneFlags' , 'uint32',\n\t\t\t\t'vertRect', ['[]', 'uint32', 4],\n\t\t\t\t'waterHeight' , 'float32',\n\t\t\t\t'seed' , 'uint8',\n\t\t\t\t'defToken' , 'uint32',\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t'zPos' , 'float32',\n\t\t\t\t'flags', Utils.getArrayReader('uint8'),\n\t\t\t\t'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV12),\n\t\t\t\t'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV12),\n\t\t\t\t'offsetData', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapZonesV12 =[\n\t\t\t\t'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV12),\n\t\t\t\t'zoneArray', Utils.getArrayReader(this.PackMapZoneV12),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: trn, versions: 15, strucTab: 0x157FD20 \n\t///==================================================\n\t{\n\t\tname:'trn',\n\t\tversions:{\n\n\n\t\t\t// => Version: 14\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.PackMapTerrainChunkV14 =[\n\t\t\t\t'chunkFlags' , 'uint32',\n\t\t\t\t'surfaceIndexArray', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaceTokenArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainConstV14 =[\n\t\t\t\t'tokenName' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainTexV14 =[\n\t\t\t\t'tokenName' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags', ['[]', 'uint32', 2],\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainMaterialV14 =[\n\t\t\t\t'materialFile' , Utils.getFileNameReader(),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'constIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t'texIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainChunkUVDataV14 =[\n\t\t\t\t'translation' , ['[]','float32',2],\n\t\t\t\t'xScaleRange' , ['[]','float32',2],\n\t\t\t\t'yScaleRange' , ['[]','float32',2],\n\t\t\t\t'scaleSpeed' , ['[]','float32',2],\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrrainChunkMaterialV14 =[\n\t\t\t\t'tiling', ['[]', 'uint8', 3],\n\t\t\t\t'hiResMaterial', this.PackMapTerrainMaterialV14,\n\t\t\t\t'loResMaterial', this.PackMapTerrainMaterialV14,\n\t\t\t\t'faderMaterial', this.PackMapTerrainMaterialV14,\n\t\t\t\t'uvData', Utils.getPointerReader(this.PackMapTerrainChunkUVDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainMaterialsV14 =[\n\t\t\t\t'pagedImage' , Utils.getFileNameReader(),\n\t\t\t\t'constArray', Utils.getArrayReader(this.PackMapTerrainConstV14),\n\t\t\t\t'texFileArray', Utils.getArrayReader(this.PackMapTerrainTexV14),\n\t\t\t\t'materials', Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV14),\n\t\t\t\t'midFade' , ['[]','float32',2],\n\t\t\t\t'farFade' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapTerrainV14 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'swapDistance' , 'float32',\n\t\t\t\t'heightMapArray', Utils.getArrayReader('float32'),\n\t\t\t\t'tileFlagArray', Utils.getArrayReader('uint32'),\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapTerrainChunkV14),\n\t\t\t\t'materials', Utils.getPointerReader(this.PackMapTerrainMaterialsV14),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13, ReferencedFunction: 0xFFCAA0\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.PackMapTerrainChunkV13 =[\n\t\t\t\t'chunkFlags' , 'uint32',\n\t\t\t\t'tileTableArray', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainConstV13 =[\n\t\t\t\t'tokenName' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainTexV13 =[\n\t\t\t\t'tokenName' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags', ['[]', 'uint32', 2],\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainMaterialV13 =[\n\t\t\t\t'materialFile' , Utils.getFileNameReader(),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'constIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t'texIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainChunkUVDataV13 =[\n\t\t\t\t'translation' , ['[]','float32',2],\n\t\t\t\t'xScaleRange' , ['[]','float32',2],\n\t\t\t\t'yScaleRange' , ['[]','float32',2],\n\t\t\t\t'scaleSpeed' , ['[]','float32',2],\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrrainChunkMaterialV13 =[\n\t\t\t\t'tiling', ['[]', 'uint8', 3],\n\t\t\t\t'hiResMaterial', this.PackMapTerrainMaterialV13,\n\t\t\t\t'loResMaterial', this.PackMapTerrainMaterialV13,\n\t\t\t\t'faderMaterial', this.PackMapTerrainMaterialV13,\n\t\t\t\t'uvData', Utils.getPointerReader(this.PackMapTerrainChunkUVDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainMaterialsV13 =[\n\t\t\t\t'pagedImage' , Utils.getFileNameReader(),\n\t\t\t\t'constArray', Utils.getArrayReader(this.PackMapTerrainConstV13),\n\t\t\t\t'texFileArray', Utils.getArrayReader(this.PackMapTerrainTexV13),\n\t\t\t\t'materials', Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV13),\n\t\t\t\t'midFade' , ['[]','float32',2],\n\t\t\t\t'farFade' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapTerrainV13 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'swapDistance' , 'float32',\n\t\t\t\t'heightMapArray', Utils.getArrayReader('float32'),\n\t\t\t\t'tileFlagArray', Utils.getArrayReader('uint32'),\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapTerrainChunkV13),\n\t\t\t\t'materials', Utils.getPointerReader(this.PackMapTerrainMaterialsV13),\n\t\t\t\t'typeArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12, ReferencedFunction: 0xFFC990\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.PackMapTerrainChunkV12 =[\n\t\t\t\t'chunkFlags' , 'uint32',\n\t\t\t\t'tileTableArray', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainConstV12 =[\n\t\t\t\t'tokenName' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainTexV12 =[\n\t\t\t\t'tokenName' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags', ['[]', 'uint32', 2],\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainMaterialV12 =[\n\t\t\t\t'materialFile' , Utils.getFileNameReader(),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'constIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t'texIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainChunkUVDataV12 =[\n\t\t\t\t'translation' , ['[]','float32',2],\n\t\t\t\t'xScaleRange' , ['[]','float32',2],\n\t\t\t\t'yScaleRange' , ['[]','float32',2],\n\t\t\t\t'scaleSpeed' , ['[]','float32',2],\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrrainChunkMaterialV12 =[\n\t\t\t\t'tiling', ['[]', 'uint8', 3],\n\t\t\t\t'hiResMaterial', this.PackMapTerrainMaterialV12,\n\t\t\t\t'loResMaterial', this.PackMapTerrainMaterialV12,\n\t\t\t\t'uvData', Utils.getPointerReader(this.PackMapTerrainChunkUVDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainMaterialsV12 =[\n\t\t\t\t'pagedImage' , Utils.getFileNameReader(),\n\t\t\t\t'constArray', Utils.getArrayReader(this.PackMapTerrainConstV12),\n\t\t\t\t'texFileArray', Utils.getArrayReader(this.PackMapTerrainTexV12),\n\t\t\t\t'materials', Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapTerrainV12 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'swapDistance' , 'float32',\n\t\t\t\t'heightMapArray', Utils.getArrayReader('float32'),\n\t\t\t\t'tileFlagArray', Utils.getArrayReader('uint32'),\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapTerrainChunkV12),\n\t\t\t\t'materials', Utils.getPointerReader(this.PackMapTerrainMaterialsV12),\n\t\t\t\t'typeArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11, ReferencedFunction: 0xFFC900\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.PackMapTerrainChunkV11 =[\n\t\t\t\t'chunkFlags' , 'uint32',\n\t\t\t\t'tileTableArray', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainConstV11 =[\n\t\t\t\t'tokenName' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainTexV11 =[\n\t\t\t\t'tokenName' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags', ['[]', 'uint32', 2],\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainMaterialV11 =[\n\t\t\t\t'materialFile' , Utils.getFileNameReader(),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'constIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t'texIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainChunkUVDataV11 =[\n\t\t\t\t'translation' , ['[]','float32',2],\n\t\t\t\t'xScaleRange' , ['[]','float32',2],\n\t\t\t\t'yScaleRange' , ['[]','float32',2],\n\t\t\t\t'scaleSpeed' , ['[]','float32',2],\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrrainChunkMaterialV11 =[\n\t\t\t\t'tiling', ['[]', 'uint8', 3],\n\t\t\t\t'hiResMaterial', this.PackMapTerrainMaterialV11,\n\t\t\t\t'loResMaterial', this.PackMapTerrainMaterialV11,\n\t\t\t\t'uvData', Utils.getPointerReader(this.PackMapTerrainChunkUVDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainMaterialsV11 =[\n\t\t\t\t'pagedImage' , Utils.getFileNameReader(),\n\t\t\t\t'constArray', Utils.getArrayReader(this.PackMapTerrainConstV11),\n\t\t\t\t'texFileArray', Utils.getArrayReader(this.PackMapTerrainTexV11),\n\t\t\t\t'materials', Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapTerrainV11 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'swapDistance' , 'float32',\n\t\t\t\t'heightMapArray', Utils.getArrayReader('float32'),\n\t\t\t\t'tileFlagArray', Utils.getArrayReader('uint32'),\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapTerrainChunkV11),\n\t\t\t\t'materials', Utils.getPointerReader(this.PackMapTerrainMaterialsV11),\n\t\t\t\t'typeArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.PackMapTerrainChunkV10 =[\n\t\t\t\t'chunkFlags' , 'uint32',\n\t\t\t\t'tileTableArray', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainConstV10 =[\n\t\t\t\t'tokenName' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainTexV10 =[\n\t\t\t\t'tokenName' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags', ['[]', 'uint32', 2],\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainMaterialV10 =[\n\t\t\t\t'materialFile' , Utils.getFileNameReader(),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'constIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t'texIndexArray', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainChunkUVDataV10 =[\n\t\t\t\t'translation' , ['[]','float32',2],\n\t\t\t\t'xScaleRange' , ['[]','float32',2],\n\t\t\t\t'yScaleRange' , ['[]','float32',2],\n\t\t\t\t'scaleSpeed' , ['[]','float32',2],\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrrainChunkMaterialV10 =[\n\t\t\t\t'tiling' , 'uint8',\n\t\t\t\t'hiResMaterial', this.PackMapTerrainMaterialV10,\n\t\t\t\t'loResMaterial', this.PackMapTerrainMaterialV10,\n\t\t\t\t'uvData', Utils.getPointerReader(this.PackMapTerrainChunkUVDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapTerrainMaterialsV10 =[\n\t\t\t\t'pagedImage' , Utils.getFileNameReader(),\n\t\t\t\t'constArray', Utils.getArrayReader(this.PackMapTerrainConstV10),\n\t\t\t\t'texFileArray', Utils.getArrayReader(this.PackMapTerrainTexV10),\n\t\t\t\t'materials', Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapTerrainV10 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'swapDistance' , 'float32',\n\t\t\t\t'heightMapArray', Utils.getArrayReader('float32'),\n\t\t\t\t'tileFlagArray', Utils.getArrayReader('uint32'),\n\t\t\t\t'chunkArray', Utils.getArrayReader(this.PackMapTerrainChunkV10),\n\t\t\t\t'materials', Utils.getPointerReader(this.PackMapTerrainMaterialsV10),\n\t\t\t\t'typeArray', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: trni, versions: 4, strucTab: 0x157FDD4 \n\t///==================================================\n\t{\n\t\tname:'trni',\n\t\tversions:{\n\n\n\t\t\t// => Version: 3, ReferencedFunction: 0xFFCB00\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV3 =[\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'strippedDims', ['[]', 'uint32', 2],\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV3 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'solidColor' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageTableDataV3 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV3),\n\t\t\t\t'rawPages', Utils.getArrayReader(this.PagedImagePageDataV3),\n\t\t\t\t'strippedPages', Utils.getArrayReader(this.PagedImagePageDataV3),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageEmbeddedPageDataV3 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageEmbeddedPagesDataV3 =[\n\t\t\t\t'rawPages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV3),\n\t\t\t\t'strippedPages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapTerrainImg =[\n\t\t\t\t'tableData', Utils.getPointerReader(this.PagedImageTableDataV3),\n\t\t\t\t'pageData', Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV2 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV2 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'solidColor' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageTableDataV2 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV2),\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImagePageDataV2),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageEmbeddedPageDataV2 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'rawData', Utils.getArrayReader('uint8'),\n\t\t\t\t'compressedData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageEmbeddedPagesDataV2 =[\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapTerrainImg =[\n\t\t\t\t'tableData', Utils.getPointerReader(this.PagedImageTableDataV2),\n\t\t\t\t'pageData', Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV1 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV1 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'solidColor' , ['[]','uint8',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageTableDataV1 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV1),\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImagePageDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageEmbeddedPageDataV1 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'rawData', Utils.getArrayReader('uint8'),\n\t\t\t\t'compressedData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageEmbeddedPagesDataV1 =[\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapTerrainImg =[\n\t\t\t\t'tableData', Utils.getPointerReader(this.PagedImageTableDataV1),\n\t\t\t\t'pageData', Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PagedImageLayerDataV0 =[\n\t\t\t\t'dims', ['[]', 'uint32', 2],\n\t\t\t\t'rawDims', ['[]', 'uint32', 2],\n\t\t\t\t'diskFormat' , 'uint32',\n\t\t\t\t'rawFormat' , 'uint32',\n\t\t\t\t'strippedFormat' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImagePageDataV0 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageTableDataV0 =[\n\t\t\t\t'layers', Utils.getArrayReader(this.PagedImageLayerDataV0),\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImagePageDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageEmbeddedPageDataV0 =[\n\t\t\t\t'layer' , 'uint32',\n\t\t\t\t'coord', ['[]', 'uint32', 2],\n\t\t\t\t'rawData', Utils.getArrayReader('uint8'),\n\t\t\t\t'compressedData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PagedImageEmbeddedPagesDataV0 =[\n\t\t\t\t'pages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapTerrainImg =[\n\t\t\t\t'tableData', Utils.getPointerReader(this.PagedImageTableDataV0),\n\t\t\t\t'pageData', Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: watr, versions: 1, strucTab: 0x157FE34 \n\t///==================================================\n\t{\n\t\tname:'watr',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.PackMapWaterV0 =[\n\t\t\t\t'waterFoamData', Utils.getArrayReader('uint8'),\n\t\t\t\t'waterChunks', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: edit, versions: 15, strucTab: 0x1581920 \n\t///==================================================\n\t{\n\t\tname:'edit',\n\t\tversions:{\n\n\n\t\t\t// => Version: 14, ReferencedFunction: 0x5EABE0\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.MapEditLayerItem =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'moduleId' , 'uint32',\n\t\t\t\t'layerFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerStates', Utils.getArrayReader('uint8'),\n\t\t\t\t'layerNames', Utils.getArrayReader(Utils.getString16Reader()),\n\t\t\t\t'layerIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'items', Utils.getArrayReader(this.MapEditLayerItem),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'dirtyFlags' , 'uint32',\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditSurfacePoly =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'surfaceType' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'range' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditSurfaceRoadNode =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditSurfaceRoad =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'surfaceType' , 'uint32',\n\t\t\t\t'nodes', Utils.getArrayReader(this.PackMapEditSurfaceRoadNode),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditNavMeshData =[\n\t\t\t\t'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'surfacePolys', Utils.getArrayReader(this.PackMapEditSurfacePoly),\n\t\t\t\t'surfaceRoads', Utils.getArrayReader(this.PackMapEditSurfaceRoad),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditSnapPoint =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'moduleId' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t'navMeshData', this.PackMapEditNavMeshData,\n\t\t\t\t'snapPoints', Utils.getArrayReader(this.MapEditSnapPoint),\n\t\t\t\t'mapHome', Utils.getString16Reader(),\n\t\t\t\t'homeSave' , 'uint8',\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13, ReferencedFunction: 0x5EABE0\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.MapEditLayerItem =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'moduleId' , 'uint32',\n\t\t\t\t'layerFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerStates', Utils.getArrayReader('uint8'),\n\t\t\t\t'layerNames', Utils.getArrayReader(Utils.getString16Reader()),\n\t\t\t\t'layerIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'items', Utils.getArrayReader(this.MapEditLayerItem),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'dirtyFlags' , 'uint32',\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditSnapPoint =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'moduleId' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'snapPoints', Utils.getArrayReader(this.MapEditSnapPoint),\n\t\t\t\t'mapHome', Utils.getString16Reader(),\n\t\t\t\t'homeSave' , 'uint8',\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12, ReferencedFunction: 0x5EABE0\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.MapEditLayerItem =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'moduleId' , 'uint32',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerStates', ['[]', 'uint8', 31],\n\t\t\t\t'layerNames', ['[]', Utils.getString16Reader(), 31],\n\t\t\t\t'items', Utils.getArrayReader(this.MapEditLayerItem),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'dirtyFlags' , 'uint32',\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditSnapPoint =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'moduleId' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'snapPoints', Utils.getArrayReader(this.MapEditSnapPoint),\n\t\t\t\t'mapHome', Utils.getString16Reader(),\n\t\t\t\t'homeSave' , 'uint8',\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.MapEditLayerItem =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'moduleId' , 'uint32',\n\t\t\t\t'layerFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerStates', ['[]', 'uint8', 31],\n\t\t\t\t'layerNames', ['[]', Utils.getString16Reader(), 31],\n\t\t\t\t'items', Utils.getArrayReader(this.MapEditLayerItem),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'dirtyFlags' , 'uint32',\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditSnapPoint =[\n\t\t\t\t'guid', Utils.getQWordReader(),\n\t\t\t\t'moduleId' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'scale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'snapPoints', Utils.getArrayReader(this.MapEditSnapPoint),\n\t\t\t\t'mapHome', Utils.getString16Reader(),\n\t\t\t\t'homeSave' , 'uint8',\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerPropCount', ['[]', 'uint32', 31],\n\t\t\t\t'layerStates', ['[]', 'uint8', 31],\n\t\t\t\t'layerNames', ['[]', Utils.getString16Reader(), 31],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'dirtyFlags' , 'uint32',\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'mapHome', Utils.getString16Reader(),\n\t\t\t\t'homeSave' , 'uint8',\n\t\t\t\t'reserved', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerPropCount', ['[]', 'uint32', 31],\n\t\t\t\t'layerStates', ['[]', 'uint8', 31],\n\t\t\t\t'layerNames', ['[]', Utils.getString16Reader(), 31],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'dirtyFlags' , 'uint32',\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'mapHome', Utils.getString16Reader(),\n\t\t\t\t'homeSave' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerPropCount', ['[]', 'uint32', 31],\n\t\t\t\t'layerStates', ['[]', 'uint8', 31],\n\t\t\t\t'layerNames', ['[]', Utils.getString16Reader(), 31],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'dirtyFlags' , 'uint32',\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerPropCount', ['[]', 'uint32', 31],\n\t\t\t\t'layerStates', ['[]', 'uint8', 31],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'zRange' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'dirtyFlags' , 'uint32',\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.MapEditRegion =[\n\t\t\t\t'regions', Utils.getArrayReader(Utils.getString16Reader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditRegion =[\n\t\t\t\t'ambientColor', ['[]', 'uint8', 3],\n\t\t\t\t'directionalColor', ['[]', 'uint8', 3],\n\t\t\t\t'ambientIntenisty' , 'float32',\n\t\t\t\t'directionalIntenisty' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerPropCount', ['[]', 'uint32', 31],\n\t\t\t\t'layerStates', ['[]', 'uint8', 31],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'dirtyFlags' , 'uint32',\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'regions', this.MapEditRegion,\n\t\t\t\t'miniMapParams', this.MapEditRegion,\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5, ReferencedFunction: 0x5EABE0\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.MapEditRegion =[\n\t\t\t\t'regions', Utils.getArrayReader(Utils.getString16Reader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditRegion =[\n\t\t\t\t'ambientColor', ['[]', 'uint8', 3],\n\t\t\t\t'directionalColor', ['[]', 'uint8', 3],\n\t\t\t\t'ambientIntenisty' , 'float32',\n\t\t\t\t'directionalIntenisty' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerPropCount', ['[]', 'uint32', 31],\n\t\t\t\t'layerStates', ['[]', 'uint8', 31],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditDirtyChunks =[\n\t\t\t\t'dirtyFlags' , 'uint32',\n\t\t\t\t'chunkCoord', ['[]', 'uint32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'regions', this.MapEditRegion,\n\t\t\t\t'miniMapParams', this.MapEditRegion,\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4, ReferencedFunction: 0x5EABE0\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.MapEditRegion =[\n\t\t\t\t'regions', Utils.getArrayReader(Utils.getString16Reader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditRegion =[\n\t\t\t\t'ambientColor', ['[]', 'uint8', 3],\n\t\t\t\t'directionalColor', ['[]', 'uint8', 3],\n\t\t\t\t'ambientIntenisty' , 'float32',\n\t\t\t\t'directionalIntenisty' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerPropCount', ['[]', 'uint32', 31],\n\t\t\t\t'layerStates', ['[]', 'uint8', 31],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'regions', this.MapEditRegion,\n\t\t\t\t'miniMapParams', this.MapEditRegion,\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.MapEditRegion =[\n\t\t\t\t'regions', Utils.getArrayReader(Utils.getString16Reader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditRegion =[\n\t\t\t\t'ambientColor', ['[]', 'uint8', 3],\n\t\t\t\t'directionalColor', ['[]', 'uint8', 3],\n\t\t\t\t'ambientIntenisty' , 'float32',\n\t\t\t\t'directionalIntenisty' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditLayers =[\n\t\t\t\t'layerStates', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotation =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'anchors', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapEditAnnotations =[\n\t\t\t\t'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.MapEditCamLocations =[\n\t\t\t\t'attack' , 'float32',\n\t\t\t\t'rotation' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapEditData =[\n\t\t\t\t'regions', this.MapEditRegion,\n\t\t\t\t'miniMapParams', this.MapEditRegion,\n\t\t\t\t'layers', this.MapEditLayers,\n\t\t\t\t'annotations', this.PackMapEditAnnotations,\n\t\t\t\t'camLocations', Utils.getArrayReader(this.MapEditCamLocations),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: dcal, versions: 10, strucTab: 0x1581508 \n\t///==================================================\n\t{\n\t\tname:'dcal',\n\t\tversions:{\n\n\n\t\t\t// => Version: 9, ReferencedFunction: 0xFFCCC0\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.PackMapDecalVertexV8 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'normal' , ['[]','float32',3],\n\t\t\t\t'tangent' , ['[]','float32',3],\n\t\t\t\t'bitangent' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapDecalV9 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'textureScaleUV0' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV0' , ['[]','float32',2],\n\t\t\t\t'textureScaleUV1' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV1' , ['[]','float32',2],\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animTranslation' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeX' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeY' , ['[]','float32',2],\n\t\t\t\t'animScaleSpeed' , ['[]','float32',2],\n\t\t\t\t'animRotation' , 'float32',\n\t\t\t\t'surfaceBias' , 'float32',\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'vertices', Utils.getArrayReader(this.PackMapDecalVertexV8),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'propIds', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'projection' , 'uint8',\n\t\t\t\t'surfaceId', Utils.getQWordReader(),\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapDecalsV9 =[\n\t\t\t\t'decals', Utils.getArrayReader(this.PackMapDecalV9),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.PackMapDecalVertexV7 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapDecalV8 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'textureScaleUV0' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV0' , ['[]','float32',2],\n\t\t\t\t'textureScaleUV1' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV1' , ['[]','float32',2],\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animTranslation' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeX' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeY' , ['[]','float32',2],\n\t\t\t\t'animScaleSpeed' , ['[]','float32',2],\n\t\t\t\t'animRotation' , 'float32',\n\t\t\t\t'surfaceBias' , 'float32',\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'vertices', Utils.getArrayReader(this.PackMapDecalVertexV7),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'propIds', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'projection' , 'uint8',\n\t\t\t\t'surfaceId', Utils.getQWordReader(),\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapDecalsV8 =[\n\t\t\t\t'decals', Utils.getArrayReader(this.PackMapDecalV8),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7, ReferencedFunction: 0xFFCC60\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.PackMapDecalVertexV6 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapDecalV7 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'textureScaleUV0' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV0' , ['[]','float32',2],\n\t\t\t\t'textureScaleUV1' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV1' , ['[]','float32',2],\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animTranslation' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeX' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeY' , ['[]','float32',2],\n\t\t\t\t'animScaleSpeed' , ['[]','float32',2],\n\t\t\t\t'animRotation' , 'float32',\n\t\t\t\t'surfaceBias' , 'float32',\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'vertices', Utils.getArrayReader(this.PackMapDecalVertexV6),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'propIds', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'projection' , 'uint8',\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapDecalsV7 =[\n\t\t\t\t'decals', Utils.getArrayReader(this.PackMapDecalV7),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.PackMapDecalVertexV5 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapDecalV6 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'textureScaleUV0' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV0' , ['[]','float32',2],\n\t\t\t\t'textureScaleUV1' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV1' , ['[]','float32',2],\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animTranslation' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeX' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeY' , ['[]','float32',2],\n\t\t\t\t'animScaleSpeed' , ['[]','float32',2],\n\t\t\t\t'animRotation' , 'float32',\n\t\t\t\t'surfaceBias' , 'float32',\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'vertices', Utils.getArrayReader(this.PackMapDecalVertexV5),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'propIds', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'projection' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapDecalsV6 =[\n\t\t\t\t'decals', Utils.getArrayReader(this.PackMapDecalV6),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.PackMapDecalVertexV4 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackMapDecalV5 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'textureScaleUV0' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV0' , ['[]','float32',2],\n\t\t\t\t'textureScaleUV1' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV1' , ['[]','float32',2],\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animTranslation' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeX' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeY' , ['[]','float32',2],\n\t\t\t\t'animScaleSpeed' , ['[]','float32',2],\n\t\t\t\t'animRotation' , 'float32',\n\t\t\t\t'surfaceBias' , 'float32',\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t'vertices', Utils.getArrayReader(this.PackMapDecalVertexV4),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'propIds', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapDecalsV5 =[\n\t\t\t\t'decals', Utils.getArrayReader(this.PackMapDecalV5),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.PackMapDecalV4 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'textureScaleUV0' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV0' , ['[]','float32',2],\n\t\t\t\t'textureScaleUV1' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV1' , ['[]','float32',2],\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animTranslation' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeX' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeY' , ['[]','float32',2],\n\t\t\t\t'animScaleSpeed' , ['[]','float32',2],\n\t\t\t\t'animRotation' , 'float32',\n\t\t\t\t'surfaceBias' , 'float32',\n\t\t\t\t'constantTokens', Utils.getArrayReader('uint32'),\n\t\t\t\t'constantValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapDecalsV4 =[\n\t\t\t\t'decals', Utils.getArrayReader(this.PackMapDecalV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3, ReferencedFunction: 0xFFCBE0\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PackMapDecalV3 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'textureScaleUV0' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV0' , ['[]','float32',2],\n\t\t\t\t'textureScaleUV1' , ['[]','float32',2],\n\t\t\t\t'textureOffsetUV1' , ['[]','float32',2],\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animTranslation' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeX' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeY' , ['[]','float32',2],\n\t\t\t\t'animScaleSpeed' , ['[]','float32',2],\n\t\t\t\t'animRotation' , 'float32',\n\t\t\t\t'surfaceBias' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapDecalsV3 =[\n\t\t\t\t'decals', Utils.getArrayReader(this.PackMapDecalV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackMapDecalV2 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'textureScale' , ['[]','float32',2],\n\t\t\t\t'textureOffset' , ['[]','float32',2],\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'animTranslation' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeX' , ['[]','float32',2],\n\t\t\t\t'animScaleRangeY' , ['[]','float32',2],\n\t\t\t\t'animScaleSpeed' , ['[]','float32',2],\n\t\t\t\t'animRotation' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapDecalsV2 =[\n\t\t\t\t'decals', Utils.getArrayReader(this.PackMapDecalV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackMapDecalV1 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'extents' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',3],\n\t\t\t\t'textureScale' , ['[]','float32',2],\n\t\t\t\t'textureOffset' , ['[]','float32',2],\n\t\t\t\t'materialFilename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapDecalsV1 =[\n\t\t\t\t'decals', Utils.getArrayReader(this.PackMapDecalV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: exp, versions: 1, strucTab: 0x157D700 \n\t///==================================================\n\t{\n\t\tname:'exp',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.MapExpansionProperty =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.MapExpansionProperties =[\n\t\t\t\t'properties', Utils.getArrayReader(this.MapExpansionProperty),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: nvms, versions: 3, strucTab: 0x1580D3C \n\t///==================================================\n\t{\n\t\tname:'nvms',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.__root=this.PackMapNavMeshChunkV2 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'queryMediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1, ReferencedFunction: 0xFFCEE0\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.__root=this.PackMapNavMeshChunkV1 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'queryMediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.PackMapNavMeshChunkV0 =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'queryMediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: MODL, versions: 66, strucTab: 0x15CFF08 \n\t///==================================================\n\t{\n\t\tname:'MODL',\n\t\tversions:{\n\n\n\t\t\t// => Version: 65, ReferencedFunction: 0x106D490\n\t\t\t65:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV65 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV65 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV65 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV65 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV65 =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t'scrollFreq' , ['[]','float32',2],\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'scaleFreq' , ['[]','float32',2],\n\t\t\t\t'rotate' , 'float32',\n\t\t\t\t'rotate' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV65 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV65),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV65),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV65),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV65),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV65),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV65 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV65),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV65 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV65 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV65 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V65 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV65 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'affinity' , 'uint32',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV65),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV65),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV65),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V65),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV65 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV65),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV65),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV65 =[\n\t\t\t\t'affinity' , 'uint32',\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V65),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV65 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV65 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV65 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV65),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV65),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV65 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV65 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV65),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV65 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV65 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV65),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothGroupBindingV65 =[\n\t\t\t\t'strippedToken', Utils.getQWordReader(),\n\t\t\t\t'boneName', Utils.getStringReader(),\n\t\t\t\t'OBBMin' , ['[]','float32',3],\n\t\t\t\t'OBBMax' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV65 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV65 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV65 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV65),\n\t\t\t\t'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV65),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV65),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV65),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV65),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lockedNormals', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedTanegents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedBitangents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'translateWeight' , 'float32',\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectWindV65 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelWindDataV65 =[\n\t\t\t\t'effectWind', Utils.getArrayReader(this.ModelEffectWindV65),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV65 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV65 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV65),\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'frequency' , 'float32',\n\t\t\t\t'groupMax' , 'uint32',\n\t\t\t\t'groupMin' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texRange' , ['[]','float32',2],\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'thicknessRange' , ['[]','float32',2],\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV65 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV65 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV65),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV65),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV65),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV65 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV65 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoundingSphereV65 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV65 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV65),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV65),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV65),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV65),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV65),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV65),\n\t\t\t\t'windData', Utils.getPointerReader(this.ModelWindDataV65),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV65),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV65),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV65),\n\t\t\t\t'boundingSphere', Utils.getPointerReader(this.ModelBoundingSphereV65),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 64\n\t\t\t64:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV64 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV64 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV64 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV64 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV64 =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t'scrollFreq' , ['[]','float32',2],\n\t\t\t\t'scale' , ['[]','float32',2],\n\t\t\t\t'scaleFreq' , ['[]','float32',2],\n\t\t\t\t'rotate' , 'float32',\n\t\t\t\t'rotate' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV64 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV64),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV64),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV64),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV64),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV64),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV64 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV64 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV64 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV64 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV64),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV64),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV64 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV64),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV64),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV64 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV64 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV64 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V64 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV64 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'affinity' , 'uint32',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV64),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV64),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV64),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V64),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV64 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV64),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV64 =[\n\t\t\t\t'affinity' , 'uint32',\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV64 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV64 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV64 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV64),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV64 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV64 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV64 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV64 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothGroupBindingV64 =[\n\t\t\t\t'strippedToken', Utils.getQWordReader(),\n\t\t\t\t'boneName', Utils.getStringReader(),\n\t\t\t\t'OBBMin' , ['[]','float32',3],\n\t\t\t\t'OBBMax' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV64 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV64 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV64 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV64),\n\t\t\t\t'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV64),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV64),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV64),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV64),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lockedNormals', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedTanegents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedBitangents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'translateWeight' , 'float32',\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectWindV64 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelWindDataV64 =[\n\t\t\t\t'effectWind', Utils.getArrayReader(this.ModelEffectWindV64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV64 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV64 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV64),\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'frequency' , 'float32',\n\t\t\t\t'groupMax' , 'uint32',\n\t\t\t\t'groupMin' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texRange' , ['[]','float32',2],\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'thicknessRange' , ['[]','float32',2],\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV64 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV64 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV64),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV64),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV64),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV64 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV64 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoundingSphereV64 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV64 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV64),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV64),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV64),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV64),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV64),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV64),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV64),\n\t\t\t\t'windData', Utils.getPointerReader(this.ModelWindDataV64),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV64),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV64),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV64),\n\t\t\t\t'boundingSphere', Utils.getPointerReader(this.ModelBoundingSphereV64),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 63, ReferencedFunction: 0x106D3D0\n\t\t\t63:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV63 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV63 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV63 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV63 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV63 =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV63 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV63),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV63),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV63),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV63),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV63),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV63 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV63 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV63 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV63 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV63),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV63),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV63 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV63),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV63),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV63 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV63 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV63 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V63 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV63 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'affinity' , 'uint32',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV63),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV63),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV63),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V63),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV63 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV63),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV63 =[\n\t\t\t\t'affinity' , 'uint32',\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV63 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV63 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV63 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV63),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV63 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV63 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV63 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV63 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothGroupBindingV63 =[\n\t\t\t\t'strippedToken', Utils.getQWordReader(),\n\t\t\t\t'boneName', Utils.getStringReader(),\n\t\t\t\t'OBBMin' , ['[]','float32',3],\n\t\t\t\t'OBBMax' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV63 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV63 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV63 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV63),\n\t\t\t\t'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV63),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV63),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV63),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV63),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lockedNormals', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedTanegents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedBitangents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'translateWeight' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectWindV63 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelWindDataV63 =[\n\t\t\t\t'effectWind', Utils.getArrayReader(this.ModelEffectWindV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV63 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV63 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV63),\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'frequency' , 'float32',\n\t\t\t\t'groupMax' , 'uint32',\n\t\t\t\t'groupMin' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texRange' , ['[]','float32',2],\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'thicknessRange' , ['[]','float32',2],\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV63 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV63 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV63),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV63),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV63 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV63 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoundingSphereV63 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV63 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV63),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV63),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV63),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV63),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV63),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV63),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV63),\n\t\t\t\t'windData', Utils.getPointerReader(this.ModelWindDataV63),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV63),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV63),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV63),\n\t\t\t\t'boundingSphere', Utils.getPointerReader(this.ModelBoundingSphereV63),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 62, ReferencedFunction: 0x106D2B0\n\t\t\t62:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV62 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV62 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV62 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV62 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV62 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV62 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV62),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV62),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV62),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV62),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV62),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV62 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV62 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV62 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV62 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV62),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV62),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV62 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV62),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV62),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV62 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV62 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV62 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V62 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV62 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'affinity' , 'uint32',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV62),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV62),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV62),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V62),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV62 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV62),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV62 =[\n\t\t\t\t'affinity' , 'uint32',\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV62 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV62 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV62 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV62),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV62 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV62 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV62 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV62 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothGroupBindingV62 =[\n\t\t\t\t'strippedToken', Utils.getQWordReader(),\n\t\t\t\t'boneName', Utils.getStringReader(),\n\t\t\t\t'OBBMin' , ['[]','float32',3],\n\t\t\t\t'OBBMax' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV62 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV62 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV62 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV62),\n\t\t\t\t'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV62),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV62),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV62),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV62),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lockedNormals', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedTanegents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedBitangents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'translateWeight' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectWindV62 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelWindDataV62 =[\n\t\t\t\t'effectWind', Utils.getArrayReader(this.ModelEffectWindV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV62 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV62 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV62),\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'frequency' , 'float32',\n\t\t\t\t'groupMax' , 'uint32',\n\t\t\t\t'groupMin' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texRange' , ['[]','float32',2],\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'thicknessRange' , ['[]','float32',2],\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV62 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV62 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV62),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV62),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV62 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV62 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoundingSphereV62 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV62 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV62),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV62),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV62),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV62),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV62),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV62),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV62),\n\t\t\t\t'windData', Utils.getPointerReader(this.ModelWindDataV62),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV62),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV62),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV62),\n\t\t\t\t'boundingSphere', Utils.getPointerReader(this.ModelBoundingSphereV62),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 61, ReferencedFunction: 0x106D250\n\t\t\t61:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV61 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV61 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV61 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV61 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV61 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV61 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV61),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV61),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV61),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV61),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV61),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV61 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV61 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV61 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV61 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV61),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV61),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV61 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV61),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV61),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV61 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV61 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV61,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneSymmetryV61 =[\n\t\t\t\t'boneLeft', Utils.getQWordReader(),\n\t\t\t\t'boneRight', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV61 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV61),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV61 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV61 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV61 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV61),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV61,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV61),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV61),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV61 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV61 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV61 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV61 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V61 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV61 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'affinity' , 'uint32',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV61),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV61),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV61),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V61),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV61 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV61),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV61 =[\n\t\t\t\t'affinity' , 'uint32',\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV61 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV61 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV61 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV61),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV61 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV61 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV61 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV61 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothGroupBindingV61 =[\n\t\t\t\t'strippedToken', Utils.getQWordReader(),\n\t\t\t\t'boneName', Utils.getStringReader(),\n\t\t\t\t'OBBMin' , ['[]','float32',3],\n\t\t\t\t'OBBMax' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV61 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV61 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV61 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV61),\n\t\t\t\t'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV61),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV61),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV61),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV61),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lockedNormals', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedTanegents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedBitangents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectWindV61 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelWindDataV61 =[\n\t\t\t\t'effectWind', Utils.getArrayReader(this.ModelEffectWindV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV61 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV61 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV61),\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'frequency' , 'float32',\n\t\t\t\t'groupMax' , 'uint32',\n\t\t\t\t'groupMin' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texRange' , ['[]','float32',2],\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'thicknessRange' , ['[]','float32',2],\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV61 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV61 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV61),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV61),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV61),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV61 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV61 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV61),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV61 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV61 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFixedOffsetDataV61 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'parentBone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV61 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV61),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV61),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV61),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV61),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV61),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV61),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV61),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV61),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV61),\n\t\t\t\t'windData', Utils.getPointerReader(this.ModelWindDataV61),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV61),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV61),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV61),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV61),\n\t\t\t\t'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetDataV61),\n\t\t\t\t'modelReference' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 60, ReferencedFunction: 0x106CE50\n\t\t\t60:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV60 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV60 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV60 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV60 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV60 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV60 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV60),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV60),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV60),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV60),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV60),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV60 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV60 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV60 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV60 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV60),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV60),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV60 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV60),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV60),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV60 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV60 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV60,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneSymmetryV60 =[\n\t\t\t\t'boneLeft', Utils.getQWordReader(),\n\t\t\t\t'boneRight', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV60 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV60),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV60 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV60 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV60 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV60),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV60,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV60),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV60),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV60 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV60 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV60 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV60 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V60 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV60 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV60),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV60),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV60),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V60),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV60 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV60),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV60 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV60 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV60 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV60 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV60),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV60 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV60 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV60 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV60 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothGroupBindingV60 =[\n\t\t\t\t'strippedToken', Utils.getQWordReader(),\n\t\t\t\t'boneName', Utils.getStringReader(),\n\t\t\t\t'OBBMin' , ['[]','float32',3],\n\t\t\t\t'OBBMax' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV60 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV60 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV60 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV60),\n\t\t\t\t'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV60),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV60),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV60),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV60),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lockedNormals', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedTanegents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedBitangents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV60 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV60 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV60),\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'frequency' , 'float32',\n\t\t\t\t'groupMax' , 'uint32',\n\t\t\t\t'groupMin' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texRange' , ['[]','float32',2],\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'thicknessRange' , ['[]','float32',2],\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV60 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV60 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV60),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV60),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV60),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV60 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV60 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV60),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV60 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV60 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFixedOffsetDataV60 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'parentBone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV60 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV60),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV60),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV60),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV60),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV60),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV60),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV60),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV60),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV60),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV60),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV60),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV60),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV60),\n\t\t\t\t'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetDataV60),\n\t\t\t\t'modelReference' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 59, ReferencedFunction: 0x106CE00\n\t\t\t59:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV59 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV59 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV59 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV59 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV59 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV59 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV59),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV59),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV59),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV59),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV59),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV59 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV59 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV59 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV59 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV59),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV59),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV59 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV59),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV59),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV59 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV59 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV59,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneSymmetryV59 =[\n\t\t\t\t'boneLeft', Utils.getQWordReader(),\n\t\t\t\t'boneRight', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV59 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV59),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV59 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV59 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV59 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV59),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV59,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV59),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV59),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV59 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV59 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV59 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV59 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V59 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV59 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV59),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV59),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV59),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V59),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV59 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV59),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV59 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV59 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV59 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV59 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV59),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV59 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV59 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV59 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV59 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV59 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV59 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV59 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV59),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV59),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV59),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV59),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lockedNormals', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedTanegents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedBitangents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV59 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV59 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV59),\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'frequency' , 'float32',\n\t\t\t\t'groupMax' , 'uint32',\n\t\t\t\t'groupMin' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texRange' , ['[]','float32',2],\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'thicknessRange' , ['[]','float32',2],\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV59 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV59 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV59),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV59),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV59),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV59 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV59 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV59),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV59 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV59 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFixedOffsetDataV59 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'parentBone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV59 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV59),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV59),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV59),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV59),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV59),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV59),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV59),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV59),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV59),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV59),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV59),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV59),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV59),\n\t\t\t\t'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetDataV59),\n\t\t\t\t'modelReference' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 58, ReferencedFunction: 0x106CD10\n\t\t\t58:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV58 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV58 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV58 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV58 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV58 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV58 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV58),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV58),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV58),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV58),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV58),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV58 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV58 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV58 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV58 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV58),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV58),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV58 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV58),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV58),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV58 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV58 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV58,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneSymmetryV58 =[\n\t\t\t\t'boneLeft', Utils.getQWordReader(),\n\t\t\t\t'boneRight', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV58 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV58),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV58 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV58 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV58 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV58),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV58,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV58),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV58),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV58 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV58 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV58 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV58 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V58 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV58 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV58),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV58),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV58),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V58),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV58 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV58),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV58 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV58 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV58 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV58 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV58),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV58 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV58 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV58 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV58 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV58 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV58 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV58 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV58),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV58),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV58),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV58),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lockedNormals', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedTanegents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockedBitangents', Utils.getArrayReader('uint32'),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV58 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV58 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV58),\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'frequency' , 'float32',\n\t\t\t\t'groupMax' , 'uint32',\n\t\t\t\t'groupMin' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'thicknessRange' , ['[]','float32',2],\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV58 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV58 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV58),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV58),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV58),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV58 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV58 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV58),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV58 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV58 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFixedOffsetDataV58 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'parentBone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV58 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV58),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV58),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV58),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV58),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV58),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV58),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV58),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV58),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV58),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV58),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV58),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV58),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV58),\n\t\t\t\t'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetDataV58),\n\t\t\t\t'modelReference' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 57\n\t\t\t57:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV57 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV57 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV57 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV57 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV57 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV57 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV57),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV57),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV57),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV57),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV57),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV57 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV57 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV57 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV57 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV57),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV57),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV57 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV57),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV57),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV57 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV57 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV57,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneSymmetryV57 =[\n\t\t\t\t'boneLeft', Utils.getQWordReader(),\n\t\t\t\t'boneRight', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV57 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV57),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV57 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV57 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV57 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV57),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV57,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV57),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV57),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV57 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV57 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV57 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV57 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V57 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV57 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV57),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV57),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV57),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V57),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV57 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV57),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV57 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV57 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV57 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV57 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV57),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV57 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV57 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV57 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV57 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV57 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV57 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV57 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV57),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV57),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV57),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV57),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV57 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV57 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV57 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV57 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV57),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV57),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV57),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV57 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV57 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV57),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV57 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV57 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFixedOffsetDataV57 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'parentBone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV57 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV57),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV57),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV57),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV57),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV57),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV57),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV57),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV57),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV57),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV57),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV57),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV57),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV57),\n\t\t\t\t'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetDataV57),\n\t\t\t\t'modelReference' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 56\n\t\t\t56:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV56 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV56 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV56 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV56 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV56 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV56 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV56),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV56),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV56),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV56),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV56),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV56 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV56 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV56 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV56 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV56),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV56),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV56 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV56),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV56),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV56 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV56 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV56,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneSymmetryV56 =[\n\t\t\t\t'boneLeft', Utils.getQWordReader(),\n\t\t\t\t'boneRight', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV56 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV56),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV56 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV56 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV56 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV56),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV56,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV56),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV56),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV56 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV56 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV56 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV56 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V56 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV56 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV56),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV56),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV56),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V56),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV56 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV56),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV56 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV56 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV56 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV56 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV56),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV56 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV56 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV56 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV56 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV56 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV56 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV56 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV56),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV56),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV56),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV56),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV56 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV56 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV56 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV56 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV56),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV56),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV56),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV56 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV56 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV56),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV56 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV56 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV56 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV56),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV56),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV56),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV56),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV56),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV56),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV56),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV56),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV56),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV56),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV56),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV56),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV56),\n\t\t\t\t'modelReference' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 55, ReferencedFunction: 0x106CC30\n\t\t\t55:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV55 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV55 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV55 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV55 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV55 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV55 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV55),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV55),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV55),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV55),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV55),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV55 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV55 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV55 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV55 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV55),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV55),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV55 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV55),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV55),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV55 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV55 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV55,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneSymmetryV55 =[\n\t\t\t\t'boneLeft', Utils.getQWordReader(),\n\t\t\t\t'boneRight', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV55 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV55),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV55 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV55 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV55 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV55),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV55,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV55),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV55),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV55 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV55 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV55 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV55 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V55 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV55 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV55),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV55),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV55),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V55),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV55 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV55),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV55 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV55 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV55 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV55 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV55),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV55 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV55 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV55 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV55 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV55 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV55 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV55 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV55),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV55),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV55),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV55),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV55 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV55 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV55 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV55 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV55),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV55),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV55),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV55 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV55 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV55),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV55 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV55 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'boneInverseOffset', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV55 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV55),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV55),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV55),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV55),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV55),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV55),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV55),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV55),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV55),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV55),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV55),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV55),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV55),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 54\n\t\t\t54:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV54 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV54 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV54 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV54 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV54 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV54 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV54),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV54),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV54),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV54),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV54),\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV54 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV54 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV54 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV54 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV54),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV54),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV54 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV54),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV54),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV54 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV54 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV54,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneSymmetryV54 =[\n\t\t\t\t'boneLeft', Utils.getQWordReader(),\n\t\t\t\t'boneRight', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV54 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV54),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV54 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV54 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV54 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV54),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV54,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV54),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV54),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV54 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV54 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV54 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV54 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V54 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV54 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV54),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV54),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV54),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V54),\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV54 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV54),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV54 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV54 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV54 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV54 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV54),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV54 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV54 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV54 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV54 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV54 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV54 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV54 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'slack' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV54),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV54),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV54),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV54),\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV54 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV54 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV54 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV54 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV54),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV54),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV54),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV54 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV54 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV54),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV54 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV54 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV54 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV54),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV54),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV54),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV54),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV54),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV54),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV54),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV54),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV54),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV54),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV54),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV54),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV54),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 53, ReferencedFunction: 0x106C930\n\t\t\t53:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV53 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV53 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV53 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV53 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV53 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV53 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV53),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV53),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV53),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV53),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV53 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV53 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV53 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV53 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV53),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV53),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV53 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV53),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV53),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV53 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV53 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV53,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV53 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV53),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV53 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV53 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV53 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV53),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV53,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV53),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV53),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV53 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV53 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV53 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV53 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV53 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV53),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV53),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV53),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV53 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV53),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatrix43V53 =[\n\t\t\t\t'x' , ['[]','float32',4],\n\t\t\t\t'y' , ['[]','float32',4],\n\t\t\t\t'z' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV53 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'length' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'transform', Utils.getPointerReader(this.ModelMatrix43V53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV53 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV53 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV53 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV53),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV53 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV53 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV53 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV53 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV53 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV53 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV53 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV53),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV53),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV53),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV53),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV53 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV53 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV53 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV53 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV53),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV53),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV53),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV53 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV53 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV53),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV53 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV53 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV53 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV53),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV53),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV53),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV53),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV53),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV53),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV53),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV53),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV53),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV53),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV53),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV53),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV53),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 52, ReferencedFunction: 0x106C7E0\n\t\t\t52:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV52 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV52 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV52 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV52 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV52 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV52 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV52),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV52),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV52),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV52),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV52 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV52 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV52 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV52 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV52),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV52),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV52 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV52),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV52),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV52 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV52 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV52,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV52 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV52),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV52 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV52 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV52 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV52),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV52,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV52),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV52),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV52 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV52 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV52 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV52 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV52 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV52),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV52),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV52),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV52 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV52),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV52 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV52 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV52 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV52 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV52),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV52 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV52 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV52 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV52 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothSoftLockV52 =[\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t'vertIndex', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV52 =[\n\t\t\t\t'distance', 'uint16',\n\t\t\t\t'relationship', 'uint16',\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV52 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV52 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'compressibility' , 'float32',\n\t\t\t\t'stretchiness' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV52),\n\t\t\t\t'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV52),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV52),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV52),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV52 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV52 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV52 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV52 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV52),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV52),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV52),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV52 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV52 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV52),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV52 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV52 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'offset' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV52 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV52),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV52),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV52),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV52),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV52),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV52),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV52),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV52),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV52),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV52),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV52),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV52),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV52),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 51, ReferencedFunction: 0x106C560\n\t\t\t51:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV51 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV51 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV51 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV51 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV51 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV51 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV51),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV51),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV51),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV51),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPermutationDataV51 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV51 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV51 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV51 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV51),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV51),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV51 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV51),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV51),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV51 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV51 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV51,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV51 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV51),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV51 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV51 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV51 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV51),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV51,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV51),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV51),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV51 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV51 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV51 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV51 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV51 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV51),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV51),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV51),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV51 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV51),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV51 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV51 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV51 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV51 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV51),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV51 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV51 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV51 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV51 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV51 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV51 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'depth' , 'float32',\n\t\t\t\t'height' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'width' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV51 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV51),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV51),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV51),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV51 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV51 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV51 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , ['[]','float32',2],\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV51 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV51),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV51),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV51),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV51 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV51 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV51),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV51 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV51 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'offset' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV51 =[\n\t\t\t\t'permutations', Utils.getArrayReader(this.ModelPermutationDataV51),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV51),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV51),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV51),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV51),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV51),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV51),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV51),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV51),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV51),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV51),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV51),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV51),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 50, ReferencedFunction: 0x106C520\n\t\t\t50:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV50 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV50 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV50 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV50 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV50 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV50 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV50),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV50),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV50),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV50),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV50),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV50 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV50 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV50 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV50),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV50),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV50 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV50),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV50),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV50 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV50 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV50,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV50 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV50),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV50 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV50 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV50 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV50),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV50,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV50),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV50),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV50 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV50 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV50 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV50 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV50 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV50),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV50),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV50),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV50 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV50),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV50),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV50 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV50 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV50 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV50 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV50),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV50),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV50 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV50 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV50),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV50 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV50 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV50),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV50 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV50 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV50 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV50),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV50),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV50),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV50),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV50 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV50 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV50 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV50 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV50),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV50),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV50),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV50 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV50 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV50),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV50 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV50 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'offset' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV50 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV50),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV50),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV50),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV50),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV50),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV50),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV50),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV50),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV50),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV50),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV50),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV50),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV50),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 49\n\t\t\t49:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV49 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV49 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV49 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV49 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV49 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV49 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV49),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV49),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV49),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV49),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV49),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV49 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV49 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV49 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV49),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV49),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV49 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV49),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV49),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV49 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV49 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV49,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV49 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV49),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV49 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV49 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV49 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV49),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV49,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV49),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV49),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV49 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV49 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV49 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV49 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV49 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV49),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV49),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV49),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV49 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV49),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV49),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV49 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV49 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV49 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV49 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV49),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV49),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV49 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV49 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV49),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV49 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV49 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV49),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV49 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV49 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV49 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV49),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV49),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV49),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV49),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV49 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV49 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV49 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV49 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV49),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV49),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV49),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV49 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV49 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV49),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV49 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneOffsetDataV49 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'offset' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV49 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV49),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV49),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV49),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV49),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV49),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV49),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV49),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV49),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV49),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV49),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV49),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV49),\n\t\t\t\t'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV49),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 48, ReferencedFunction: 0x106BD20\n\t\t\t48:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV48 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV48 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV48 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV48 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV48 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV48 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV48),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV48),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV48),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV48),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV48),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV48 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV48 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV48 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV48),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV48),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV48 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV48),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV48),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV48 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV48 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV48,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV48 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV48),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV48 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV48 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV48 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV48),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV48,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV48),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV48),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV48 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV48 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV48 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV48 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV48 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV48),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV48),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV48),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV48 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV48),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV48),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV48 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV48 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV48 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV48 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV48),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV48),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV48 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV48 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV48),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV48 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV48 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV48),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV48 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV48 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV48 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV48),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV48),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV48),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV48),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV48 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV48 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV48 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV48 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV48),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV48),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV48),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV48 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV48 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV48),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV48 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV48 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV48),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV48),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV48),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV48),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV48),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV48),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV48),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV48),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV48),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV48),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV48),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV48),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 47, ReferencedFunction: 0x106BAA0\n\t\t\t47:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV47 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV47 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV47 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV47 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV47 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV47 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV47),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV47),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV47),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV47),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV47),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV47 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphVertV47 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV47 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV47),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV47),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV47 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV47),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV47),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV47 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV47 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV47,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV47 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV47),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV47 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV47 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV47 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV47),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV47,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV47),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV47),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV47 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV47 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV47 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV47 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV47 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV47),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV47),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV47),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV47 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV47),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV47),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV47 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV47 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV47 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV47 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV47),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV47),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV47 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV47 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV47),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV47 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV47 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV47),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV47 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV47 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV47 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV47),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV47),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV47),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV47),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV47 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV47 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV47 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV47 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV47),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV47),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV47),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV47 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV47 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV47),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV47 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV47 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV47),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV47),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV47),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV47),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV47),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV47),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV47),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV47),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV47),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV47),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV47),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV47),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 46, ReferencedFunction: 0x106BA10\n\t\t\t46:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV46 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV46 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV46 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV46 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV46 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV46 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV46),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV46),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV46),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV46),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV46 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV46 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV46 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV46),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV46),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV46 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV46 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV46,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV46 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV46),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV46 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV46 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV46 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV46),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV46,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV46),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV46),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV46 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV46 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV46 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV46 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV46 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV46),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV46),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV46),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV46 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV46),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV46 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV46 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV46 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV46 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV46),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV46 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV46 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV46 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV46 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV46 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV46 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV46 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV46),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV46),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV46),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV46 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV46 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV46 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV46 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV46),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV46),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV46),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV46 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV46 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV46),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV46 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV46 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV46),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV46),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV46),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV46),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV46),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV46),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV46),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV46),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV46),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV46),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV46),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV46),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 45\n\t\t\t45:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV45 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV45 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV45 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV45 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialTexTransformV45 =[\n\t\t\t\t'random' , 'uint8',\n\t\t\t\t'uvIndex' , 'uint8',\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'count', 'uint16',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'scroll' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV45 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV45),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV45),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV45),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV45),\n\t\t\t\t'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV45 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV45 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV45 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV45),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV45),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV45 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV45 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV45,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV45 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV45),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV45 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV45 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV45 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV45),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV45,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV45),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV45),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV45 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV45 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV45 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV45 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV45 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV45),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV45),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV45),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV45 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV45),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV45 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV45 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV45 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV45 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV45),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV45 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV45 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV45 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV45 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV45 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV45 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV45 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV45),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV45),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV45),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV45 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV45 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV45 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV45 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV45),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV45),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV45),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV45 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV45 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV45),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV45 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV45 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV45),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV45),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV45),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV45),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV45),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV45),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV45),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV45),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV45),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV45),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV45),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV45),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 44, ReferencedFunction: 0x106B850\n\t\t\t44:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV44 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV44 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV44 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV44 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV44 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV44),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV44),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV44),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV44 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV44 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV44 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV44),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV44),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV44 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV44 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV44,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV44 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV44),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV44 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV44 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV44 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV44),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV44,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV44),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV44),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV44 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV44 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV44 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV44 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV44 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV44),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV44),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV44),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV44 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV44),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV44 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV44 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV44 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV44 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV44),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV44 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV44 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV44 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV44 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV44 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV44 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV44 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV44),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV44),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV44),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV44 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV44 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV44 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV44 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV44),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV44),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV44),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV44 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV44 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV44),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV44 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV44 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV44),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV44),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV44),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV44),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV44),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV44),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV44),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV44),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV44),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV44),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV44),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV44),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 43\n\t\t\t43:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV43 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV43 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV43 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV43 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV43 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV43),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV43),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV43),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV43 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV43 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV43 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV43),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV43),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV43 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV43 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV43,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV43 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV43),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV43 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV43 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV43 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV43),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV43,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV43),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV43),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV43 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV43 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV43 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV43 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV43 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV43),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV43),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV43),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV43 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV43),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV43 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV43 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV43 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV43 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV43),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV43 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV43 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV43 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV43 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV43 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV43 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV43 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV43),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV43),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV43),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV43 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV43 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV43 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV43 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV43),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV43),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV43),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV43 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV43 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV43),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV43 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV43 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV43),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV43),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV43),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV43),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV43),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV43),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV43),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV43),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV43),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV43),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV43),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV43),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 42\n\t\t\t42:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV42 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV42 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV42 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV42 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV42 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV42),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV42),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV42),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV42 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV42 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV42 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV42),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV42),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV42 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV42 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV42,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV42 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV42),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV42 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV42 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV42 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV42),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV42,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV42),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV42),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV42 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV42 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV42 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV42 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV42 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV42),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV42),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV42),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV42 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV42),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV42 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV42 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV42 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV42 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV42),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV42 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV42 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV42 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV42 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV42 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV42 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV42 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV42),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV42),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV42),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV42 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV42 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV42 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV42 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV42),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV42),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV42),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV42 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV42 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV42),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV42 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV42 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV42),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV42),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV42),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV42),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV42),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV42),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV42),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV42),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV42),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV42),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV42),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV42),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 41\n\t\t\t41:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV41 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV41 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV41 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV41 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV41 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV41),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV41),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV41),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV41 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV41 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV41 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV41),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV41),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV41 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV41 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV41,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV41 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV41),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV41 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV41 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV41 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV41),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV41,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV41),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV41),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV41 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV41 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV41 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV41 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV41 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV41),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV41),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV41),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV41 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV41),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV41 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV41 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV41 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV41 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV41),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV41 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV41 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV41 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV41 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV41 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV41 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV41 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV41),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV41),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV41),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV41 =[\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV41 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV41 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV41 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV41),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV41),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV41),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV41 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV41 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV41),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSoftBodyDataV41 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'vertexFvf' , 'uint32',\n\t\t\t\t'vertBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV41 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV41),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV41),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV41),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV41),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV41),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV41),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV41),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV41),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV41),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV41),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV41),\n\t\t\t\t'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV41),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 40, ReferencedFunction: 0x106B800\n\t\t\t40:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV40 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV40 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV40 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV40 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV40 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV40),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV40),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV40),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV40 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV40 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV40 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV40),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV40),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV40 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV40 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV40,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV40 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV40),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV40 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV40 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV40 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV40),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV40,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV40),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV40),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV40 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV40 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV40 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV40 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV40 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'offset' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV40),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV40),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV40),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'velocityInherit' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV40 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV40),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV40 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV40 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV40 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV40 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV40),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV40 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV40 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV40 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV40 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV40 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV40 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV40 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV40),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV40),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV40),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV40 =[\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV40 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV40 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV40 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV40),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV40),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV40),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV40 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV40 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV40),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV40 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV40),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV40),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV40),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV40),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV40),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV40),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV40),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV40),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV40),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV40),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV40),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 39, ReferencedFunction: 0x106B750\n\t\t\t39:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV39 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV39 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV39 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV39 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV39 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV39),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV39),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV39),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV39 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV39 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV39 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV39),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV39),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV39 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV39 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV39,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV39 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV39),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV39 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV39 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV39 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV39),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV39,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV39),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV39),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV39 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV39 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV39 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV39 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV39 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV39),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV39),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV39),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV39 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV39),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV39 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV39 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV39 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorStart' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV39 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV39),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV39 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV39 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV39 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV39 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV39 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV39 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV39 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV39),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV39),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV39),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV39 =[\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV39 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV39 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV39 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV39),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV39),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV39),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV39 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV39 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV39),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV39 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV39),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV39),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV39),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV39),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV39),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV39),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV39),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV39),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV39),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV39),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV39),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 38, ReferencedFunction: 0x106B5D0\n\t\t\t38:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV38 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV38 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV38 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV38 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV38 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV38),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV38),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV38),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV38 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV38 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV38 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV38),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV38),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV38 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV38 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV38,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV38 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV38),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV38 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV38 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV38 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV38),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV38,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV38),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV38),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV38 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV38 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV38 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV38 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV38 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV38),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV38),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV38),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV38 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV38),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV38 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV38 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV38 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV38 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV38),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV38 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV38 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV38 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV38 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV38 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV38 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV38 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV38),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV38),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV38),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV38 =[\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV38 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV38 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV38 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV38),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV38),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV38),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV38 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV38 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV38),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV38 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV38),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV38),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV38),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV38),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV38),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV38),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV38),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV38),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV38),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV38),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV38),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 37\n\t\t\t37:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV37 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV37 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV37 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV37 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV37 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV37),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV37),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV37),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV37 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV37 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV37 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV37),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV37),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV37 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV37 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV37,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV37 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV37),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV37 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV37 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV37 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV37),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV37,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV37),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV37),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV37 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV37 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV37 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV37 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV37 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV37),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV37),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV37),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV37 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV37),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV37 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV37 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV37 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV37 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV37),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV37 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV37 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV37 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV37 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV37 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV37 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV37 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV37),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV37),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV37),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV37 =[\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV37 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV37 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV37 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV37),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV37),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV37),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV37 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV37 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV37),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV37 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV37),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV37),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV37),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV37),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV37),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV37),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV37),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV37),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV37),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV37),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV37),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 36, ReferencedFunction: 0x106B490\n\t\t\t36:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV36 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV36 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV36 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV36 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV36 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV36),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV36),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV36),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV36 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV36 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV36 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV36),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV36),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV36 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV36 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV36,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV36 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV36),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV36 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV36 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV36 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV36),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV36,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV36),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV36),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV36 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV36 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV36 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV36 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV36 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV36),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV36),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV36),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV36 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV36),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV36 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV36 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV36 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV36 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV36),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV36 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV36 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV36 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV36 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV36 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV36 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV36 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV36),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV36),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV36),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV36 =[\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV36 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV36 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV36 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV36),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV36),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV36),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV36 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV36 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV36),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV36 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV36),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV36),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV36),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV36),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV36),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV36),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV36),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV36),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV36),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV36),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV36),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 35, ReferencedFunction: 0x106B330\n\t\t\t35:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV35 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV35 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV35 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV35 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV35 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV35),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV35),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV35),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV35 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV35 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV35 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV35),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV35),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV35 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV35 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV35,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV35 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV35),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV35 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV35 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV35 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV35),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV35,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV35),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV35),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV35 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV35 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV35 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV35 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV35 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV35),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV35),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV35),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV35 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV35),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV35 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV35 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV35 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV35 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV35),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV35 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV35 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV35 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV35 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV35 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV35 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV35 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV35),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV35),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV35),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV35 =[\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV35 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin', ['[]', 'uint32', 3],\n\t\t\t\t'colorEnd', ['[]', 'uint32', 3],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'opacity' , ['[]','float32',2],\n\t\t\t\t'opacityPreset' , 'uint8',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV35 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'updatePos' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV35 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV35),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV35),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV35),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV35 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'uint8',\n\t\t\t\t'drag' , 'uint8',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'uint8',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'uint8',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'uint8',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'uint8',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'uint8',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'uint8',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV35 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV35),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV35),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV35),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV35),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV35),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV35),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV35),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV35),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV35),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV35),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV35),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 34, ReferencedFunction: 0x106B230\n\t\t\t34:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV34 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV34 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV34 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV34 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV34 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV34),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV34),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV34),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV34 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV34 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV34 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV34),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV34),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV34 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV34 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV34,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV34 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV34),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV34 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV34 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV34 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV34),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV34,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV34),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV34),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV34 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV34 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV34 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV34 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV34 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV34),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV34),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV34),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV34 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV34),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV34 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV34 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV34 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV34 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV34),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV34 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV34 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV34 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV34 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV34 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV34 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV34 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV34),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV34),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV34),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV34 =[\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV34 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV34 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV34 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV34),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV34),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV34),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV34 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'uint8',\n\t\t\t\t'drag' , 'uint8',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'uint8',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'uint8',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'uint8',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'uint8',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'uint8',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'uint8',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV34 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV34),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV34),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV34),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV34),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV34),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV34),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV34),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV34),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV34),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV34),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV34),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 33\n\t\t\t33:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV33 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV33 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV33 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV33 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV33 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV33),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV33),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV33),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV33 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV33 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV33 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV33),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV33),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV33 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV33 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV33,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV33 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV33),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV33 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV33 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV33 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV33),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV33,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV33),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV33),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV33 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV33 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV33 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV33 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV33 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV33),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV33),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV33),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV33 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV33),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV33 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV33 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV33 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV33 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV33),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV33 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV33 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV33 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV33 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV33 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV33 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV33 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV33),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV33),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV33),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV33 =[\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV33 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV33 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV33 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV33),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV33),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV33 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'uint8',\n\t\t\t\t'drag' , 'uint8',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'uint8',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'uint8',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'uint8',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'uint8',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'uint8',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'uint8',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV33 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV33),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV33),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV33),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV33),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV33),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV33),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV33),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV33),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV33),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV33),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV33),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 32\n\t\t\t32:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV32 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV32 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV32 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV32 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV32 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV32),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV32),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV32),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV32 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV32 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV32 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV32),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV32),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV32 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV32 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV32,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV32 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV32),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV32 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV32 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV32 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV32),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV32,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV32),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV32),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV32 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV32 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV32 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV32 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV32 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV32),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV32),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV32),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV32 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV32),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV32 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV32 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV32 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV32 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV32),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV32 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV32 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV32 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV32 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV32 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV32 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV32 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV32),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV32),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV32),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningSystemV32 =[\n\t\t\t\t'boltIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningBoltV32 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'nodeIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'colorBegin' , 'uint32',\n\t\t\t\t'colorEnd' , 'uint32',\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'numSegments', 'uint16',\n\t\t\t\t'period' , 'float32',\n\t\t\t\t'texOffset' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'texSpeed' , 'float32',\n\t\t\t\t'thickness' , 'float32',\n\t\t\t\t'thicknessPreset' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'variance' , 'float32',\n\t\t\t\t'variancePreset' , 'uint8',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningNodeV32 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'childrenIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'probability' , 'float32',\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'shape' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningDataV32 =[\n\t\t\t\t'systems', Utils.getArrayReader(this.ModelLightningSystemV32),\n\t\t\t\t'bolts', Utils.getArrayReader(this.ModelLightningBoltV32),\n\t\t\t\t'nodes', Utils.getArrayReader(this.ModelLightningNodeV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV32 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV32),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV32),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV32),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV32),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV32),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV32),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV32),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV32),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV32),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelLightningDataV32),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 31\n\t\t\t31:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV31 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV31 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV31 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV31 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV31 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV31),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV31),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV31),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV31 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV31 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV31 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV31),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV31),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV31 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV31 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV31,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV31 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV31),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV31 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV31 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV31 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV31),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV31,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV31),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV31),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV31 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV31 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV31 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV31 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV31 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV31),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV31),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV31),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV31 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV31),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV31 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV31 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV31 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'texV' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV31 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV31),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV31 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV31 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV31 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV31 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV31 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV31 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV31 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV31),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV31),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV31),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV31),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV31 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV31),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV31),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV31),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV31),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV31),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV31),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV31),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV31),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV31),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 30\n\t\t\t30:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV30 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV30 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV30 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV30 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV30 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV30),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV30),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV30),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV30 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV30 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV30 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV30),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV30),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV30 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV30 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV30,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV30 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV30),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV30 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV30 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV30 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV30),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV30,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV30),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV30),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV30 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV30 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV30 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV30 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV30 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV30),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV30),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV30),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV30 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV30),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV30 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV30 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV30 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV30 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV30),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV30 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV30 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV30 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV30 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV30 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV30 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV30 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV30),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV30),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV30),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV30),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV30 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV30),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV30),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV30),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV30),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV30),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV30),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV30),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV30),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV30),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 29, ReferencedFunction: 0x106B180\n\t\t\t29:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV29 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV29 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstLinkV29 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'constantToken' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransLinkV29 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV29 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV29),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV29),\n\t\t\t\t'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV29),\n\t\t\t\t'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV29 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV29 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV29 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV29),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV29),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV29 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV29 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV29,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV29 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV29),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV29 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV29 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV29 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV29),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV29,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV29),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV29),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV29 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV29 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV29 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV29 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV29 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV29),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV29),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV29),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV29 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV29),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV29 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV29 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV29 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV29 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV29),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV29 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV29 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV29 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV29 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV29 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothObstacleV29 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV29 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV29),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV29),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV29),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelClothObstacleV29),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV29 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV29),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV29),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV29),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV29),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV29),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV29),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV29),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV29),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV29),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 28\n\t\t\t28:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV28 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV28 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV28 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV28),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV28 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV28 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV28 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV28),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV28),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV28 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV28 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV28,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV28 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV28),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV28 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV28 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV28 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV28),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV28,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV28),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV28),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV28 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV28 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV28 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV28 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV28 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV28),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV28),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV28),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV28 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV28),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV28 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV28 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV28 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV28 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV28),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV28 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV28 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV28 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV28 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV28),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV28 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV28 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV28),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV28),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV28),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV28 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV28),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV28),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV28),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV28),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV28),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV28),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV28),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV28),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV28),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 27\n\t\t\t27:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV27 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV27 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV27 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV27),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV27 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV27 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV27 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV27),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV27),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV27 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV27 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV27,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV27 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV27),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV27 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV27 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV27 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV27),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV27,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV27),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV27),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV27 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV27 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV27 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV27 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV27 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV27),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV27),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV27),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV27 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV27),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV27 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV27 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV27 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV27 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV27),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV27 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV27 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV27 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV27 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV27),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV27 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV27 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV27),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV27),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV27),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV27 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV27),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV27),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV27),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV27),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV27),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV27),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV27),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV27),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV27),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 26, ReferencedFunction: 0x106ADD0\n\t\t\t26:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV26 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV26 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV26 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV26),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV26 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV26 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV26 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV26),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV26),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV26 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV26 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV26,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV26 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV26),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV26 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV26 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV26 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV26),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV26,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV26),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV26),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV26 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV26 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV26 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV26 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV26 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV26),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV26),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV26),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV26 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV26),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV26 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV26 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV26 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV26 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV26),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV26 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV26 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV26 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV26 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV26),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV26 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV26 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV26),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV26),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV26),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV26 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV26),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV26),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV26),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyDataV26),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV26),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV26),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV26),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV26),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV26),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 25, ReferencedFunction: 0x106AC30\n\t\t\t25:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV25 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV25 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV25 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV25),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV25 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV25 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV25 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV25),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV25),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV25 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV25 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV25,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV25 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV25),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV25 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV25 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV25 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV25),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV25,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV25),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV25),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV25 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV25 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV25 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV25 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV25 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'float32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV25 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV25),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV25),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV25),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV25 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV25),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV25 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV25 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'jitter' , 'float32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV25 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV25 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV25),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV25 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV25 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV25 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV25 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV25 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV25 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV25),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV25),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV25),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV25 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV25),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV25),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV25),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV25),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV25),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV25),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV25),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV25),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV25),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 24, ReferencedFunction: 0x106ABD0\n\t\t\t24:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV24 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV24 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV24 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV24),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV24 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV24 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV24 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV24),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV24),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV24 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV24 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV24,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV24 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV24),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV24 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV24 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV24 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV24),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV24,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV24),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV24),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV24 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV24 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV24 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV24 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV24 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV24 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterFlags' , 'uint32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV24),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV24),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV24),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV24 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV24),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV24 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV24 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV24 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV24 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV24),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV24 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV24 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV24 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV24 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV24 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV24 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV24),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV24),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV24),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV24 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV24),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV24),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV24),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV24),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV24),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV24),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV24),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV24),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV24),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 23, ReferencedFunction: 0x106AB60\n\t\t\t23:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV23 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV23 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV23 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV23),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV23 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV23 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV23 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV23),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV23),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV23 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV23 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV23,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV23 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV23),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV23 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV23 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV23 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV23),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV23,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV23),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV23),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV23 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV23 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV23 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV23 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV23 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV23 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV23),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV23),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV23),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV23 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV23),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelObstacleDataV23 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV23 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV23 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV23 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV23),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV23 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV23 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV23 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV23 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV23 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV23 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV23),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV23),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV23),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV23 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV23),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV23),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV23),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV23),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV23),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelObstacleDataV23),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV23),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV23),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV23),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 22\n\t\t\t22:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV22 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV22 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV22 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV22),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV22 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV22 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV22 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV22),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV22),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV22 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV22 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV22,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV22 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV22),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV22 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV22 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV22 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV22),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV22,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV22),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV22),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV22 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV22 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV22 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV22 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV22 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV22 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV22),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV22),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV22),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV22 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV22 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV22),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV22),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV22 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV22 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV22 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV22),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV22 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV22 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV22 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV22 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV22 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV22 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV22),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV22),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV22),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV22 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV22),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV22),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV22),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV22),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV22),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV22),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV22),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV22),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 21, ReferencedFunction: 0x106AAA0\n\t\t\t21:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV21 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV21 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV21 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV21),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV21 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV21 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV21 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV21),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV21),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV21 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV21 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV21,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV21 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV21),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV21 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV21 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV21 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV21),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV21,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV21),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV21),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV21 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV21 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV21 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'velocity' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV21 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV21 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV21 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'alignmentType' , 'uint8',\n\t\t\t\t'alignmentDir' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , 'float32',\n\t\t\t\t'colorFalloff' , ['[]','float32',2],\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV21),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV21),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV21),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'windInfluence' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV21 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV21 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV21),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV21),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV21 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'noise' , 'float32',\n\t\t\t\t'spawnDist' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV21 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV21 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV21),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV21 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV21 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV21 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV21 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV21 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV21 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV21),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV21),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV21),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV21 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV21),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV21),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV21),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV21),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV21),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV21),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV21),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV21),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 20, ReferencedFunction: 0x106A8F0\n\t\t\t20:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV20 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV20 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV20 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV20),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV20 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV20 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV20 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV20),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV20),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV20 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV20 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV20,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV20 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV20),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV20 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV20 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV20 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV20),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV20,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV20),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV20),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV20 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV20 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV20 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV20 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV20 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV20 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'colorFalloff' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV20),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV20),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV20),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV20 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV20 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV20),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV20),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV20 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV20 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV20 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV20),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV20 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV20 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV20 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV20 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV20 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV20 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV20),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV20),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV20),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV20 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV20),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV20),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV20),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV20),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV20),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV20),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV20),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV20),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 19\n\t\t\t19:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV19 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV19 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV19 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV19),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV19 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV19 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV19 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV19),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV19),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV19 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV19 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV19,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV19 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV19),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV19 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV19 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV19 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV19),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV19,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV19),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV19),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV19 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV19 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV19 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV19 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV19 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV19 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'colorFalloff' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV19),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV19),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV19),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV19 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV19 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV19),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV19),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV19 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV19 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV19 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV19),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV19 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV19 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothBoneWeightV19 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'weight' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothMeshGroupV19 =[\n\t\t\t\t'weights', Utils.getArrayReader(this.ModelClothBoneWeightV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothConstraintV19 =[\n\t\t\t\t'vertIndexA', 'uint16',\n\t\t\t\t'vertIndexB', 'uint16',\n\t\t\t\t'distance' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelClothDataV19 =[\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'rigidness' , 'uint8',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'lockCount', 'uint16',\n\t\t\t\t'groups', Utils.getArrayReader(this.ModelClothMeshGroupV19),\n\t\t\t\t'softLocks', Utils.getArrayReader('uint8'),\n\t\t\t\t'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV19),\n\t\t\t\t'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV19),\n\t\t\t\t'lod1VertexCount', 'uint16',\n\t\t\t\t'lod1Indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'barycentricIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV19 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV19),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV19),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV19),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV19),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV19),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV19),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV19),\n\t\t\t\t'clothData', Utils.getArrayReader(this.ModelClothDataV19),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 18\n\t\t\t18:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV18 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV18 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV18 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV18),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV18 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV18 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'meshName', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV18 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV18),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV18),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV18 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV18 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV18,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV18 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV18),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV18 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV18 =[\n\t\t\t\t'trackMask', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV18 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV18),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV18,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV18),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV18),\n\t\t\t\t'skeletonHash', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV18 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV18 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV18 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV18 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV18 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV18 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'colorFalloff' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV18),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV18),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV18),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV18 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV18 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV18),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV18),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV18 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV18 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV18 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV18),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV18 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 3],\n\t\t\t\t'farDistance' , 'float32',\n\t\t\t\t'intensity' , 'float32',\n\t\t\t\t'nearDistance' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV18 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV18 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV18),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV18),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV18),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV18),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV18),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV18),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV18),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 17\n\t\t\t17:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV17 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV17 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV17 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV17),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV17 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV17 =[\n\t\t\t\t'positionIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'positions', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'normalIndices', Utils.getArrayReader('uint16'),\n\t\t\t\t'normals', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV17 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV17),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV17),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV17 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV17 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV17,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV17 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV17),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV17 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV17 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV17),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV17,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV17),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV17 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV17 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV17 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV17 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV17 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV17 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'colorFalloff' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV17),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV17),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV17),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV17 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV17 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV17),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV17),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV17 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV17 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV17 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV17),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV17 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 4],\n\t\t\t\t'ranges' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV17 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV17 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV17),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV17),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV17),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV17),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV17),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV17),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV17),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t'soundScript' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 16\n\t\t\t16:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV16 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV16 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV16 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV16),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV16 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV16 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV16),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV16 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV16 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV16,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV16 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV16),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV16 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV16 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV16),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV16,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV16),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV16 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV16 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV16 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV16 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV16 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV16 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'colorFalloff' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV16),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV16),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV16),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV16 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV16 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV16),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV16),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV16 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV16 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV16 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV16),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV16 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 4],\n\t\t\t\t'ranges' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV16 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV16 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV16),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV16),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV16),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV16),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV16),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV16),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV16),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'lodOverride', ['[]', 'float32', 2],\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 15\n\t\t\t15:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV15 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV15 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV15 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV15),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshLodDataV15 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV15 =[\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshLodDataV15),\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV15 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV15 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV15,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV15 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV15),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV15 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV15 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV15),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV15,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV15),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV15 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV15 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV15 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV15 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV15 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV15 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'colorFalloff' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV15),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV15),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV15),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV15 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV15 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV15),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV15),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV15 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV15 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV15 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV15),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelEffectLightV15 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color', ['[]', 'uint8', 4],\n\t\t\t\t'ranges' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightDataV15 =[\n\t\t\t\t'effectLights', Utils.getArrayReader(this.ModelEffectLightV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV15 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV15),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV15),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV15),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV15),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV15),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV15),\n\t\t\t\t'lightData', Utils.getPointerReader(this.ModelLightDataV15),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 14\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV14 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV14 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV14 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV14),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV14 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'actionOffsets', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV14 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV14 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV14,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV14 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV14),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV14 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV14 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV14),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV14,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV14),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV14 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV14 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV14 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV14 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV14 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV14 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'colorFalloff' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV14),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV14),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV14),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV14 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV14 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV14),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV14),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV14 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV14 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV14 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV14),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV14 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV14),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV14),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV14),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV14),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV14),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV13 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV13 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV13 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV13),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV13 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV13 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV13 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV13,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV13 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV13),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV13 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV13 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV13),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV13,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV13),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV13 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV13 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV13 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV13 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV13 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV13 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'colorFalloff' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV13),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV13),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV13),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV13 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV13 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV13),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV13),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV13 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV13 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV13 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV13),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV13 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV13),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV13),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV13),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV13),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV13),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV12 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV12 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV12 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV12),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV12 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV12 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV12 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV12,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV12 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV12),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV12 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV12 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV12),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV12,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV12),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV12 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV12 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV12 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV12 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV12 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV12 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'colorFalloff' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV12),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV12),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV12),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV12 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV12 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV12),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV12),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV12 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV12 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV12 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV12),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV12 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV12),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV12),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV12),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV12),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV12),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11, ReferencedFunction: 0x106A6B0\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV11 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV11 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV11 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV11),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV11 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV11 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV11 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV11,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV11 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV11),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV11 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV11 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV11),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV11,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV11),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV11 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV11 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV11 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCurveV11 =[\n\t\t\t\t'curveType' , 'uint8',\n\t\t\t\t'keys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV11 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV11 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'accelerationDistRange' , ['[]','float32',2],\n\t\t\t\t'accelerationDistSpeed' , ['[]','float32',2],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'colorFalloff' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV11),\n\t\t\t\t'opacityCurvePreset' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV11),\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationDrag' , 'float32',\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV11),\n\t\t\t\t'scaleCurvePreset' , 'uint32',\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'spawnWindEmit' , ['[]','float32',2],\n\t\t\t\t'spawnWindSpeed' , ['[]','float32',2],\n\t\t\t\t'texCoordRect' , ['[]','float32',4],\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV11 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV11 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV11),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV11),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV11 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV11 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV11 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV11),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV11 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV11),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV11),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV11),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV11),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV11),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV10 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV10 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV10 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV10),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV10 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV10 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV10 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV10,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV10 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV10),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV10 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV10 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV10),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV10,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV10),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV10 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV10 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV10 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV10 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV10),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'opacityCurveType' , 'uint8',\n\t\t\t\t'opacityKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'scaleCurveType' , 'uint8',\n\t\t\t\t'scaleKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV10 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV10 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV10 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV10),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV10),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakV10 =[\n\t\t\t\t'anchorIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'spawnFreq' , 'float32',\n\t\t\t\t'stretchDist' , 'float32',\n\t\t\t\t'texScale' , 'float32',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnchorV10 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'color' , 'uint32',\n\t\t\t\t'falloff' , 'float32',\n\t\t\t\t'lifetime' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakDataV10 =[\n\t\t\t\t'streaks', Utils.getArrayReader(this.ModelStreakV10),\n\t\t\t\t'anchors', Utils.getArrayReader(this.ModelStreakAnchorV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV10 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV10),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV10),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV10),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV10),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV10),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelStreakDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV9 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV9 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV9 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'texCoordCount' , 'uint8',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV9),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV9 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV9 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV9 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV9,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV9 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV9),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV9 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV9 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV9),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV9,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV9),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV9 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV9 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV9 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV9 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV9),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'opacityCurveType' , 'uint8',\n\t\t\t\t'opacityKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'scaleCurveType' , 'uint8',\n\t\t\t\t'scaleKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV9 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV9 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV9 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV9),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV9),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV9 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV9),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV9),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV9),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV9),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8, ReferencedFunction: 0x106D750\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV8 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvPSInputIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV8 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV8 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV8),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV8 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV8 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV8 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV8,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV8 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV8),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV8 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV8 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV8),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV8,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV8),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV8 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV8 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV8 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV8 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV8),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'opacityCurveType' , 'uint8',\n\t\t\t\t'opacityKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'scaleCurveType' , 'uint8',\n\t\t\t\t'scaleKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV8 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV8 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV8 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV8),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV8),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV8 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV8),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV8),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV8),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV8),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV7 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV7 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV7 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV7),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV7 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV7 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV7 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'animation', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV7 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV7 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV7 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV7,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV7 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV7),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV7 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV7 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV7),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV7,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV7),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV7 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV7 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionMeshV7 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCloudV7 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCubeV7 =[\n\t\t\t\t'transform', ['[]', ['[]','float32',4], 3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSphereV7 =[\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV7 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionDataV7 =[\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV7),\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelCollisionCloudV7),\n\t\t\t\t'cubes', Utils.getArrayReader(this.ModelCollisionCubeV7),\n\t\t\t\t'spheres', Utils.getArrayReader(this.ModelCollisionSphereV7),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV7 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV7 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV7),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'opacityCurveType' , 'uint8',\n\t\t\t\t'opacityKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'scaleCurveType' , 'uint8',\n\t\t\t\t'scaleKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV7 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV7 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV7 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV7),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV7),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV7 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV7),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV7),\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV7),\n\t\t\t\t'animationFallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'animationImports', Utils.getArrayReader(this.ModelAnimationImportDataV7),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV7),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV7),\n\t\t\t\t'collisionData', Utils.getPointerReader(this.ModelCollisionDataV7),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6, ReferencedFunction: 0x106CE90\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV6 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV6 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV6 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV6),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV6 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visBoneIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV6 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV6 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'animation', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV6 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV6 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV6 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV6,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV6 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV6),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV6 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV6 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV6),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV6,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV6 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV6 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionMeshV6 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCloudV6 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCubeV6 =[\n\t\t\t\t'transform', ['[]', ['[]','float32',4], 3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSphereV6 =[\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV6 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionDataV6 =[\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV6),\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelCollisionCloudV6),\n\t\t\t\t'cubes', Utils.getArrayReader(this.ModelCollisionCubeV6),\n\t\t\t\t'spheres', Utils.getArrayReader(this.ModelCollisionSphereV6),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV6 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV6 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV6),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'opacityCurveType' , 'uint8',\n\t\t\t\t'opacityKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'scaleCurveType' , 'uint8',\n\t\t\t\t'scaleKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV6 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV6 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'visBoneIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV6 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV6),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV6),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV6 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV6),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV6),\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV6),\n\t\t\t\t'animationFallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'animationImports', Utils.getArrayReader(this.ModelAnimationImportDataV6),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV6),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV6),\n\t\t\t\t'collisionData', Utils.getPointerReader(this.ModelCollisionDataV6),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV5 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV5 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV5 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV5),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV5 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'visTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV5 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV5 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'animation', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV5 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV5 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV5,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV5 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV5),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV5 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV5 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV5),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV5,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV5 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV5 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionMeshV5 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCloudV5 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCubeV5 =[\n\t\t\t\t'transform', ['[]', ['[]','float32',4], 3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSphereV5 =[\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV5 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionDataV5 =[\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV5),\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelCollisionCloudV5),\n\t\t\t\t'cubes', Utils.getArrayReader(this.ModelCollisionCubeV5),\n\t\t\t\t'spheres', Utils.getArrayReader(this.ModelCollisionSphereV5),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV5 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV5 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV5),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'opacityCurveType' , 'uint8',\n\t\t\t\t'opacityKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'scaleCurveType' , 'uint8',\n\t\t\t\t'scaleKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV5 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV5 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV5 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV5),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV5),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV5 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV5),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV5),\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV5),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV5),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV5),\n\t\t\t\t'collisionData', Utils.getPointerReader(this.ModelCollisionDataV5),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV4 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV4 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV4 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV4),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV4 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t'visTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV4 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV4 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'animation', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV4 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV4 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV4,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV4 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV4),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV4 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV4 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV4),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV4,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV4 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV4 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionMeshV4 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCloudV4 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCubeV4 =[\n\t\t\t\t'transform', ['[]', ['[]','float32',4], 3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSphereV4 =[\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV4 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionDataV4 =[\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV4),\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelCollisionCloudV4),\n\t\t\t\t'cubes', Utils.getArrayReader(this.ModelCollisionCubeV4),\n\t\t\t\t'spheres', Utils.getArrayReader(this.ModelCollisionSphereV4),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV4 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV4 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV4),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'opacityCurveType' , 'uint8',\n\t\t\t\t'opacityKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'scaleCurveType' , 'uint8',\n\t\t\t\t'scaleKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV4 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV4 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV4 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV4),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV4),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV4 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV4),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV4),\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV4),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV4),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV4),\n\t\t\t\t'collisionData', Utils.getPointerReader(this.ModelCollisionDataV4),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV3 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV3 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV3 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV3),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV3 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV3 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'animation', this.PackGrannyAnimationTypeV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV3 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV3 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV3,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV3 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV3),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV3 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV3 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV3),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV3,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV3 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV3 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionMeshV3 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCloudV3 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCubeV3 =[\n\t\t\t\t'transform', ['[]', ['[]','float32',4], 3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSphereV3 =[\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV3 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionDataV3 =[\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV3),\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelCollisionCloudV3),\n\t\t\t\t'cubes', Utils.getArrayReader(this.ModelCollisionCubeV3),\n\t\t\t\t'spheres', Utils.getArrayReader(this.ModelCollisionSphereV3),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV3 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV3 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV3),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'opacityCurveType' , 'uint8',\n\t\t\t\t'opacityKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'scaleCurveType' , 'uint8',\n\t\t\t\t'scaleKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV3 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV3 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV3 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV3),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV3),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV3 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV3),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV3),\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV3),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV3),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV3),\n\t\t\t\t'collisionData', Utils.getPointerReader(this.ModelCollisionDataV3),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV2 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV2 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV2 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV2),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV2 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV2 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'animation', this.PackGrannyAnimationTypeV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV2 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV2 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV2,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV2 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV2),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV2 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV2 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV2),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV2,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV2 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV2 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionMeshV2 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCloudV2 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV2 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionDataV2 =[\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV2),\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelCollisionCloudV2),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleFlipbookV2 =[\n\t\t\t\t'columns' , 'uint8',\n\t\t\t\t'count' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'fps' , 'uint32',\n\t\t\t\t'rows' , 'uint8',\n\t\t\t\t'start' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleCloudV2 =[\n\t\t\t\t'acceleration' , ['[]','float32',3],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'emitterIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV2),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'obstacleIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'opacityCurveType' , 'uint8',\n\t\t\t\t'opacityKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t'scaleCurveType' , 'uint8',\n\t\t\t\t'scaleKeys', Utils.getArrayReader(['[]','float32',2]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleEmitterV2 =[\n\t\t\t\t'acceleration', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'colorBegin' , ['[]','float32',4],\n\t\t\t\t'colorEnd' , ['[]','float32',4],\n\t\t\t\t'colorPeriod' , ['[]','float32',2],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'lifetime' , ['[]','float32',2],\n\t\t\t\t'rotationChange' , ['[]','float32',2],\n\t\t\t\t'rotationInitial' , ['[]','float32',2],\n\t\t\t\t'scaleChange', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'scaleInitial', ['[]', ['[]','float32',2], 2],\n\t\t\t\t'velocity', ['[]', ['[]','float32',2], 4],\n\t\t\t\t'velocityDistRange' , ['[]','float32',2],\n\t\t\t\t'velocityDistSpeed' , ['[]','float32',2],\n\t\t\t\t'spawnGroupSize' , ['[]','float32',2],\n\t\t\t\t'spawnPeriod' , 'float32',\n\t\t\t\t'spawnProbability' , 'float32',\n\t\t\t\t'spawnRadius' , ['[]','float32',2],\n\t\t\t\t'spawnShape' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelParticleObstacleV2 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'dragCoef' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'geoData' , ['[]','float32',3],\n\t\t\t\t'gravityCoef' , 'float32',\n\t\t\t\t'response' , 'uint8',\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudDataV2 =[\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelParticleCloudV2),\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelParticleEmitterV2),\n\t\t\t\t'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV2 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV2),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV2),\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV2),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV2),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV2),\n\t\t\t\t'collisionData', Utils.getPointerReader(this.ModelCollisionDataV2),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelCloudDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV1 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV1 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV1 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV1),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV1 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV1 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'animation', this.PackGrannyAnimationTypeV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV1 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV1 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV1,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV1 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV1),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV1 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV1 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV1),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV1,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV1 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV1 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelChunkCollisionMeshV1 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelChunkCollisionCloudV1 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelChunkCollisionSurfaceV1 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelChunkCollisionDataV1 =[\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelChunkCollisionMeshV1),\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelChunkCollisionCloudV1),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelChunkCollisionSurfaceV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV1 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV1),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV1),\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV1),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV1),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV1),\n\t\t\t\t'collisionData', Utils.getPointerReader(this.ModelChunkCollisionDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ModelTextureDataV0 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'textureFlags' , 'uint32',\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelConstantDataV0 =[\n\t\t\t\t'name' , 'uint32',\n\t\t\t\t'value' , ['[]','float32',4],\n\t\t\t\t'constantFlags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMaterialDataV0 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'materialFlags' , 'uint32',\n\t\t\t\t'sortOrder' , 'uint32',\n\t\t\t\t'textures', Utils.getArrayReader(this.ModelTextureDataV0),\n\t\t\t\t'constants', Utils.getArrayReader(this.ModelConstantDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMeshType =[\n\t\t\t\t'mesh', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV0 =[\n\t\t\t\t'mesh', this.PackGrannyMeshType,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV0 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'animation', this.PackGrannyAnimationTypeV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTransformDataV0 =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneDataV0 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformDataV0,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV0 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneDataV0),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingDataV0 =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelModelDataV0 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV0),\n\t\t\t\t'InitialPlacement', this.ModelTransformDataV0,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFloatPropertyDataV0 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyDataV0 =[\n\t\t\t\t'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileDataV0 =[\n\t\t\t\t'materials', Utils.getRefArrayReader(this.ModelMaterialDataV0),\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV0),\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV0),\n\t\t\t\t'model', Utils.getPointerReader(this.ModelModelDataV0),\n\t\t\t\t'properties', Utils.getPointerReader(this.ModelPropertyDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: ANIM, versions: 26, strucTab: 0x15D0220 \n\t///==================================================\n\t{\n\t\tname:'ANIM',\n\t\tversions:{\n\n\n\t\t\t// => Version: 25, ReferencedFunction: 0x10685D0\n\t\t\t25:function(){\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV1 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t'pointers', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationLodV25 =[\n\t\t\t\t'data', this.PackGrannyAnimationTypeV1,\n\t\t\t\t'fileFull' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV33 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV25 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV25 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV25 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV25 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV25 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV25 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV25 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV25 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnchorAnimV25 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnimV25 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningAnimV25 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelWindAnimationV25 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'windTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV33 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV1,\n\t\t\t\t'animLod', Utils.getPointerReader(this.ModelAnimationLodV25),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV33),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV25),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV25),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV25),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV25),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV25),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV25),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV25),\n\t\t\t\t'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV25),\n\t\t\t\t'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV25),\n\t\t\t\t'windAnimData', Utils.getArrayReader(this.ModelWindAnimationV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV25 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportSequenceV25 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'duration' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV33 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV25),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFileAnimationBankV25 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV33),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV25),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV33),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationV25 =[\n\t\t\t\t'bank', Utils.getPointerReader(this.ModelFileAnimationBankV25),\n\t\t\t\t'anim', this.PackGrannyAnimationTypeV1,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 24, ReferencedFunction: 0x10683E0\n\t\t\t24:function(){\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationLodV24 =[\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'fileFull' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV32 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV24 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV24 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV24 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV24 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV24 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV24 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV24 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV24 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnchorAnimV24 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnimV24 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningAnimV24 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelWindAnimationV24 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'windTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV32 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'animLod', Utils.getPointerReader(this.ModelAnimationLodV24),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV32),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV24),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV24),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV24),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV24),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV24),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV24),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV24),\n\t\t\t\t'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV24),\n\t\t\t\t'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV24),\n\t\t\t\t'windAnimData', Utils.getArrayReader(this.ModelWindAnimationV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV24 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportSequenceV24 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'duration' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV32 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV24),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelFileAnimationBankV24 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV32),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV24),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV32),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationV24 =[\n\t\t\t\t'bank', Utils.getPointerReader(this.ModelFileAnimationBankV24),\n\t\t\t\t'anim', this.PackGrannyAnimationTypeV0,\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 23, ReferencedFunction: 0x1068240\n\t\t\t23:function(){\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV31 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV23 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV23 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV23 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV23 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV23 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV23 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV23 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV23 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnchorAnimV23 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnimV23 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningAnimV23 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelWindAnimationV23 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'windTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV31 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV31),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV23),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV23),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV23),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV23),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV23),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV23),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV23),\n\t\t\t\t'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV23),\n\t\t\t\t'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV23),\n\t\t\t\t'windAnimData', Utils.getArrayReader(this.ModelWindAnimationV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV23 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportSequenceV23 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'duration' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV31 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV23),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV23 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV31),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV23),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV31),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 22\n\t\t\t22:function(){\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV30 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV22 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV22 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV22 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV22 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV22 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV22 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV22 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV22 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnchorAnimV22 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnimV22 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningAnimV22 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelWindAnimationV22 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'windTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV30 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV30),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV22),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV22),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV22),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV22),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV22),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV22),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV22),\n\t\t\t\t'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV22),\n\t\t\t\t'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV22),\n\t\t\t\t'windAnimData', Utils.getArrayReader(this.ModelWindAnimationV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV22 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportSequenceV22 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'duration' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV30 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV22),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV22 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV30),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV22),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV30),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 21\n\t\t\t21:function(){\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV29 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV21 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV21 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV21 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV21 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV21 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV21 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV21 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV21 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnchorAnimV21 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnimV21 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningAnimV21 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelWindAnimationV21 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'windTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV29 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV29),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV21),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV21),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV21),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV21),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV21),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV21),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV21),\n\t\t\t\t'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV21),\n\t\t\t\t'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV21),\n\t\t\t\t'windAnimData', Utils.getArrayReader(this.ModelWindAnimationV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV21 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportSequenceV21 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'duration' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV29 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV21),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV21 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV29),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV21),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV29),\n\t\t\t\t'modelReference' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 20\n\t\t\t20:function(){\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV28 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV20 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV20 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV20 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV20 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV20 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV20 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV20 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV20 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnchorAnimV20 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnimV20 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightningAnimV20 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV28 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV28),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV20),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV20),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV20),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV20),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV20),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV20),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV20),\n\t\t\t\t'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV20),\n\t\t\t\t'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV20 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportSequenceV20 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'duration' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV28 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV20),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV20 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV28),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV20),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV28),\n\t\t\t\t'modelReference' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 19\n\t\t\t19:function(){\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV27 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV19 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV19 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV19 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV19 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV19 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV19 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV19 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV19 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnchorAnimV19 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnimV19 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV27 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV27),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV19),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV19),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV19),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV19),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV19),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV19),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV19),\n\t\t\t\t'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV19 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportSequenceV19 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'duration' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV27 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV19),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV19 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV27),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV19),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV27),\n\t\t\t\t'modelReference' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 18, ReferencedFunction: 0x1068190\n\t\t\t18:function(){\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV26 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV18 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV18 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV18 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV18 =[\n\t\t\t\t'materialId' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV18 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV18 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV18 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV18 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnchorAnimV18 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnimV18 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV26 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV26),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV18),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV18),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV18),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV18),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV18),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV18),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV18),\n\t\t\t\t'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV18 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportSequenceV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'duration' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV26 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV18 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV26),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV18),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV26),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 17, ReferencedFunction: 0x1067C30\n\t\t\t17:function(){\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV25 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV17 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV17 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV17 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV17 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV17 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV17 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV17 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV17 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnchorAnimV17 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnimV17 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV25 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV25),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV17),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV17),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV17),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV17),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV17),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV17),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV17),\n\t\t\t\t'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV17 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportSequenceV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'duration' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV25 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV17 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV25),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV17),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV25),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 16\n\t\t\t16:function(){\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelVisTrackDataV24 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV16 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV16 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV16 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV16 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV16 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV16 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV16 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV16 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnchorAnimV16 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelStreakAnimV16 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV24 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV24),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV16),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV16),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV16),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV16),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV16),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV16),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV16),\n\t\t\t\t'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV16 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV24 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV16 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV24),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV16),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV24),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 15\n\t\t\t15:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV23 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV15 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV15 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV15 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV15 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV15 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV15 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV15 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintAnimV15 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV23 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV23),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV15),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV15),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV15),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV15),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV15),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV15),\n\t\t\t\t'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV15 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV23 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV15 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV23),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV15),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV23),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 14, ReferencedFunction: 0x10679E0\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV22 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV14 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV14 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV14 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV14 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV14 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV14 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV14 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV22 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV22),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV14),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV14),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV14),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV14),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV14),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV14 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV22 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV14 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV22),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV14),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV22),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV21 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV13 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV13 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV13 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV13 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV13 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV13 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV13 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV21 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV21),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV13),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV13),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV13),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV13),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV13),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV13 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV21 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV13 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV21),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV13),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV21),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12, ReferencedFunction: 0x1067930\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV20 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV12 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV12 =[\n\t\t\t\t'uvAnimId' , 'uint32',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV12 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV12 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV12 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV12 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTokenMapAnimV12 =[\n\t\t\t\t'linkToken', Utils.getQWordReader(),\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV20 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV20),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV12),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV12),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV12),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV12),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV12),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV12 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV20 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV12 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV20),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV12),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV20),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV19 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV11 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV11 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV11 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV11 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV11 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV11 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV19 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV19),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV11),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV11),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV11),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV11),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV11),\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV11 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV19 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV11 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV19),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV11),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV19),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV18 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV10 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV10 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV10 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV10 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV10 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimPropertyDataV10 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV18 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV18),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV10),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV10),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV10),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV10),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV10 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV18 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV10 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV18),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV10),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV18),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV17 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV9 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV9 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV9 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV9 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t'initialValue' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV9 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV17 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV17),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV9),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV9),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV9),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV9),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV9 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV17 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV9 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV17),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV9),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV17),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV16 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV8 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV8 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV8 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV8 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV8 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV16 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV16),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV8),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV8),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV8),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV8),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t'variantCount' , 'uint32',\n\t\t\t\t'variantIndices', ['[]', 'uint32', 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV8 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV16 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV8 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV16),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV8),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV16),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV15 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV7 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV7 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV7 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV7 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'trackGroupIndex' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV7 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV15 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV15),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV7),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV7),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV7),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV7),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV7 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV15 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV7 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV15),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV7),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV15),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV14 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV6 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV6 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCloudAnimV6 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMatConstAnimV6 =[\n\t\t\t\t'matIndex' , 'uint32',\n\t\t\t\t'constToken' , 'uint32',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV6 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV14 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV14),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV6),\n\t\t\t\t'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV6),\n\t\t\t\t'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV6),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV6),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV6 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV14 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV6 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV14),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV6),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV14),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV13 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV5 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV5 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV5 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV13 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV13),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV5),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV5),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV5 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV13 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV5 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV13),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV5),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV13),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV12 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV4 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV4 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV4 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV12 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV12),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV4),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV4),\n\t\t\t\t'isAdditive' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV4 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV12 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV4 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV12),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV4),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV12),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV11 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackTypeDataV3 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV3 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelLightAnimationV3 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV11 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV11),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV3),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV3 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV11 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV3 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV11),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV3),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV11),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV10 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransformV2 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV2 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelUVTransformV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV10 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV10),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV2),\n\t\t\t\t'morphTrackGroups', Utils.getArrayReader('uint16'),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV2 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV10 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationBankV2 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV10),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV2),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV10),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV9 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransformV1 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV1 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelUVTransformV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV9 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV9),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV1),\n\t\t\t\t'triggerTimes', Utils.getArrayReader('float32'),\n\t\t\t\t'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV1 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV9 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationV1 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV9),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV1),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ModelVisTrackDataV8 =[\n\t\t\t\t'boneIndex' , 'uint32',\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVTransformV0 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'vectorTrackIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelUVAnimationV0 =[\n\t\t\t\t'uvAnimId' , 'uint8',\n\t\t\t\t'uvTransformData', Utils.getArrayReader(this.ModelUVTransformV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationDataV8 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t'moveSpeed' , 'float32',\n\t\t\t\t'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV8),\n\t\t\t\t'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCompoundAnimationDataV0 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'start', Utils.getQWordReader(),\n\t\t\t\t'loop', Utils.getQWordReader(),\n\t\t\t\t'end', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelAnimationImportDataV8 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileAnimationV0 =[\n\t\t\t\t'animations', Utils.getRefArrayReader(this.ModelAnimationDataV8),\n\t\t\t\t'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV0),\n\t\t\t\t'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'imports', Utils.getArrayReader(this.ModelAnimationImportDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: COLL, versions: 5, strucTab: 0x15D03A8 \n\t///==================================================\n\t{\n\t\tname:'COLL',\n\t\tversions:{\n\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.ModelCollisionKeyFrameV10 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'orientation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionAnimatedObjectV10 =[\n\t\t\t\t'shapeIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'keyFrames', Utils.getArrayReader(this.ModelCollisionKeyFrameV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionAnimationV10 =[\n\t\t\t\t'animation', Utils.getQWordReader(),\n\t\t\t\t'objects', Utils.getArrayReader(this.ModelCollisionAnimatedObjectV10),\n\t\t\t\t'targetPoints', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionMeshV10 =[\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t'navSeedPoints', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionBoxV10 =[\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSphereV10 =[\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCapsuleV10 =[\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV10 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileCollisionV10 =[\n\t\t\t\t'animations', Utils.getArrayReader(this.ModelCollisionAnimationV10),\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV10),\n\t\t\t\t'boxes', Utils.getArrayReader(this.ModelCollisionBoxV10),\n\t\t\t\t'spheres', Utils.getArrayReader(this.ModelCollisionSphereV10),\n\t\t\t\t'capsules', Utils.getArrayReader(this.ModelCollisionCapsuleV10),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV10),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3, ReferencedFunction: 0x1068760\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.ModelCollisionKeyFrameV9 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'orientation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionAnimatedObjectV9 =[\n\t\t\t\t'shapeIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'keyFrames', Utils.getArrayReader(this.ModelCollisionKeyFrameV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionAnimationV9 =[\n\t\t\t\t'animation', Utils.getQWordReader(),\n\t\t\t\t'objects', Utils.getArrayReader(this.ModelCollisionAnimatedObjectV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionMeshV9 =[\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionBoxV9 =[\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSphereV9 =[\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCapsuleV9 =[\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV9 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileCollisionV9 =[\n\t\t\t\t'animations', Utils.getArrayReader(this.ModelCollisionAnimationV9),\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV9),\n\t\t\t\t'boxes', Utils.getArrayReader(this.ModelCollisionBoxV9),\n\t\t\t\t'spheres', Utils.getArrayReader(this.ModelCollisionSphereV9),\n\t\t\t\t'capsules', Utils.getArrayReader(this.ModelCollisionCapsuleV9),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV9),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.ModelCollisionMeshV8 =[\n\t\t\t\t'animationSequences', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCloudV8 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCubeV8 =[\n\t\t\t\t'transform', ['[]', ['[]','float32',4], 3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSphereV8 =[\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCapsuleV8 =[\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV8 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileCollisionV8 =[\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV8),\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelCollisionCloudV8),\n\t\t\t\t'cubes', Utils.getArrayReader(this.ModelCollisionCubeV8),\n\t\t\t\t'spheres', Utils.getArrayReader(this.ModelCollisionSphereV8),\n\t\t\t\t'capsules', Utils.getArrayReader(this.ModelCollisionCapsuleV8),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV8),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ModelCollisionMeshV1 =[\n\t\t\t\t'animationSequences', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCloudV1 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCubeV1 =[\n\t\t\t\t'transform', ['[]', ['[]','float32',4], 3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSphereV1 =[\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV1 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileCollisionV1 =[\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV1),\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelCollisionCloudV1),\n\t\t\t\t'cubes', Utils.getArrayReader(this.ModelCollisionCubeV1),\n\t\t\t\t'spheres', Utils.getArrayReader(this.ModelCollisionSphereV1),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ModelCollisionMeshV0 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCloudV0 =[\n\t\t\t\t'animationSequence', Utils.getQWordReader(),\n\t\t\t\t'points', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionCubeV0 =[\n\t\t\t\t'transform', ['[]', ['[]','float32',4], 3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSphereV0 =[\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelCollisionSurfaceV0 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileCollisionV0 =[\n\t\t\t\t'meshes', Utils.getArrayReader(this.ModelCollisionMeshV0),\n\t\t\t\t'clouds', Utils.getArrayReader(this.ModelCollisionCloudV0),\n\t\t\t\t'cubes', Utils.getArrayReader(this.ModelCollisionCubeV0),\n\t\t\t\t'spheres', Utils.getArrayReader(this.ModelCollisionSphereV0),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: GR2S, versions: 5, strucTab: 0x15D03E4 \n\t///==================================================\n\t{\n\t\tname:'GR2S',\n\t\tversions:{\n\n\n\t\t\t// => Version: 4, ReferencedFunction: 0x1069BD0\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.ModelGr2DataV4 =[\n\t\t\t\t'filename', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileGr2sV4 =[\n\t\t\t\t'gr2Data', Utils.getArrayReader(this.ModelGr2DataV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3, ReferencedFunction: 0x1069840\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.ModelGr2DataV3 =[\n\t\t\t\t'filename', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileGr2sV3 =[\n\t\t\t\t'gr2Data', Utils.getArrayReader(this.ModelGr2DataV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2, ReferencedFunction: 0x10692C0\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.ModelGr2DataV2 =[\n\t\t\t\t'filename', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileGr2sV2 =[\n\t\t\t\t'gr2Data', Utils.getArrayReader(this.ModelGr2DataV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ModelGr2DataV1 =[\n\t\t\t\t'filename', Utils.getString16Reader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileGr2sV1 =[\n\t\t\t\t'gr2Data', Utils.getArrayReader(this.ModelGr2DataV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ModelGr2DataV0 =[\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileGr2sV0 =[\n\t\t\t\t'gr2Data', Utils.getArrayReader(this.ModelGr2DataV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: TOOL, versions: 17, strucTab: 0x15D0520 \n\t///==================================================\n\t{\n\t\tname:'TOOL',\n\t\tversions:{\n\n\n\t\t\t// => Version: 16, ReferencedFunction: 0x106A400\n\t\t\t16:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV16 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV16 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV16 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolLightningV16 =[\n\t\t\t\t'systemNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'boltNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'nodeNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV1 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t'pointers', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolAnimationV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getString16Reader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV1,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSequenceCompressionInfoV16 =[\n\t\t\t\t'animToken', Utils.getQWordReader(),\n\t\t\t\t'cmpGroup', Utils.getString16Reader(),\n\t\t\t\t'cmpType', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV16 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV16),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV16),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV16),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelToolLightningV16),\n\t\t\t\t'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'highLodAnimations', Utils.getArrayReader(this.ModelToolAnimationV16),\n\t\t\t\t'compressionInfos', Utils.getArrayReader(this.ModelSequenceCompressionInfoV16),\n\t\t\t\t'region', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 15\n\t\t\t15:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV15 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV15 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV15 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolLightningV15 =[\n\t\t\t\t'systemNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'boltNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'nodeNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolAnimationV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getString16Reader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSequenceCompressionInfoV15 =[\n\t\t\t\t'animToken', Utils.getQWordReader(),\n\t\t\t\t'cmpGroup', Utils.getString16Reader(),\n\t\t\t\t'cmpType', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV15 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV15),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV15),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV15),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelToolLightningV15),\n\t\t\t\t'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'highLodAnimations', Utils.getArrayReader(this.ModelToolAnimationV15),\n\t\t\t\t'compressionInfos', Utils.getArrayReader(this.ModelSequenceCompressionInfoV15),\n\t\t\t\t'region', Utils.getStringReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 14\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV14 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV14 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV14 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolLightningV14 =[\n\t\t\t\t'systemNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'boltNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'nodeNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolAnimationV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getString16Reader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSequenceCompressionInfoV14 =[\n\t\t\t\t'animToken', Utils.getQWordReader(),\n\t\t\t\t'cmpGroup', Utils.getString16Reader(),\n\t\t\t\t'cmpType', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV14 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV14),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV14),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV14),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelToolLightningV14),\n\t\t\t\t'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'highLodAnimations', Utils.getArrayReader(this.ModelToolAnimationV14),\n\t\t\t\t'compressionInfos', Utils.getArrayReader(this.ModelSequenceCompressionInfoV14),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV13 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV13 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV13 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolLightningV13 =[\n\t\t\t\t'systemNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'boltNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'nodeNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolAnimationV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getString16Reader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV13 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV13),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV13),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV13),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelToolLightningV13),\n\t\t\t\t'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'highLodAnimations', Utils.getArrayReader(this.ModelToolAnimationV13),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV12 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV12 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV12 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolLightningV12 =[\n\t\t\t\t'systemNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'boltNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'nodeNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyAnimationTypeV0 =[\n\t\t\t\t'animation', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolAnimationV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getString16Reader(),\n\t\t\t\t'data', this.PackGrannyAnimationTypeV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV12 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV12),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV12),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV12),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelToolLightningV12),\n\t\t\t\t'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'highLodAnimations', Utils.getArrayReader(this.ModelToolAnimationV12),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11, ReferencedFunction: 0x106A3E0\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV11 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV11 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV11 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolLightningV11 =[\n\t\t\t\t'systemNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'boltNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'nodeNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV11 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV11),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV11),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV11),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelToolLightningV11),\n\t\t\t\t'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10, ReferencedFunction: 0x106A5A0\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV10 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV10 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV10 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolLightningV10 =[\n\t\t\t\t'systemNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'boltNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'nodeNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV10 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV10),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV10),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV10),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelToolLightningV10),\n\t\t\t\t'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV9 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV9 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV9 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolLightningV9 =[\n\t\t\t\t'systemNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'boltNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'nodeNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolPropertyDataV9 =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV9 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV9),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV9),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV9),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelToolLightningV9),\n\t\t\t\t'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelToolPropertyDataV9),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV8 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV8 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV8 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolLightningV8 =[\n\t\t\t\t'systemNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'boltNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'nodeNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV8 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV8),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV8),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV8),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelToolLightningV8),\n\t\t\t\t'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV7 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV7 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV7 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolLightningV7 =[\n\t\t\t\t'systemNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'boltNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'nodeNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV7 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV7),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV7),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV7),\n\t\t\t\t'lightningData', Utils.getPointerReader(this.ModelToolLightningV7),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6, ReferencedFunction: 0x106A560\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV6 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV6 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV6 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV6 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV6),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV6),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV6),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5, ReferencedFunction: 0x106A530\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV5 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolMotionV5 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t'values', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV5 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV5 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV5 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV5),\n\t\t\t\t'motions', Utils.getArrayReader(this.ModelToolMotionV5),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV5),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV5),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV4 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolMotionV4 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t'values', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV4 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolStreakV4 =[\n\t\t\t\t'streakNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'anchorNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV4 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV4),\n\t\t\t\t'motions', Utils.getArrayReader(this.ModelToolMotionV4),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV4),\n\t\t\t\t'streakData', Utils.getPointerReader(this.ModelToolStreakV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV3 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolMotionV3 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t'values', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV3 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV3 =[\n\t\t\t\t'modelType', Utils.getQWordReader(),\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV3),\n\t\t\t\t'motions', Utils.getArrayReader(this.ModelToolMotionV3),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV2 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolMotionV2 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t'values', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolBlitTextureV2 =[\n\t\t\t\t'blitId', Utils.getQWordReader(),\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV2 =[\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV2),\n\t\t\t\t'motions', Utils.getArrayReader(this.ModelToolMotionV2),\n\t\t\t\t'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV1 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelToolMotionV1 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t'values', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV1 =[\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV1),\n\t\t\t\t'motions', Utils.getArrayReader(this.ModelToolMotionV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ModelToolCloudV0 =[\n\t\t\t\t'cloudNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'emitterNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileToolV0 =[\n\t\t\t\t'materialNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'cloudData', Utils.getPointerReader(this.ModelToolCloudV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: ROOT, versions: 2, strucTab: 0x15D0638 \n\t///==================================================\n\t{\n\t\tname:'ROOT',\n\t\tversions:{\n\n\n\t\t\t// => Version: 1, ReferencedFunction: 0x106A040\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ModelRootMotionV1 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t'posValues', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'quatValues', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileRootMotionV1 =[\n\t\t\t\t'rootMotions', Utils.getArrayReader(this.ModelRootMotionV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ModelRootMotionV0 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'keys', Utils.getArrayReader('float32'),\n\t\t\t\t'values', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileRootMotionV0 =[\n\t\t\t\t'rootMotions', Utils.getArrayReader(this.ModelRootMotionV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: GAME, versions: 1, strucTab: 0x15D05EC \n\t///==================================================\n\t{\n\t\tname:'GAME',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.ModelFileGame =[\n\t\t\t\t'gameData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: ICON, versions: 1, strucTab: 0x15D06A0 \n\t///==================================================\n\t{\n\t\tname:'ICON',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.ModelFileIcon =[\n\t\t\t\t'jpgData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: SKEL, versions: 2, strucTab: 0x15D06AC \n\t///==================================================\n\t{\n\t\tname:'SKEL',\n\t\tversions:{\n\n\n\t\t\t// => Version: 1, ReferencedFunction: 0x106A090\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ModelTransformData =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneData =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformData,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelGrannySkeletonV1 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneData),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingData =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelGrannyModelV1 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelGrannySkeletonV1),\n\t\t\t\t'InitialPlacement', this.ModelTransformData,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingData),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV63 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV63 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV63),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyMirrorSpecType =[\n\t\t\t\t'mirrorSpec', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV63 =[\n\t\t\t\t'data', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV63 =[\n\t\t\t\t'grannyModel', Utils.getPointerReader(this.ModelGrannyModelV1),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV63),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'mirrorSpec', this.PackGrannyMirrorSpecType,\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonOverridesV1 =[\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV63),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileSkeletonV1 =[\n\t\t\t\t'skeletonData', Utils.getPointerReader(this.ModelSkeletonDataV63),\n\t\t\t\t'fileReference' , Utils.getFileNameReader(),\n\t\t\t\t'overrides', Utils.getPointerReader(this.ModelSkeletonOverridesV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ModelTransformData =[\n\t\t\t\t'Flags' , 'uint32',\n\t\t\t\t'Position' , ['[]','float32',3],\n\t\t\t\t'Orientation' , ['[]','float32',4],\n\t\t\t\t'ScaleShear', ['[]', ['[]','float32',3], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneData =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'ParentIndex' , 'uint32',\n\t\t\t\t'LocalTransform', this.ModelTransformData,\n\t\t\t\t'InverseWorld4x4', ['[]', ['[]','float32',4], 4],\n\t\t\t\t'LODError' , 'float32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelGrannySkeletonV0 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Bones', Utils.getArrayReader(this.ModelBoneData),\n\t\t\t\t'LODType' , 'uint32',\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshBindingData =[\n\t\t\t\t'Mesh', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelGrannyModelV0 =[\n\t\t\t\t'Name', Utils.getStringReader(),\n\t\t\t\t'Skeleton', Utils.getPointerReader(this.ModelGrannySkeletonV0),\n\t\t\t\t'InitialPlacement', this.ModelTransformData,\n\t\t\t\t'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingData),\n\t\t\t\t'ExtendedData.Type', Utils.getPointerReader('uint8'),\n\t\t\t\t'ExtendedData.Object', Utils.getPointerReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintLinkV62 =[\n\t\t\t\t'angle' , 'float32',\n\t\t\t\t'azimuth' , 'float32',\n\t\t\t\t'distance' , ['[]','float32',2],\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneConstraintV62 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags', 'uint16',\n\t\t\t\t'twistOffset' , 'float32',\n\t\t\t\t'animBlend' , 'float32',\n\t\t\t\t'drag' , 'float32',\n\t\t\t\t'ellipseRatio' , 'float32',\n\t\t\t\t'gravity' , 'float32',\n\t\t\t\t'collisionRadius' , 'float32',\n\t\t\t\t'wind' , 'float32',\n\t\t\t\t'angle' , ['[]','float32',2],\n\t\t\t\t'angleStrength' , 'float32',\n\t\t\t\t'angleType' , 'uint8',\n\t\t\t\t'distanceInner' , ['[]','float32',2],\n\t\t\t\t'distanceInnerStrength' , 'float32',\n\t\t\t\t'distanceInnerType' , 'uint8',\n\t\t\t\t'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV62),\n\t\t\t\t'distanceOuter' , ['[]','float32',2],\n\t\t\t\t'distanceOuterStrength' , 'float32',\n\t\t\t\t'distanceOuterType' , 'uint8',\n\t\t\t\t'twist' , ['[]','float32',2],\n\t\t\t\t'twistStrength' , 'float32',\n\t\t\t\t'twistType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelBoneSymmetryV62 =[\n\t\t\t\t'boneLeft', Utils.getQWordReader(),\n\t\t\t\t'boneRight', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackGrannyTrackMaskType =[\n\t\t\t\t'trackMask', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelTrackMaskV62 =[\n\t\t\t\t'data', this.PackGrannyTrackMaskType,\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelSkeletonDataV62 =[\n\t\t\t\t'grannyModel', Utils.getPointerReader(this.ModelGrannyModelV0),\n\t\t\t\t'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV62),\n\t\t\t\t'boneFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV62),\n\t\t\t\t'emitterBones', Utils.getArrayReader('uint32'),\n\t\t\t\t'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV62),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileSkeletonV0 =[\n\t\t\t\t'skeletonData', Utils.getPointerReader(this.ModelSkeletonDataV62),\n\t\t\t\t'fileReference' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: PRPS, versions: 1, strucTab: 0x15D06C4 \n\t///==================================================\n\t{\n\t\tname:'PRPS',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ModelFixedOffsetData =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'parentBone', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelPropertyData =[\n\t\t\t\t'id', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'mergeIndex' , 'uint32',\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'val', Utils.getQWordReader(),\n\t\t\t\t'strVal' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileProperties =[\n\t\t\t\t'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetData),\n\t\t\t\t'properties', Utils.getArrayReader(this.ModelPropertyData),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: GEOM, versions: 2, strucTab: 0x15D06D0 \n\t///==================================================\n\t{\n\t\tname:'GEOM',\n\t\tversions:{\n\n\n\t\t\t// => Version: 1, ReferencedFunction: 0x1069000\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ModelMeshMorphVertV66 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV66 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV66),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV66),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshVertexDataV1 =[\n\t\t\t\t'vertexCount' , 'uint32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshIndexDataV1 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshGeometryV1 =[\n\t\t\t\t'verts', this.ModelMeshVertexDataV1,\n\t\t\t\t'indices', this.ModelMeshIndexDataV1,\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshIndexDataV1),\n\t\t\t\t'transforms', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV66 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV66),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t'boneBindings', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'geometry', Utils.getPointerReader(this.ModelMeshGeometryV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileGeometryV1 =[\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV66),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ModelMeshMorphVertV65 =[\n\t\t\t\t'index', 'uint16',\n\t\t\t\t'vector' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshMorphTargetV65 =[\n\t\t\t\t'positions', Utils.getArrayReader(this.ModelMeshMorphVertV65),\n\t\t\t\t'normals', Utils.getArrayReader(this.ModelMeshMorphVertV65),\n\t\t\t\t'mesh', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.GrBoundData =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'boxExtent' , ['[]','float32',3],\n\t\t\t\t'sphereRadius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackVertexType =[\n\t\t\t\t'fvf' , 'uint32',\n\t\t\t\t'vertices', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshVertexDataV0 =[\n\t\t\t\t'vertexCount' , 'uint32',\n\t\t\t\t'mesh', this.PackVertexType,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshIndexDataV0 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshGeometryV0 =[\n\t\t\t\t'verts', this.ModelMeshVertexDataV0,\n\t\t\t\t'indices', this.ModelMeshIndexDataV0,\n\t\t\t\t'lods', Utils.getArrayReader(this.ModelMeshIndexDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelMeshDataV65 =[\n\t\t\t\t'visBone', Utils.getQWordReader(),\n\t\t\t\t'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV65),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'seamVertIndices', Utils.getArrayReader('uint32'),\n\t\t\t\t'meshName', Utils.getQWordReader(),\n\t\t\t\t'minBound' , ['[]','float32',3],\n\t\t\t\t'maxBound' , ['[]','float32',3],\n\t\t\t\t'bounds', Utils.getArrayReader(this.GrBoundData),\n\t\t\t\t'materialIndex' , 'uint32',\n\t\t\t\t'materialName', Utils.getStringReader(),\n\t\t\t\t'boneNames', Utils.getArrayReader(Utils.getStringReader()),\n\t\t\t\t'geometry', Utils.getPointerReader(this.ModelMeshGeometryV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileGeometryV0 =[\n\t\t\t\t'meshes', Utils.getRefArrayReader(this.ModelMeshDataV65),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: EXPA, versions: 4, strucTab: 0x15D06E8 \n\t///==================================================\n\t{\n\t\tname:'EXPA',\n\t\tversions:{\n\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.ModelFileSnapPointV3 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'shape', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelExpansionEmitterV3 =[\n\t\t\t\t'curl' , 'float32',\n\t\t\t\t'vortexSize' , 'float32',\n\t\t\t\t'curlQuality' , 'uint32',\n\t\t\t\t'curlFlags' , 'uint32',\n\t\t\t\t'fieldScale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileExpansionV3 =[\n\t\t\t\t'snapPoints', Utils.getArrayReader(this.ModelFileSnapPointV3),\n\t\t\t\t'snapPointPriority' , 'float32',\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelExpansionEmitterV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.ModelFileSnapPointV2 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t'shape', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelExpansionEmitterV2 =[\n\t\t\t\t'curl' , 'float32',\n\t\t\t\t'vortexSize' , 'float32',\n\t\t\t\t'curlQuality' , 'uint32',\n\t\t\t\t'curlFlags' , 'uint32',\n\t\t\t\t'fieldScale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileExpansionV2 =[\n\t\t\t\t'snapPoints', Utils.getArrayReader(this.ModelFileSnapPointV2),\n\t\t\t\t'snapPointPriority' , 'float32',\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelExpansionEmitterV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ModelFileSnapPointV1 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelExpansionEmitterV1 =[\n\t\t\t\t'curl' , 'float32',\n\t\t\t\t'vortexSize' , 'float32',\n\t\t\t\t'curlQuality' , 'uint32',\n\t\t\t\t'curlFlags' , 'uint32',\n\t\t\t\t'fieldScale' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileExpansionV1 =[\n\t\t\t\t'snapPoints', Utils.getArrayReader(this.ModelFileSnapPointV1),\n\t\t\t\t'snapPointPriority' , 'float32',\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelExpansionEmitterV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ModelFileSnapPointV0 =[\n\t\t\t\t'bone', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ModelExpansionEmitterV0 =[\n\t\t\t\t'curl' , 'float32',\n\t\t\t\t'vortexSize' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ModelFileExpansionV0 =[\n\t\t\t\t'snapPoints', Utils.getArrayReader(this.ModelFileSnapPointV0),\n\t\t\t\t'snapPointPriority' , 'float32',\n\t\t\t\t'emitters', Utils.getArrayReader(this.ModelExpansionEmitterV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: PHYS, versions: 9, strucTab: 0x168D668 \n\t///==================================================\n\t{\n\t\tname:'PHYS',\n\t\tversions:{\n\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.SceneBoxShapeV8 =[\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneSphereShapeV8 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCapsuleShapeV8 =[\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMeshShapeV8 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneSurfaceV8 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFilePhysicsV8 =[\n\t\t\t\t'boxes', Utils.getArrayReader(this.SceneBoxShapeV8),\n\t\t\t\t'spheres', Utils.getArrayReader(this.SceneSphereShapeV8),\n\t\t\t\t'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV8),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneMeshShapeV8),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.SceneSurfaceV8),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.SceneBoxShapeV7 =[\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneSphereShapeV7 =[\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCapsuleShapeV7 =[\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMeshShapeV7 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFilePhysicsV7 =[\n\t\t\t\t'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),\n\t\t\t\t'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),\n\t\t\t\t'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.SceneShapeSurfaceV6 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneBoxShapeV6 =[\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneSphereShapeV6 =[\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCapsuleShapeV6 =[\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t'p0' , ['[]','float32',3],\n\t\t\t\t'p1' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMeshShapeV6 =[\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCollisionShapeV6 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneTriggerShapeV6 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneNamedShapeV6 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFilePhysicsV6 =[\n\t\t\t\t'surfaces', Utils.getArrayReader(this.SceneShapeSurfaceV6),\n\t\t\t\t'boxes', Utils.getArrayReader(this.SceneBoxShapeV6),\n\t\t\t\t'spheres', Utils.getArrayReader(this.SceneSphereShapeV6),\n\t\t\t\t'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV6),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneMeshShapeV6),\n\t\t\t\t'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV6),\n\t\t\t\t'triggerShapes', Utils.getArrayReader(this.SceneTriggerShapeV6),\n\t\t\t\t'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV6),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.SceneShapeSurfaceV5 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneBoxShapeV5 =[\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t'dimensions' , ['[]','float32',3],\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneSphereShapeV5 =[\n\t\t\t\t'surface' , 'uint8',\n\t\t\t\t'center' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMeshShapeV5 =[\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCollisionShapeV5 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneTriggerShapeV5 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneNamedShapeV5 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFilePhysicsV5 =[\n\t\t\t\t'surfaces', Utils.getArrayReader(this.SceneShapeSurfaceV5),\n\t\t\t\t'boxes', Utils.getArrayReader(this.SceneBoxShapeV5),\n\t\t\t\t'spheres', Utils.getArrayReader(this.SceneSphereShapeV5),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneMeshShapeV5),\n\t\t\t\t'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV5),\n\t\t\t\t'triggerShapes', Utils.getArrayReader(this.SceneTriggerShapeV5),\n\t\t\t\t'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV5),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.SceneShapeV4 =[\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneShapeSurfaceV4 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCollisionShapeV4 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneTriggerShapeV4 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneNamedShapeV4 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFilePhysicsV4 =[\n\t\t\t\t'shapeData', Utils.getArrayReader('uint8'),\n\t\t\t\t'shapes', Utils.getArrayReader(this.SceneShapeV4),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.SceneShapeSurfaceV4),\n\t\t\t\t'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV4),\n\t\t\t\t'triggerShapes', Utils.getArrayReader(this.SceneTriggerShapeV4),\n\t\t\t\t'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.SceneShapeV3 =[\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneShapeSurfaceV3 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCollisionShapeV3 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneTriggerShapeV3 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneNamedShapeV3 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathPhysicsV3 =[\n\t\t\t\t'pathData', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFilePhysicsV3 =[\n\t\t\t\t'shapeData', Utils.getArrayReader('uint8'),\n\t\t\t\t'shapes', Utils.getArrayReader(this.SceneShapeV3),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.SceneShapeSurfaceV3),\n\t\t\t\t'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV3),\n\t\t\t\t'triggerShapes', Utils.getArrayReader(this.SceneTriggerShapeV3),\n\t\t\t\t'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV3),\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathPhysicsV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.SceneShapeV2 =[\n\t\t\t\t'shapeOffset' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCollisionShapeV2 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneQueryShapeV2 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneNamedShapeV2 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathPhysicsV2 =[\n\t\t\t\t'pathData', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFilePhysicsV2 =[\n\t\t\t\t'shapeData', Utils.getArrayReader('uint8'),\n\t\t\t\t'shapes', Utils.getArrayReader(this.SceneShapeV2),\n\t\t\t\t'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV2),\n\t\t\t\t'queryShapes', Utils.getArrayReader(this.SceneQueryShapeV2),\n\t\t\t\t'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV2),\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathPhysicsV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.SceneShapeV1 =[\n\t\t\t\t'shapeOffset' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCollisionShapeV1 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneNamedShapeV1 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathPhysicsV1 =[\n\t\t\t\t'pathData', Utils.getArrayReader(['[]','float32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFilePhysicsV1 =[\n\t\t\t\t'shapeData', Utils.getArrayReader('uint8'),\n\t\t\t\t'shapes', Utils.getArrayReader(this.SceneShapeV1),\n\t\t\t\t'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV1),\n\t\t\t\t'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV1),\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathPhysicsV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.SceneShapeV0 =[\n\t\t\t\t'shapeOffset' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneCollisionShapeV0 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneNamedShapeV0 =[\n\t\t\t\t'shapeIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFilePhysicsV0 =[\n\t\t\t\t'shapeData', Utils.getArrayReader('uint8'),\n\t\t\t\t'shapes', Utils.getArrayReader(this.SceneShapeV0),\n\t\t\t\t'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV0),\n\t\t\t\t'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: ANIM, versions: 3, strucTab: 0x168D6D4 \n\t///==================================================\n\t{\n\t\tname:'ANIM',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.SceneKeyframeV2 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMotionV2 =[\n\t\t\t\t'keys', Utils.getArrayReader(this.SceneKeyframeV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneActionPointV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'motion', this.SceneMotionV2,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneAnimationEventV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneAnimationV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'motion', this.SceneMotionV2,\n\t\t\t\t'actionPoints', Utils.getArrayReader(this.SceneActionPointV2),\n\t\t\t\t'events', Utils.getArrayReader(this.SceneAnimationEventV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneTransformV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'translation' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePoseV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'transforms', Utils.getArrayReader(this.SceneTransformV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneImportSequenceV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneAnimationImportV2 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'animNames', Utils.getArrayReader(this.SceneImportSequenceV2),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileAnimationV2 =[\n\t\t\t\t'animations', Utils.getArrayReader(this.SceneAnimationV2),\n\t\t\t\t'poses', Utils.getArrayReader(this.ScenePoseV2),\n\t\t\t\t'imports', Utils.getArrayReader(this.SceneAnimationImportV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.SceneKeyframeV1 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMotionV1 =[\n\t\t\t\t'keys', Utils.getArrayReader(this.SceneKeyframeV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneActionPointV1 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'motion', this.SceneMotionV1,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneAnimationEventV1 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'time' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneAnimationV1 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'motion', this.SceneMotionV1,\n\t\t\t\t'actionPoints', Utils.getArrayReader(this.SceneActionPointV1),\n\t\t\t\t'events', Utils.getArrayReader(this.SceneAnimationEventV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneAnimationImportV1 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'animNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileAnimationV1 =[\n\t\t\t\t'animations', Utils.getArrayReader(this.SceneAnimationV1),\n\t\t\t\t'imports', Utils.getArrayReader(this.SceneAnimationImportV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.SceneKeyframeV0 =[\n\t\t\t\t'time' , 'float32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneMotionV0 =[\n\t\t\t\t'keys', Utils.getArrayReader(this.SceneKeyframeV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneActionPointV0 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'motion', this.SceneMotionV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneAnimationV0 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'motion', this.SceneMotionV0,\n\t\t\t\t'actionPoints', Utils.getArrayReader(this.SceneActionPointV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneAnimationImportV0 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'animNames', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileAnimationV0 =[\n\t\t\t\t'animations', Utils.getArrayReader(this.SceneAnimationV0),\n\t\t\t\t'imports', Utils.getArrayReader(this.SceneAnimationImportV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: GAME, versions: 7, strucTab: 0x168D6F8 \n\t///==================================================\n\t{\n\t\tname:'GAME',\n\t\tversions:{\n\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.ScenePathNodeV6 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t'singlesided' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV6 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV6),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV6 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV6 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV6),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'surfaces', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameSurfaceV6 =[\n\t\t\t\t'tokens', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileGameV6 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV6),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV6),\n\t\t\t\t'surfaces', Utils.getArrayReader(this.SceneGameSurfaceV6),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.ScenePathNodeV5 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t'singlesided' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV5 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV5),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV5 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV5 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV5),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'surfaceFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileGameV5 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV5),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV5),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.ScenePathNodeV4 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t'singlesided' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV4 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV4),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV4 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV4 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV4),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'surfaceFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGrabNodeV4 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileGameV4 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV4),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV4),\n\t\t\t\t'grabPoints', Utils.getArrayReader(this.SceneGrabNodeV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.ScenePathNodeV3 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV3 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV3),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV3 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV3 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV3),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t'surfaceFlags', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGrabNodeV3 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileGameV3 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV3),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV3),\n\t\t\t\t'grabPoints', Utils.getArrayReader(this.SceneGrabNodeV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.ScenePathNodeV2 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV2 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV2),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV2 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV2 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV2),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGrabNodeV2 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileGameV2 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV2),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV2),\n\t\t\t\t'grabPoints', Utils.getArrayReader(this.SceneGrabNodeV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ScenePathNodeV1 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'smoothing' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV1 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV1),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV1 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV1 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV1),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileGameV1 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV1),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ScenePathNodeV0 =[\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'rotation' , ['[]','float32',4],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ScenePathV0 =[\n\t\t\t\t'properties', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'points', Utils.getArrayReader(this.ScenePathNodeV0),\n\t\t\t\t'closed' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneEdgeV0 =[\n\t\t\t\t'indices', ['[]', 'uint32', 2],\n\t\t\t\t'triangles', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneGameMeshV0 =[\n\t\t\t\t'indices', Utils.getArrayReader('uint16'),\n\t\t\t\t'vertices', Utils.getArrayReader(['[]','float32',3]),\n\t\t\t\t'edges', Utils.getArrayReader(this.SceneEdgeV0),\n\t\t\t\t'moppInfo' , ['[]','float32',4],\n\t\t\t\t'moppBytes', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileGameV0 =[\n\t\t\t\t'paths', Utils.getArrayReader(this.ScenePathV0),\n\t\t\t\t'meshes', Utils.getArrayReader(this.SceneGameMeshV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: SKEL, versions: 4, strucTab: 0x168D74C \n\t///==================================================\n\t{\n\t\tname:'SKEL',\n\t\tversions:{\n\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.SceneBoneV3 =[\n\t\t\t\t'vertexA' , ['[]','float32',3],\n\t\t\t\t'vertexB' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'mass' , 'float32',\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneJointV3 =[\n\t\t\t\t'bones', ['[]', 'uint32', 2],\n\t\t\t\t'pivots', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'twists', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'planes', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'coneLimit' , 'float32',\n\t\t\t\t'planeMin' , 'float32',\n\t\t\t\t'planeMax' , 'float32',\n\t\t\t\t'twistMin' , 'float32',\n\t\t\t\t'twistMax' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneHingeJointV3 =[\n\t\t\t\t'bones', ['[]', 'uint32', 2],\n\t\t\t\t'pivots', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'hinges', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'normals', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'limitMin' , 'float32',\n\t\t\t\t'limitMax' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileSkeletonV3 =[\n\t\t\t\t'bones', Utils.getArrayReader(this.SceneBoneV3),\n\t\t\t\t'joints', Utils.getArrayReader(this.SceneJointV3),\n\t\t\t\t'hingeJoints', Utils.getArrayReader(this.SceneHingeJointV3),\n\t\t\t\t'ragdollToModel', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.SceneBoneV2 =[\n\t\t\t\t'vertexA' , ['[]','float32',3],\n\t\t\t\t'vertexB' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'mass' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneJointV2 =[\n\t\t\t\t'bones', ['[]', 'uint32', 2],\n\t\t\t\t'pivots', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'twists', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'planes', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'coneLimit' , 'float32',\n\t\t\t\t'planeMin' , 'float32',\n\t\t\t\t'planeMax' , 'float32',\n\t\t\t\t'twistMin' , 'float32',\n\t\t\t\t'twistMax' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneHingeJointV2 =[\n\t\t\t\t'bones', ['[]', 'uint32', 2],\n\t\t\t\t'pivots', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'hinges', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'normals', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'limitMin' , 'float32',\n\t\t\t\t'limitMax' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileSkeletonV2 =[\n\t\t\t\t'bones', Utils.getArrayReader(this.SceneBoneV2),\n\t\t\t\t'joints', Utils.getArrayReader(this.SceneJointV2),\n\t\t\t\t'hingeJoints', Utils.getArrayReader(this.SceneHingeJointV2),\n\t\t\t\t'ragdollToModel', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.SceneBoneV1 =[\n\t\t\t\t'vertexA' , ['[]','float32',3],\n\t\t\t\t'vertexB' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'mass' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneJointV1 =[\n\t\t\t\t'bones', ['[]', 'uint32', 2],\n\t\t\t\t'pivots', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'twists', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'planes', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'coneLimit' , 'float32',\n\t\t\t\t'planeMin' , 'float32',\n\t\t\t\t'planeMax' , 'float32',\n\t\t\t\t'twistMin' , 'float32',\n\t\t\t\t'twistMax' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneHingeJointV1 =[\n\t\t\t\t'bones', ['[]', 'uint32', 2],\n\t\t\t\t'pivots', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'hinges', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'normals', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'limitMin' , 'float32',\n\t\t\t\t'limitMax' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneUnmappedBoneV1 =[\n\t\t\t\t'modelBoneIndex' , 'uint32',\n\t\t\t\t'sceneBoneIndex' , 'uint32',\n\t\t\t\t'localPose', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileSkeletonV1 =[\n\t\t\t\t'bones', Utils.getArrayReader(this.SceneBoneV1),\n\t\t\t\t'joints', Utils.getArrayReader(this.SceneJointV1),\n\t\t\t\t'hingeJoints', Utils.getArrayReader(this.SceneHingeJointV1),\n\t\t\t\t'unmappedBones', Utils.getArrayReader(this.SceneUnmappedBoneV1),\n\t\t\t\t'ragdollToModel', Utils.getArrayReader('uint32'),\n\t\t\t\t'modelToRagdoll', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.SceneBoneV0 =[\n\t\t\t\t'vertexA' , ['[]','float32',3],\n\t\t\t\t'vertexB' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t'mass' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneJointV0 =[\n\t\t\t\t'bones', ['[]', 'uint32', 2],\n\t\t\t\t'pivots', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'twists', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'planes', ['[]', ['[]','float32',3], 2],\n\t\t\t\t'coneLimit' , 'float32',\n\t\t\t\t'planeMin' , 'float32',\n\t\t\t\t'planeMax' , 'float32',\n\t\t\t\t'twistMin' , 'float32',\n\t\t\t\t'twistMax' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.SceneUnmappedBoneV0 =[\n\t\t\t\t'modelBoneIndex' , 'uint32',\n\t\t\t\t'sceneBoneIndex' , 'uint32',\n\t\t\t\t'localPose', ['[]', ['[]','float32',4], 3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.SceneFileSkeletonV0 =[\n\t\t\t\t'bones', Utils.getArrayReader(this.SceneBoneV0),\n\t\t\t\t'joints', Utils.getArrayReader(this.SceneJointV0),\n\t\t\t\t'unmappedBones', Utils.getArrayReader(this.SceneUnmappedBoneV0),\n\t\t\t\t'ragdollToModel', Utils.getArrayReader('uint32'),\n\t\t\t\t'modelToRagdoll', Utils.getArrayReader('uint32'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: MFST, versions: 7, strucTab: 0x1691408 \n\t///==================================================\n\t{\n\t\tname:'MFST',\n\t\tversions:{\n\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.PackAssetManifestRecord =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'size' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestStream =[\n\t\t\t\t'parentBaseId' , 'uint32',\n\t\t\t\t'streamBaseId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestProperty =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestPropertyIndex =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'properyIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAssetManifest =[\n\t\t\t\t'buildId' , 'uint32',\n\t\t\t\t'totalRecordSize', Utils.getQWordReader(),\n\t\t\t\t'records', Utils.getArrayReader(this.PackAssetManifestRecord),\n\t\t\t\t'streams', Utils.getArrayReader(this.PackAssetManifestStream),\n\t\t\t\t'properties', Utils.getArrayReader(this.PackAssetManifestProperty),\n\t\t\t\t'propertyTable', Utils.getArrayReader(this.PackAssetManifestPropertyIndex),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.PackAssetManifestRecordV5 =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'size' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestStreamV5 =[\n\t\t\t\t'parentBaseId' , 'uint32',\n\t\t\t\t'streamBaseId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestPropertyV5 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestPropertyIndexV5 =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'properyIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAssetManifestV5 =[\n\t\t\t\t'buildId' , 'uint32',\n\t\t\t\t'records', Utils.getArrayReader(this.PackAssetManifestRecordV5),\n\t\t\t\t'streams', Utils.getArrayReader(this.PackAssetManifestStreamV5),\n\t\t\t\t'properties', Utils.getArrayReader(this.PackAssetManifestPropertyV5),\n\t\t\t\t'propertyTable', Utils.getArrayReader(this.PackAssetManifestPropertyIndexV5),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.PackAssetManifestRecordV4 =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'size' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestStreamV4 =[\n\t\t\t\t'parentBaseId' , 'uint32',\n\t\t\t\t'streamBaseId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestOptionsV4 =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestPropertyV4 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'data', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestPropertyIndexV4 =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'properyIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAssetManifestV4 =[\n\t\t\t\t'buildId' , 'uint32',\n\t\t\t\t'records', Utils.getArrayReader(this.PackAssetManifestRecordV4),\n\t\t\t\t'streams', Utils.getArrayReader(this.PackAssetManifestStreamV4),\n\t\t\t\t'options', Utils.getArrayReader(this.PackAssetManifestOptionsV4),\n\t\t\t\t'properties', Utils.getArrayReader(this.PackAssetManifestPropertyV4),\n\t\t\t\t'propertyTable', Utils.getArrayReader(this.PackAssetManifestPropertyIndexV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PackAssetManifestRecordV3 =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'size' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestStreamV3 =[\n\t\t\t\t'parentBaseId' , 'uint32',\n\t\t\t\t'streamBaseId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestOptionsV3 =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAssetManifestV3 =[\n\t\t\t\t'buildId' , 'uint32',\n\t\t\t\t'records', Utils.getArrayReader(this.PackAssetManifestRecordV3),\n\t\t\t\t'streams', Utils.getArrayReader(this.PackAssetManifestStreamV3),\n\t\t\t\t'options', Utils.getArrayReader(this.PackAssetManifestOptionsV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackAssetManifestRecordV2 =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'size' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestStreamV2 =[\n\t\t\t\t'parentBaseId' , 'uint32',\n\t\t\t\t'streamBaseId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAssetManifestV2 =[\n\t\t\t\t'buildId' , 'uint32',\n\t\t\t\t'records', Utils.getArrayReader(this.PackAssetManifestRecordV2),\n\t\t\t\t'streams', Utils.getArrayReader(this.PackAssetManifestStreamV2),\n\t\t\t\t'noDeltaRecords', Utils.getArrayReader(this.PackAssetManifestRecordV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackAssetManifestRecordV1 =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'size' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetManifestStreamV1 =[\n\t\t\t\t'parentBaseId' , 'uint32',\n\t\t\t\t'streamBaseId' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAssetManifestV1 =[\n\t\t\t\t'buildId' , 'uint32',\n\t\t\t\t'records', Utils.getArrayReader(this.PackAssetManifestRecordV1),\n\t\t\t\t'streams', Utils.getArrayReader(this.PackAssetManifestStreamV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackAssetManifestRecordV0 =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'size' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAssetManifestV0 =[\n\t\t\t\t'buildId' , 'uint32',\n\t\t\t\t'records', Utils.getArrayReader(this.PackAssetManifestRecordV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: ARMF, versions: 2, strucTab: 0x1691468 \n\t///==================================================\n\t{\n\t\tname:'ARMF',\n\t\tversions:{\n\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackAssetManifestFile =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'size' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAssetExtraFile =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'size' , 'uint32',\n\t\t\t\t'fileType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAssetRootManifest =[\n\t\t\t\t'buildId' , 'uint32',\n\t\t\t\t'manifests', Utils.getArrayReader(this.PackAssetManifestFile),\n\t\t\t\t'extraFiles', Utils.getArrayReader(this.PackAssetExtraFile),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackAssetExtraFile =[\n\t\t\t\t'baseId' , 'uint32',\n\t\t\t\t'fileId' , 'uint32',\n\t\t\t\t'size' , 'uint32',\n\t\t\t\t'fileType' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAssetRootManifestV0 =[\n\t\t\t\t'buildId' , 'uint32',\n\t\t\t\t'extraFiles', Utils.getArrayReader(this.PackAssetExtraFile),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: TKAC, versions: 1, strucTab: 0x16923B8 \n\t///==================================================\n\t{\n\t\tname:'TKAC',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.KeyEntry =[\n\t\t\t\t'assetType' , 'uint32',\n\t\t\t\t'assetId' , 'uint32',\n\t\t\t\t'key', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.KeyTableData =[\n\t\t\t\t'keyEntryArr', Utils.getArrayReader(this.KeyEntry),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: main, versions: 1, strucTab: 0x16E3B90 \n\t///==================================================\n\t{\n\t\tname:'main',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.CollideNavMeshChunkRef =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkFilename' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.CollideNavMesh =[\n\t\t\t\t'boundsMin' , ['[]','float32',3],\n\t\t\t\t'boundsMax' , ['[]','float32',3],\n\t\t\t\t'chunkDims', ['[]', 'uint32', 2],\n\t\t\t\t'chunkRefArray', Utils.getArrayReader(this.CollideNavMeshChunkRef),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: main, versions: 1, strucTab: 0x16E3BA8 \n\t///==================================================\n\t{\n\t\tname:'main',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.__root=this.CollideNavMeshChunk =[\n\t\t\t\t'navMeshData', Utils.getArrayReader('uint8'),\n\t\t\t\t'coarseGraphData', Utils.getArrayReader('uint8'),\n\t\t\t\t'queryMediatorMoppData', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: main, versions: 2, strucTab: 0x16E3BC0 \n\t///==================================================\n\t{\n\t\tname:'main',\n\t\tversions:{\n\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.CollideModelManifestFile =[\n\t\t\t\t'modelFileStr', Utils.getString16Reader(),\n\t\t\t\t'modelFile', Utils.getFileNameReader(),\n\t\t\t\t'collisionFile', Utils.getFileNameReader(),\n\t\t\t\t'scales', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.CollideModelManifest =[\n\t\t\t\t'files', Utils.getArrayReader(this.CollideModelManifestFile),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.CollideModelManifestFile =[\n\t\t\t\t'modelFile', Utils.getFileNameReader(),\n\t\t\t\t'collisionFile', Utils.getFileNameReader(),\n\t\t\t\t'scales', Utils.getArrayReader('float32'),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.CollideModelManifest =[\n\t\t\t\t'files', Utils.getArrayReader(this.CollideModelManifestFile),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: comp, versions: 19, strucTab: 0x16E8D38 \n\t///==================================================\n\t{\n\t\tname:'comp',\n\t\tversions:{\n\n\n\t\t\t// => Version: 18\n\t\t\t18:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV18 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleParamV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'scale' , ['[]','float32',3],\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleRegionV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeMorphWeightV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleV18 =[\n\t\t\t\t'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV18),\n\t\t\t\t'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleFileV18 =[\n\t\t\t\t'fileName', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV18 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'animRoleOverride', Utils.getQWordReader(),\n\t\t\t\t'meshBase', Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap', Utils.getFileNameReader(),\n\t\t\t\t'maskDye1', Utils.getFileNameReader(),\n\t\t\t\t'maskDye2', Utils.getFileNameReader(),\n\t\t\t\t'maskDye3', Utils.getFileNameReader(),\n\t\t\t\t'maskDye4', Utils.getFileNameReader(),\n\t\t\t\t'maskCut', Utils.getFileNameReader(),\n\t\t\t\t'textureBase', Utils.getFileNameReader(),\n\t\t\t\t'textureNormal', Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV18 =[\n\t\t\t\t'chest', Utils.getFileNameReader(),\n\t\t\t\t'face', Utils.getFileNameReader(),\n\t\t\t\t'feet', Utils.getFileNameReader(),\n\t\t\t\t'hands', Utils.getFileNameReader(),\n\t\t\t\t'legs', Utils.getFileNameReader(),\n\t\t\t\t'ears', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinStyleV18 =[\n\t\t\t\t'chest', Utils.getQWordReader(),\n\t\t\t\t'feet', Utils.getQWordReader(),\n\t\t\t\t'hands', Utils.getQWordReader(),\n\t\t\t\t'legs', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV18 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV18 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV18,\n\t\t\t\t'color1', this.PackCompositeColorV18,\n\t\t\t\t'color2', this.PackCompositeColorV18,\n\t\t\t\t'color3', this.PackCompositeColorV18,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV18 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'boneScaleIndex' , 'uint32',\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV18),\n\t\t\t\t'eyeColor', this.PackCompositeColorV18,\n\t\t\t\t'hairColor', this.PackCompositeColorV18,\n\t\t\t\t'hairColor2', this.PackCompositeColorV18,\n\t\t\t\t'patternColor', this.PackCompositeColorV18,\n\t\t\t\t'skinColor', this.PackCompositeColorV18,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeAnimOverrideV18 =[\n\t\t\t\t'animRole', Utils.getQWordReader(),\n\t\t\t\t'filepath', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV18 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV18),\n\t\t\t\t'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV18),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'eyeColorPalette', Utils.getString16Reader(),\n\t\t\t\t'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV18),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV18),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile', Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV18),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'skinStyles', Utils.getArrayReader(this.PackCompositeSkinStyleV18),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV18),\n\t\t\t\t'animOverrides', Utils.getArrayReader(this.PackCompositeAnimOverrideV18),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV18 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV18),\n\t\t\t\t'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV18),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV18),\n\t\t\t\t'configVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 17, ReferencedFunction: 0x1228AB0\n\t\t\t17:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV17 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleParamV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'scale' , ['[]','float32',3],\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleRegionV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeMorphWeightV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleV17 =[\n\t\t\t\t'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV17),\n\t\t\t\t'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleFileV17 =[\n\t\t\t\t'fileName', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV17 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'meshBase', Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap', Utils.getFileNameReader(),\n\t\t\t\t'maskDye1', Utils.getFileNameReader(),\n\t\t\t\t'maskDye2', Utils.getFileNameReader(),\n\t\t\t\t'maskDye3', Utils.getFileNameReader(),\n\t\t\t\t'maskDye4', Utils.getFileNameReader(),\n\t\t\t\t'maskCut', Utils.getFileNameReader(),\n\t\t\t\t'textureBase', Utils.getFileNameReader(),\n\t\t\t\t'textureNormal', Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV17 =[\n\t\t\t\t'chest', Utils.getFileNameReader(),\n\t\t\t\t'face', Utils.getFileNameReader(),\n\t\t\t\t'feet', Utils.getFileNameReader(),\n\t\t\t\t'hands', Utils.getFileNameReader(),\n\t\t\t\t'legs', Utils.getFileNameReader(),\n\t\t\t\t'ears', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinStyleV17 =[\n\t\t\t\t'chest', Utils.getQWordReader(),\n\t\t\t\t'feet', Utils.getQWordReader(),\n\t\t\t\t'hands', Utils.getQWordReader(),\n\t\t\t\t'legs', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV17 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV17 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV17,\n\t\t\t\t'color1', this.PackCompositeColorV17,\n\t\t\t\t'color2', this.PackCompositeColorV17,\n\t\t\t\t'color3', this.PackCompositeColorV17,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV17 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'boneScaleIndex' , 'uint32',\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV17),\n\t\t\t\t'eyeColor', this.PackCompositeColorV17,\n\t\t\t\t'hairColor', this.PackCompositeColorV17,\n\t\t\t\t'hairColor2', this.PackCompositeColorV17,\n\t\t\t\t'patternColor', this.PackCompositeColorV17,\n\t\t\t\t'skinColor', this.PackCompositeColorV17,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeAnimOverrideV17 =[\n\t\t\t\t'animRole', Utils.getQWordReader(),\n\t\t\t\t'filepath', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV17 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV17),\n\t\t\t\t'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV17),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'eyeColorPalette', Utils.getString16Reader(),\n\t\t\t\t'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV17),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV17),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile', Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV17),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'skinStyles', Utils.getArrayReader(this.PackCompositeSkinStyleV17),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV17),\n\t\t\t\t'animOverrides', Utils.getArrayReader(this.PackCompositeAnimOverrideV17),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV17 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV17),\n\t\t\t\t'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV17),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV17),\n\t\t\t\t'configVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 16, ReferencedFunction: 0x1228710\n\t\t\t16:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV16 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleParamV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'scale' , ['[]','float32',3],\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleRegionV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeMorphWeightV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleV16 =[\n\t\t\t\t'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV16),\n\t\t\t\t'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleFileV16 =[\n\t\t\t\t'fileName', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV16 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'meshBase', Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap', Utils.getFileNameReader(),\n\t\t\t\t'maskDye1', Utils.getFileNameReader(),\n\t\t\t\t'maskDye2', Utils.getFileNameReader(),\n\t\t\t\t'maskDye3', Utils.getFileNameReader(),\n\t\t\t\t'maskDye4', Utils.getFileNameReader(),\n\t\t\t\t'maskCut', Utils.getFileNameReader(),\n\t\t\t\t'textureBase', Utils.getFileNameReader(),\n\t\t\t\t'textureNormal', Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV16 =[\n\t\t\t\t'chest', Utils.getFileNameReader(),\n\t\t\t\t'face', Utils.getFileNameReader(),\n\t\t\t\t'feet', Utils.getFileNameReader(),\n\t\t\t\t'hands', Utils.getFileNameReader(),\n\t\t\t\t'legs', Utils.getFileNameReader(),\n\t\t\t\t'ears', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV16 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV16 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV16,\n\t\t\t\t'color1', this.PackCompositeColorV16,\n\t\t\t\t'color2', this.PackCompositeColorV16,\n\t\t\t\t'color3', this.PackCompositeColorV16,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV16 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'boneScaleIndex' , 'uint32',\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV16),\n\t\t\t\t'eyeColor', this.PackCompositeColorV16,\n\t\t\t\t'hairColor', this.PackCompositeColorV16,\n\t\t\t\t'hairColor2', this.PackCompositeColorV16,\n\t\t\t\t'patternColor', this.PackCompositeColorV16,\n\t\t\t\t'skinColor', this.PackCompositeColorV16,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeAnimOverrideV16 =[\n\t\t\t\t'animRole', Utils.getQWordReader(),\n\t\t\t\t'filepath', Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV16 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV16),\n\t\t\t\t'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV16),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'eyeColorPalette', Utils.getString16Reader(),\n\t\t\t\t'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV16),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV16),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile', Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV16),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'skinStyleCount' , 'uint8',\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV16),\n\t\t\t\t'animOverrides', Utils.getArrayReader(this.PackCompositeAnimOverrideV16),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV16 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV16),\n\t\t\t\t'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV16),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV16),\n\t\t\t\t'configVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 15\n\t\t\t15:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV15 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleParamV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'scale' , ['[]','float32',3],\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleRegionV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeMorphWeightV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleV15 =[\n\t\t\t\t'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV15),\n\t\t\t\t'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleFileV15 =[\n\t\t\t\t'fileName', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV15 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV15 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t'ears' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV15 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV15 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV15,\n\t\t\t\t'color1', this.PackCompositeColorV15,\n\t\t\t\t'color2', this.PackCompositeColorV15,\n\t\t\t\t'color3', this.PackCompositeColorV15,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV15 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'boneScaleIndex' , 'uint32',\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV15),\n\t\t\t\t'eyeColor', this.PackCompositeColorV15,\n\t\t\t\t'hairColor', this.PackCompositeColorV15,\n\t\t\t\t'hairColor2', this.PackCompositeColorV15,\n\t\t\t\t'patternColor', this.PackCompositeColorV15,\n\t\t\t\t'skinColor', this.PackCompositeColorV15,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeAnimOverrideV15 =[\n\t\t\t\t'animRole', Utils.getQWordReader(),\n\t\t\t\t'filepath' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV15 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV15),\n\t\t\t\t'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV15),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'eyeColorPalette', Utils.getString16Reader(),\n\t\t\t\t'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV15),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV15),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV15),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'skinStyleCount' , 'uint8',\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV15),\n\t\t\t\t'animOverrides', Utils.getArrayReader(this.PackCompositeAnimOverrideV15),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV15 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV15),\n\t\t\t\t'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV15),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV15),\n\t\t\t\t'configVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 14\n\t\t\t14:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV14 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleParamV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'scale' , ['[]','float32',3],\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleRegionV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeMorphWeightV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleV14 =[\n\t\t\t\t'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV14),\n\t\t\t\t'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleFileV14 =[\n\t\t\t\t'fileName', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV14 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV14 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t'ears' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV14 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV14 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV14,\n\t\t\t\t'color1', this.PackCompositeColorV14,\n\t\t\t\t'color2', this.PackCompositeColorV14,\n\t\t\t\t'color3', this.PackCompositeColorV14,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV14 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'boneScaleIndex' , 'uint32',\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV14),\n\t\t\t\t'eyeColor', this.PackCompositeColorV14,\n\t\t\t\t'hairColor', this.PackCompositeColorV14,\n\t\t\t\t'hairColor2', this.PackCompositeColorV14,\n\t\t\t\t'patternColor', this.PackCompositeColorV14,\n\t\t\t\t'skinColor', this.PackCompositeColorV14,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV14 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV14),\n\t\t\t\t'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV14),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'eyeColorPalette', Utils.getString16Reader(),\n\t\t\t\t'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV14),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV14),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV14),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'skinStyleCount' , 'uint8',\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV14),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV14 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV14),\n\t\t\t\t'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV14),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV14),\n\t\t\t\t'configVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 13\n\t\t\t13:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV13 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleParamV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'scale' , ['[]','float32',3],\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleRegionV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeMorphWeightV13 =[\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleV13 =[\n\t\t\t\t'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV13),\n\t\t\t\t'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleFileV13 =[\n\t\t\t\t'fileName', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV13 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV13 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t'ears' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV13 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV13 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV13,\n\t\t\t\t'color1', this.PackCompositeColorV13,\n\t\t\t\t'color2', this.PackCompositeColorV13,\n\t\t\t\t'color3', this.PackCompositeColorV13,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV13 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'boneScaleIndex' , 'uint32',\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV13),\n\t\t\t\t'hairColor', this.PackCompositeColorV13,\n\t\t\t\t'hairColor2', this.PackCompositeColorV13,\n\t\t\t\t'patternColor', this.PackCompositeColorV13,\n\t\t\t\t'skinColor', this.PackCompositeColorV13,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV13 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV13),\n\t\t\t\t'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV13),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV13),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV13),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV13),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'skinStyleCount' , 'uint8',\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV13),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV13 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV13),\n\t\t\t\t'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV13),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV13),\n\t\t\t\t'configVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 12\n\t\t\t12:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV12 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleParamV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'scale' , ['[]','float32',3],\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleRegionV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeMorphWeightV12 =[\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleV12 =[\n\t\t\t\t'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV12),\n\t\t\t\t'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleFileV12 =[\n\t\t\t\t'fileName', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV12 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV12 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t'ears' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV12 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV12 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV12,\n\t\t\t\t'color1', this.PackCompositeColorV12,\n\t\t\t\t'color2', this.PackCompositeColorV12,\n\t\t\t\t'color3', this.PackCompositeColorV12,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV12 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'boneScaleIndex' , 'uint32',\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV12),\n\t\t\t\t'hairColor', this.PackCompositeColorV12,\n\t\t\t\t'hairColor2', this.PackCompositeColorV12,\n\t\t\t\t'patternColor', this.PackCompositeColorV12,\n\t\t\t\t'skinColor', this.PackCompositeColorV12,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV12 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV12),\n\t\t\t\t'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV12),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV12),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV12),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV12),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'skinStyleCount' , 'uint8',\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV12),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV12 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV12),\n\t\t\t\t'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV12),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV12),\n\t\t\t\t'configVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 11, ReferencedFunction: 0x12286D0\n\t\t\t11:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV11 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleParamV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t'max' , 'float32',\n\t\t\t\t'min' , 'float32',\n\t\t\t\t'rotate' , ['[]','float32',3],\n\t\t\t\t'scale' , ['[]','float32',3],\n\t\t\t\t'translate' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleRegionV11 =[\n\t\t\t\t'value' , 'float32',\n\t\t\t\t'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeBoneScaleV11 =[\n\t\t\t\t'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV11 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV11 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t'ears' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV11 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV11 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV11,\n\t\t\t\t'color1', this.PackCompositeColorV11,\n\t\t\t\t'color2', this.PackCompositeColorV11,\n\t\t\t\t'color3', this.PackCompositeColorV11,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV11 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'boneScaleIndex' , 'uint32',\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV11),\n\t\t\t\t'hairColor', this.PackCompositeColorV11,\n\t\t\t\t'hairColor2', this.PackCompositeColorV11,\n\t\t\t\t'patternColor', this.PackCompositeColorV11,\n\t\t\t\t'skinColor', this.PackCompositeColorV11,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV11 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV11),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV11),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV11),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV11 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV11),\n\t\t\t\t'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV11),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV11),\n\t\t\t\t'configVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 10\n\t\t\t10:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV10 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV10 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV10 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t'ears' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV10 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV10 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV10,\n\t\t\t\t'color1', this.PackCompositeColorV10,\n\t\t\t\t'color2', this.PackCompositeColorV10,\n\t\t\t\t'color3', this.PackCompositeColorV10,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV10 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV10),\n\t\t\t\t'hairColor', this.PackCompositeColorV10,\n\t\t\t\t'hairColor2', this.PackCompositeColorV10,\n\t\t\t\t'patternColor', this.PackCompositeColorV10,\n\t\t\t\t'skinColor', this.PackCompositeColorV10,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV10 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV10),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV10),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV10),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV10 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV10),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV10),\n\t\t\t\t'configVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 9\n\t\t\t9:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV9 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV9 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV9 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t'ears' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV9 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV9 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV9,\n\t\t\t\t'color1', this.PackCompositeColorV9,\n\t\t\t\t'color2', this.PackCompositeColorV9,\n\t\t\t\t'color3', this.PackCompositeColorV9,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV9 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV9),\n\t\t\t\t'hairColor', this.PackCompositeColorV9,\n\t\t\t\t'hairColor2', this.PackCompositeColorV9,\n\t\t\t\t'patternColor', this.PackCompositeColorV9,\n\t\t\t\t'skinColor', this.PackCompositeColorV9,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV9 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV9),\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV9),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV9),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV9 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV9),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV9),\n\t\t\t\t'configVersion', 'uint16',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 8\n\t\t\t8:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV8 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV8 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV8 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t'ears' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV8 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV8 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV8,\n\t\t\t\t'color1', this.PackCompositeColorV8,\n\t\t\t\t'color2', this.PackCompositeColorV8,\n\t\t\t\t'color3', this.PackCompositeColorV8,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV8 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV8),\n\t\t\t\t'hairColor', this.PackCompositeColorV8,\n\t\t\t\t'hairColor2', this.PackCompositeColorV8,\n\t\t\t\t'patternColor', this.PackCompositeColorV8,\n\t\t\t\t'skinColor', this.PackCompositeColorV8,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV8 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'baseHeadToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV8),\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV8),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV8),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV8 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV8),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV8),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 7\n\t\t\t7:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV7 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV7 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV7 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t'ears' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV7 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV7 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV7,\n\t\t\t\t'color1', this.PackCompositeColorV7,\n\t\t\t\t'color2', this.PackCompositeColorV7,\n\t\t\t\t'color3', this.PackCompositeColorV7,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV7 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV7),\n\t\t\t\t'hairColor', this.PackCompositeColorV7,\n\t\t\t\t'hairColor2', this.PackCompositeColorV7,\n\t\t\t\t'patternColor', this.PackCompositeColorV7,\n\t\t\t\t'skinColor', this.PackCompositeColorV7,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV7 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV7),\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV7),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skinPatternPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV7),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV7 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV7),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV7),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 6\n\t\t\t6:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV6 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV6 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV6 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t'ears' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV6 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV6 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV6,\n\t\t\t\t'color1', this.PackCompositeColorV6,\n\t\t\t\t'color2', this.PackCompositeColorV6,\n\t\t\t\t'color3', this.PackCompositeColorV6,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV6 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV6),\n\t\t\t\t'hairColor', this.PackCompositeColorV6,\n\t\t\t\t'hairColor2', this.PackCompositeColorV6,\n\t\t\t\t'patternColor', this.PackCompositeColorV6,\n\t\t\t\t'skinColor', this.PackCompositeColorV6,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV6 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV6),\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV6),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV6),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV6 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV6),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV6),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 5\n\t\t\t5:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV5 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV5 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV5 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV5 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV5 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'color0', this.PackCompositeColorV5,\n\t\t\t\t'color1', this.PackCompositeColorV5,\n\t\t\t\t'color2', this.PackCompositeColorV5,\n\t\t\t\t'color3', this.PackCompositeColorV5,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV5 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV5),\n\t\t\t\t'hairColor', this.PackCompositeColorV5,\n\t\t\t\t'hairColor2', this.PackCompositeColorV5,\n\t\t\t\t'patternColor', this.PackCompositeColorV5,\n\t\t\t\t'skinColor', this.PackCompositeColorV5,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV5 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV5),\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV5),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV5),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV5 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV5),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV5),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 4\n\t\t\t4:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV4 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint8'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV4 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV4 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV4 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV4 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'clothColor', this.PackCompositeColorV4,\n\t\t\t\t'leatherColor', this.PackCompositeColorV4,\n\t\t\t\t'metalColor', this.PackCompositeColorV4,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV4 =[\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV4),\n\t\t\t\t'hairColor', this.PackCompositeColorV4,\n\t\t\t\t'patternColor', this.PackCompositeColorV4,\n\t\t\t\t'skinColor', this.PackCompositeColorV4,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV4 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV4),\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV4),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV4),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV4 =[\n\t\t\t\t'armorColorIds', Utils.getArrayReader('uint32'),\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV4),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV4),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 3\n\t\t\t3:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV3 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV3 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV3 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV3 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV3 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'clothColor', this.PackCompositeColorV3,\n\t\t\t\t'leatherColor', this.PackCompositeColorV3,\n\t\t\t\t'metalColor', this.PackCompositeColorV3,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV3 =[\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV3),\n\t\t\t\t'hairColor', this.PackCompositeColorV3,\n\t\t\t\t'patternColor', this.PackCompositeColorV3,\n\t\t\t\t'skinColor', this.PackCompositeColorV3,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV3 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'beard', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV3),\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV3),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV3),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV3 =[\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV3),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV3),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 2\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV2 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV2 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV2 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV2 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV2 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'clothColor', this.PackCompositeColorV2,\n\t\t\t\t'leatherColor', this.PackCompositeColorV2,\n\t\t\t\t'metalColor', this.PackCompositeColorV2,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV2 =[\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV2),\n\t\t\t\t'hairColor', this.PackCompositeColorV2,\n\t\t\t\t'patternColor', this.PackCompositeColorV2,\n\t\t\t\t'skinColor', this.PackCompositeColorV2,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV2 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV2),\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV2),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV2 =[\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV2),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV1 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV1 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye1' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye2' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye3' , Utils.getFileNameReader(),\n\t\t\t\t'maskDye4' , Utils.getFileNameReader(),\n\t\t\t\t'maskCut' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'dyeFlags' , 'uint32',\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV1 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV1 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV1 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'clothColor', this.PackCompositeColorV1,\n\t\t\t\t'leatherColor', this.PackCompositeColorV1,\n\t\t\t\t'metalColor', this.PackCompositeColorV1,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV1 =[\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV1),\n\t\t\t\t'hairColor', this.PackCompositeColorV1,\n\t\t\t\t'patternColor', this.PackCompositeColorV1,\n\t\t\t\t'skinColor', this.PackCompositeColorV1,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV1 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV1),\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'hairColorPalette', Utils.getString16Reader(),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV1),\n\t\t\t\t'skinColorPalette', Utils.getString16Reader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV1 =[\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV1),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackCompositeBlitRectSetV0 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'size', ['[]', 'uint32', 2],\n\t\t\t\t'rectIndex', Utils.getArrayReader('uint32'),\n\t\t\t\t'rectArray', Utils.getArrayReader(['[]','uint32',4]),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeFileDataV0 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'meshBase' , Utils.getFileNameReader(),\n\t\t\t\t'meshOverlap' , Utils.getFileNameReader(),\n\t\t\t\t'maskClothSkin' , Utils.getFileNameReader(),\n\t\t\t\t'maskLeather' , Utils.getFileNameReader(),\n\t\t\t\t'maskMetal' , Utils.getFileNameReader(),\n\t\t\t\t'maskGlow' , Utils.getFileNameReader(),\n\t\t\t\t'textureBase' , Utils.getFileNameReader(),\n\t\t\t\t'textureNormal' , Utils.getFileNameReader(),\n\t\t\t\t'hideFlags' , 'uint32',\n\t\t\t\t'skinFlags' , 'uint32',\n\t\t\t\t'blitRectIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeSkinPatternV0 =[\n\t\t\t\t'chest' , Utils.getFileNameReader(),\n\t\t\t\t'face' , Utils.getFileNameReader(),\n\t\t\t\t'feet' , Utils.getFileNameReader(),\n\t\t\t\t'hands' , Utils.getFileNameReader(),\n\t\t\t\t'legs' , Utils.getFileNameReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeColorV0 =[\n\t\t\t\t'brightness' , 'uint8',\n\t\t\t\t'contrast' , 'uint8',\n\t\t\t\t'hue' , 'uint8',\n\t\t\t\t'saturation' , 'uint8',\n\t\t\t\t'lightness' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantComponentV0 =[\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'clothColor', this.PackCompositeColorV0,\n\t\t\t\t'leatherColor', this.PackCompositeColorV0,\n\t\t\t\t'metalColor', this.PackCompositeColorV0,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeVariantV0 =[\n\t\t\t\t'components', Utils.getArrayReader(this.PackCompositeVariantComponentV0),\n\t\t\t\t'hairColor', this.PackCompositeColorV0,\n\t\t\t\t'patternColor', this.PackCompositeColorV0,\n\t\t\t\t'skinColor', this.PackCompositeColorV0,\n\t\t\t\t'skinIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackCompositeRaceDataV0 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'nameToken', Utils.getQWordReader(),\n\t\t\t\t'ears', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'faces', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'fileData', Utils.getArrayReader(this.PackCompositeFileDataV0),\n\t\t\t\t'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'skeletonFile' , Utils.getFileNameReader(),\n\t\t\t\t'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV0),\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'variantRefRace', Utils.getQWordReader(),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackCompositeVariantV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackCompositeV0 =[\n\t\t\t\t'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV0),\n\t\t\t\t'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: Main, versions: 1, strucTab: 0x16E8FE8 \n\t///==================================================\n\t{\n\t\tname:'Main',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackContentTypeInfo =[\n\t\t\t\t'guidOffset' , 'uint32',\n\t\t\t\t'uidOffset' , 'uint32',\n\t\t\t\t'dataIdOffset' , 'uint32',\n\t\t\t\t'nameOffset' , 'uint32',\n\t\t\t\t'trackReferences' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackContentNamespace =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'domain' , 'uint32',\n\t\t\t\t'parentIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackContentIndexEntry =[\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'offset' , 'uint32',\n\t\t\t\t'namespaceIndex' , 'uint32',\n\t\t\t\t'rootIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackContentLocalOffsetFixup =[\n\t\t\t\t'relocOffset' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackContentExternalOffsetFixup =[\n\t\t\t\t'relocOffset' , 'uint32',\n\t\t\t\t'targetFileIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackContentFileIndexFixup =[\n\t\t\t\t'relocOffset' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackContentStringIndexFixup =[\n\t\t\t\t'relocOffset' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackContentTrackedReference =[\n\t\t\t\t'sourceOffset' , 'uint32',\n\t\t\t\t'targetFileIndex' , 'uint32',\n\t\t\t\t'targetOffset' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackContent =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'typeInfos', Utils.getArrayReader(this.PackContentTypeInfo),\n\t\t\t\t'namespaces', Utils.getArrayReader(this.PackContentNamespace),\n\t\t\t\t'fileRefs', Utils.getArrayReader(Utils.getFileNameReader()),\n\t\t\t\t'indexEntries', Utils.getArrayReader(this.PackContentIndexEntry),\n\t\t\t\t'localOffsets', Utils.getArrayReader(this.PackContentLocalOffsetFixup),\n\t\t\t\t'externalOffsets', Utils.getArrayReader(this.PackContentExternalOffsetFixup),\n\t\t\t\t'fileIndices', Utils.getArrayReader(this.PackContentFileIndexFixup),\n\t\t\t\t'stringIndices', Utils.getArrayReader(this.PackContentStringIndexFixup),\n\t\t\t\t'trackedReferences', Utils.getArrayReader(this.PackContentTrackedReference),\n\t\t\t\t'strings', Utils.getArrayReader(Utils.getString16Reader()),\n\t\t\t\t'content', Utils.getArrayReader('uint8'),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: Main, versions: 1, strucTab: 0x16E900C \n\t///==================================================\n\t{\n\t\tname:'Main',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackMapMetadataMap =[\n\t\t\t\t'mapId', 'uint16',\n\t\t\t\t'mapType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackMapMetadata =[\n\t\t\t\t'maps', Utils.getArrayReader(this.PackMapMetadataMap),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: anim, versions: 3, strucTab: 0x16E9280 \n\t///==================================================\n\t{\n\t\tname:'anim',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2, ReferencedFunction: 0x1228B70\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.PackEmoteTimingV2 =[\n\t\t\t\t'ModelFile', Utils.getFileNameReader(),\n\t\t\t\t'BlendIn' , 'float32',\n\t\t\t\t'BlendOut' , 'float32',\n\t\t\t\t'IntroDuration' , 'uint32',\n\t\t\t\t'LoopDuration' , 'uint32',\n\t\t\t\t'OutroDuration' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackEmoteAnimationV2 =[\n\t\t\t\t'Token', Utils.getQWordReader(),\n\t\t\t\t'Timing', Utils.getArrayReader(this.PackEmoteTimingV2),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackEmoteAnimationsV2 =[\n\t\t\t\t'Animation', Utils.getArrayReader(this.PackEmoteAnimationV2),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.PackEmoteTimingV1 =[\n\t\t\t\t'modelFileId', Utils.getFileNameReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'duration' , 'uint32',\n\t\t\t\t'loopDuration' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackEmoteAnimationV1 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'timings', Utils.getArrayReader(this.PackEmoteTimingV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackEmoteAnimationsV1 =[\n\t\t\t\t'animations', Utils.getArrayReader(this.PackEmoteAnimationV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackEmoteTimingV0 =[\n\t\t\t\t'modelFileId', Utils.getFileNameReader(),\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'duration' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackEmoteAnimationV0 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'timings', Utils.getArrayReader(this.PackEmoteTimingV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackEmoteAnimationsV0 =[\n\t\t\t\t'animations', Utils.getArrayReader(this.PackEmoteAnimationV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: mach, versions: 1, strucTab: 0x16E9174 \n\t///==================================================\n\t{\n\t\tname:'mach',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackAnimMachineActionV0 =[\n\t\t\t\t'actionData', Unknown0x1C,\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimMachineActionBlockV0 =[\n\t\t\t\t'actions', Utils.getArrayReader(this.PackAnimMachineActionV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimMachineActionVariantV0 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'actionBlock', Utils.getPointerReader(this.PackAnimMachineActionBlockV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimMachineActionVariantBlockV0 =[\n\t\t\t\t'actionVariants', Utils.getArrayReader(this.PackAnimMachineActionVariantV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimMachineTransitionVariantV0 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'actionBlock', Utils.getPointerReader(this.PackAnimMachineActionBlockV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimMachineTransitionV0 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'targetStateName', Utils.getString16Reader(),\n\t\t\t\t'actionBlock', Utils.getPointerReader(this.PackAnimMachineActionBlockV0),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackAnimMachineTransitionVariantV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimMachineStateVariantV0 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'actionBlock', Utils.getPointerReader(this.PackAnimMachineActionBlockV0),\n\t\t\t\t'actionVariantBlock', Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV0),\n\t\t\t\t'transitions', Utils.getArrayReader(this.PackAnimMachineTransitionV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimMachineStateV0 =[\n\t\t\t\t'name', Utils.getString16Reader(),\n\t\t\t\t'actionBlock', Utils.getPointerReader(this.PackAnimMachineActionBlockV0),\n\t\t\t\t'actionVariantBlock', Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV0),\n\t\t\t\t'transitions', Utils.getArrayReader(this.PackAnimMachineTransitionV0),\n\t\t\t\t'variants', Utils.getArrayReader(this.PackAnimMachineStateVariantV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimMachineV0 =[\n\t\t\t\t'states', Utils.getArrayReader(this.PackAnimMachineStateV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimModelV0 =[\n\t\t\t\t'modelFileId', Utils.getFileNameReader(),\n\t\t\t\t'modelFileRaw', Utils.getString16Reader(),\n\t\t\t\t'machineIndex' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAnimMachinesV0 =[\n\t\t\t\t'machines', Utils.getArrayReader(this.PackAnimMachineV0),\n\t\t\t\t'models', Utils.getArrayReader(this.PackAnimModelV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: fall, versions: 1, strucTab: 0x16E9000 \n\t///==================================================\n\t{\n\t\tname:'fall',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackAnimFallbackV0 =[\n\t\t\t\t'sourceAnim', Utils.getQWordReader(),\n\t\t\t\t'targetAnims', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAnimFallbacksV0 =[\n\t\t\t\t'fallbacks', Utils.getArrayReader(this.PackAnimFallbackV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: seqn, versions: 1, strucTab: 0x16E8E1C \n\t///==================================================\n\t{\n\t\tname:'seqn',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackAnimSequenceChargeStageV0 =[\n\t\t\t\t'duration', 'uint16',\n\t\t\t\t'endingChargeLevel' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimSequenceStepActionV0 =[\n\t\t\t\t'duration' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimSequenceStepMoveV0 =[\n\t\t\t\t'duration' , 'uint32',\n\t\t\t\t'moveRotation' , ['[]','float32',4],\n\t\t\t\t'facingRotation' , ['[]','float32',4],\n\t\t\t\t'velocity' , ['[]','float32',2],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimSequenceStepV0 =[\n\t\t\t\t'type' , 'uint8',\n\t\t\t\t'animationSpeed' , 'float32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'action', Utils.getPointerReader(this.PackAnimSequenceStepActionV0),\n\t\t\t\t'move', Utils.getPointerReader(this.PackAnimSequenceStepMoveV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimSequenceTriggerV0 =[\n\t\t\t\t'trigger' , 'uint8',\n\t\t\t\t'time' , 'uint32',\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimSequenceDataV0 =[\n\t\t\t\t'token', Utils.getQWordReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'blendInTime' , 'float32',\n\t\t\t\t'blendOutTime' , 'float32',\n\t\t\t\t'chargeStages', Utils.getArrayReader(this.PackAnimSequenceChargeStageV0),\n\t\t\t\t'steps', Utils.getArrayReader(this.PackAnimSequenceStepV0),\n\t\t\t\t'triggers', Utils.getArrayReader(this.PackAnimSequenceTriggerV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimSequenceV0 =[\n\t\t\t\t'sequence', Utils.getQWordReader(),\n\t\t\t\t'animationData', Utils.getArrayReader(this.PackAnimSequenceDataV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAnimSequencesV0 =[\n\t\t\t\t'sequences', Utils.getArrayReader(this.PackAnimSequenceV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: cnfg, versions: 1, strucTab: 0x16E9370 \n\t///==================================================\n\t{\n\t\tname:'cnfg',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackAnimAimIKBoneV0 =[\n\t\t\t\t'boneToken', Utils.getQWordReader(),\n\t\t\t\t'clampAngle' , 'float32',\n\t\t\t\t'weight' , 'float32',\n\t\t\t\t'smoothingWeight' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimAimIKConfigV0 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'boneEye', Utils.getQWordReader(),\n\t\t\t\t'boneSight', Utils.getQWordReader(),\n\t\t\t\t'endEffector', Utils.getQWordReader(),\n\t\t\t\t'frustumHAngle' , 'float32',\n\t\t\t\t'frustumVAngle' , 'float32',\n\t\t\t\t'frustumLength' , 'float32',\n\t\t\t\t'targetVelocityConstraint' , 'float32',\n\t\t\t\t'bones', Utils.getArrayReader(this.PackAnimAimIKBoneV0),\n\t\t\t\t'targets', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'flags' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimIKRaycastTargetV0 =[\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'direction' , ['[]','float32',3],\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimIKChainV0 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'smoothWeight' , ['[]','float32',3],\n\t\t\t\t'hyperExtensionStart' , 'float32',\n\t\t\t\t'hyperExtensionScale' , 'float32',\n\t\t\t\t'bones', Utils.getArrayReader(Utils.getQWordReader()),\n\t\t\t\t'targetRaycastInfo', Utils.getPointerReader(this.PackAnimIKRaycastTargetV0),\n\t\t\t\t'targetMode' , 'uint8',\n\t\t\t\t'chainType' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.PackAnimIKChainGroupV0 =[\n\t\t\t\t'name', Utils.getQWordReader(),\n\t\t\t\t'chains', Utils.getArrayReader(this.PackAnimIKChainV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackAnimConfigV0 =[\n\t\t\t\t'aimIKConfigs', Utils.getArrayReader(this.PackAnimAimIKConfigV0),\n\t\t\t\t'chainGroups', Utils.getArrayReader(this.PackAnimIKChainGroupV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: eula, versions: 1, strucTab: 0x16E93AC \n\t///==================================================\n\t{\n\t\tname:'eula',\n\t\tversions:{\n\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.PackEulaLanguageV0 =[\n\t\t\t\t'Language' , 'uint8',\n\t\t\t\t'Text', Utils.getString16Reader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.PackEulaV0 =[\n\t\t\t\t'Language', Utils.getArrayReader(this.PackEulaLanguageV0),\n\t\t\t\t'Version' , 'uint8',\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n\t///==================================================\n\t/// Chunk: mfst, versions: 3, strucTab: 0x1743B8C \n\t///==================================================\n\t{\n\t\tname:'mfst',\n\t\tversions:{\n\n\n\t\t\t// => Version: 2, ReferencedFunction: 0x13458C0\n\t\t\t2:function(){\n\t\t\t\t\t\tthis.ContentMapRedirector =[\n\t\t\t\t'mapGUID', ['[]', 'uint8', 16],\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ContentMapModel =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ContentMapStart =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'modelArray', Utils.getArrayReader(this.ContentMapModel),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ContentMap =[\n\t\t\t\t'mapGUID', ['[]', 'uint8', 16],\n\t\t\t\t'mapRedirectorArray', Utils.getArrayReader(this.ContentMapRedirector),\n\t\t\t\t'mapStartArray', Utils.getArrayReader(this.ContentMapStart),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ContentPortalManifest =[\n\t\t\t\t'mapArray', Utils.getArrayReader(this.ContentMap),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 1\n\t\t\t1:function(){\n\t\t\t\t\t\tthis.ContentMapRedirectorV1 =[\n\t\t\t\t'mapId' , 'uint32',\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ContentMapModelV1 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t'permutation', Utils.getQWordReader(),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ContentMapStartV1 =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'modelArray', Utils.getArrayReader(this.ContentMapModelV1),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ContentMapV1 =[\n\t\t\t\t'mapId' , 'uint32',\n\t\t\t\t'mapRedirectorArray', Utils.getArrayReader(this.ContentMapRedirectorV1),\n\t\t\t\t'mapStartArray', Utils.getArrayReader(this.ContentMapStartV1),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ContentPortalManifestV1 =[\n\t\t\t\t'mapArray', Utils.getArrayReader(this.ContentMapV1),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\n\t\t\t// => Version: 0\n\t\t\t0:function(){\n\t\t\t\t\t\tthis.ContentMapRedirectorV0 =[\n\t\t\t\t'mapId' , 'uint32',\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ContentMapModelV0 =[\n\t\t\t\t'filename' , Utils.getFileNameReader(),\n\t\t\t\t'flags' , 'uint32',\n\t\t\t\t'type' , 'uint32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ContentMapStartV0 =[\n\t\t\t\t'token' , 'uint32',\n\t\t\t\t'modelArray', Utils.getArrayReader(this.ContentMapModelV0),\n\t\t\t\t'position' , ['[]','float32',3],\n\t\t\t\t'radius' , 'float32',\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.ContentMapV0 =[\n\t\t\t\t'mapId' , 'uint32',\n\t\t\t\t'mapRedirectorArray', Utils.getArrayReader(this.ContentMapRedirectorV0),\n\t\t\t\t'mapStartArray', Utils.getArrayReader(this.ContentMapStartV0),\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tthis.__root=this.ContentPortalManifestV0 =[\n\t\t\t\t'mapArray', Utils.getArrayReader(this.ContentMapV0),\n\t\t\t\t\t\t];\n\n\t\t\t},\n\t\t}\n\t},\n\n]\n},{}]},{},[1])"],"file":"T3D-1.0.5.Formats.js"}