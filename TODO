Clear up the utils and DataRenderers.

 > DataRenderers should have their own file cache system.
 > DataRenderers should not handle parsing/transforming.
 > DataRenderers should share informations when used together:
   Ex: DataRenderer will load up the inflatedBuffer and can be reused by another renderer from the context.

In details:
 > Move Model loading specific logic from 'RenderUtils' to 'Models'
 > Clean DataRenderers in order:
   1. TerrainRenderer +
   2. EnvironmentRenderer +
   3. PropertiesRenderer +
   4. HavokRenderer
   5. ZoneRenderer
 > Add support for a fileCache object into all loading functions
 > Fix OBJExporter
 > Transform the DataRenders into real async functions

 > LocalReader, preload the next task in worker instead of waiting.
    And signalize an in-between state

 > Allow asynchronous use during file parsing with a function getProgress
 
 > Remove unused bits and unnecessary helpers of the main T3DLib file.
   > Export Utils/CompatUtils for backward compatibility utilities (filelist format...)

 > Implements PackContentRenderer with settings to load specific entries


____

# LocalReader third implementation
Safer and faster
* Have an internal queue and pushes work to the workers before they are free so there are no wait time
* Tracks which tasks have been pushed to a worker and is able to re-push a task if the worker crashes
* Allow bulk working: extractItems(items: array, onItemDone: function) -> globalPromise;
* Does not use a class anymore, but just a high order function so the private items really are not accessible and the api is easier to document.

____

# Safer code in general
* Does not uses class anymore, use jest to make sure that every datarenderer exports all the required functions, but the definitions use high order functions.
(There should not be any case where a class is an actual requirement)

____

# Easier to maitain
* Extract all the threejs specific code to another folder
* Extract the chunks and the map list to separate libraries
  Map list should not even be required but just provided by the app using the library.
* Use strong eslint, and strong jsdoc requirements