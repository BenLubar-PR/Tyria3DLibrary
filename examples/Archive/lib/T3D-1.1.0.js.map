{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/LocalReader/Archive.js","src/LocalReader/ArchiveParser.js","src/LocalReader/DataReader.js","src/LocalReader/FileTypes.js","src/LocalReader/LocalReader.js","src/LocalReader/PersistantStore.js","src/Logger.js","src/MapFileList.js","src/T3DLib.js","src/dataRenderer/DataRenderer.js","src/dataRenderer/EnvironmentRenderer.js","src/dataRenderer/HavokRenderer.js","src/dataRenderer/PropertiesRenderer.js","src/dataRenderer/SingleModelRenderer.js","src/dataRenderer/StringRenderer.js","src/dataRenderer/TerrainRenderer.js","src/dataRenderer/ZoneRenderer.js","src/format/definition/ANDAT.js","src/format/definition/MFT.js","src/format/file/GW2Chunk.js","src/format/file/GW2File.js","src/util/MaterialUtils.js","src/util/MathUtils.js","src/util/ParserUtils.js","src/util/PromiseUtils.js","src/util/RenderUtils.js","src/util/TerrainShader.js"],"names":["f","exports","module","define","amd","window","global","self","this","T3D","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ArchiveParser","FileTypes","PersistantStore","DataReader","PromiseUtils","FETCHLIMIT","[object Object]","settings","_dataReader","path","t3dtoolsWorker","workers","concurrentTasks","_concurrentTasks","_file","_archiveMeta","_mftTable","_mftIndex","_persistantStore","_persistantCache","undefined","_fileTypeCache","file","callback","readArchive","data","ANDatHeader","MFTTable","table","_mftTableSize","header","nbOfEntries","_mftIndexTable","MFTIndex","baseIdToMFT","_baseIdRegister","MFTbaseIds","fileId","isMftID","mftId","offset","size","compressed","crc","baseId","isImage","Promise","resolve","reject","Logger","log","TYPE_ERROR","getFilePart","ds","len","inflate","buffer","id","Math","min","_size","inflatedData","DataStream","resultType","getFileType","archive","disableLog","logs","persistantList","iterateList","Object","keys","map","Number","limitedAsyncIterator","index","done","fail","limit","fetchingData","getFiles","then","slice","oldSlice","_cleanFileList","dataIndex","_callUpdateItem","catch","persistantData","logArray","currentData","getFileMeta","compareData","readFileType","push","putFile","fileType","getFile","actualKeys","oldKeys","includes","deleteFile","_updateFileListItem","MathUtils","parseANDatHeader","mftOffset","mftSize","parseMFTTable","mftIndexOffset","mftIndexSize","parseMFTIndex","version","readUint8","magic","readString","headerSize","readUint32","seek","position","chunkSize","arr32To64","flags","TYPE_DEBUG","Float64Array","Uint32Array","Uint16Array","readUint16","mftIndex","reader","FileReader","onerror","fileEvent","onload","target","result","endianness","LITTLE_ENDIAN","readAsArrayBuffer","_settings","_workerPool","_workerLoad","_inflateCallbacks","_startWorker","handle","capLength","arrayBuffer","byteLength","TYPE_WARNING","workerId","_getBestWorkerIndex","postMessage","worker","Worker","selfWorkerId","onmessage","message_event","split","indexOf","GW2File","TYPE","getTypeName","typeID","key","first4","readCString","TEXTURE_ATEC","TEXTURE_ATEP","TEXTURE_ATET","TEXTURE_ATEU","TEXTURE_ATEX","TEXTURE_ATTX","TEXTURE_DDS","TEXTURE_PNG","type","PACK_ABIX","PACK_ABNK","PACK_AFNT","PACK_AMAT","PACK_AMSP","PACK_ANIC","PACK_ASND","PACK_CDHS","PACK_CINP","PACK_CMAC","PACK_CMPC","PACK_CNTC","PACK_EMOC","PACK_EULA","PACK_HVKC","PACK_MAPC","PACK_MMET","PACK_MODL","PACK_MPSD","PACK_PIMG","PACK_PRLT","PACK_STAR","PACK_TXTM","PACK_TXTV","PACK_UNSORTED","BINARIES","STRINGS","UNKNOWN","defANDAT","defMFT","MapFileList","LocalReader","datFile","logger","fileListeners","dat","prototype","parseHeaderAsync","onFullyLoaded","loadFilePart","readANDatHeader","connectInflater","inflater","addEventListener","listener","forEach","fileHeader","readStruct","readMFTHeader","mft","numEntries","entryDict","offset_0","offset_1","readMFTIndexFile","ids","mftIndices","m_entryToId_baseId","m_entryToId_fileFileId","baseToMft","fileToMft","id2index","entryIndex","entry","temp","m_entryToId","loadFileList","datName","name","lastModified","str","localStorage","getItem","JSON","parse","loadMapList","mapName","storeFileList","fileList","stringrep","stringify","setItem","storeMapList","mapList","readFileListAsync","uniqueIdxs","sort_unique","b","maxLength","listFiles","readMapListAsync","searchAll","Date","getTime","TYPE_PROGRESS","maps","mapCol","mapEntry","entryBaseId","fileName","getFileIndex","dt","round","localMapList","mapc","group","localGroup","start","N","maxlen","lastPct","pctM","threadsDone","readUniqueId","pct","floor","peekCallback","baseOrFileId","parseInt","loadTextureFile","loadFile","raw","end","DB_VERSION","_dbConnection","_getConnection","request","indexedDB","open","onblocked","event","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","unique","createIndex","onsuccess","isReady","error","Resolve","transaction","objectStore","get","itemId","getAll","IDBKeyRange","only","reqCount","count","range","bound","lowerBound","upperBound","returnArray","item","put","delete","TYPE_MESSAGE","logFunctions","Array","arguments","argArr","argsToArr","unshift","severity","max","shift","apply","args","console","warn","debug","numErrors","navigator","hardwareConcurrency","GW2Chunk","Archive","DataRenderer","EnvironmentRenderer","HavokRenderer","PropertiesRenderer","SingleModelRenderer","TerrainRenderer","ZoneRenderer","StringRenderer","MaterialUtils","ParserUtils","RenderUtils","getLocalReader","lrInstance","getFileListAsync","localReader","getMapListAsync","renderMapContentsAsync","renderers","context","mapFile","runAllRenderers","runRenderer","renderClass","assign","bind","cb","renderAsync","getContextValue","clazz","propName","defaultValue","output","hasWebGL","return_context","WebGLRenderingContext","canvas","document","createElement","names","getContext","getParameter","gl","THREE","constructor","getOutput","otherClass","rawData","uarr","Uint8Array","rawStrings","String","fromCharCode","subarray","rawString","join","dxtType","imageWidth","imageHeigth","image","width","height","getMat","tex","MeshBasicMaterial","side","BackSide","fog","depthWrite","loadTextureWithFallback","targetMatIndices","materialArray","filename","fallbackFilename","hazeColorAsInt","writeMat","mat","loadFallback","TextureLoader","load","loadLocalTexture","setTimeout","getHazeColor","environmentChunkData","hazes","dataGlobal","haze","farColor","parseLights","lights","ambientLight","hasLight","lighting","backlightIntensity","backlightColor","light","idx","dirLightData","color","Color","directionalLight","DirectionalLight","getHex","intensity","set","direction","normalize","lightDir","AmbientLight","ambientTotal","g","parseSkybox","parameterChunkData","skyElements","skyModeTex","texPathNE","texPathSW","texPathT","bounds","rect","mapW","abs","x1","x2","mapD","y1","y2","visible","skyGeometry","BoxGeometry","boxSize","faceVertexUvs","vecs","face","vec2","x","y","uvsNeedUpdate","skyBox","Mesh","translateY","create","getChunk","hazeColor","lastP","seed","meshes","renderModels","models","title","MeshNormalMaterial","DoubleSide","parseAllModels","getCollisionsForAnimation","animation","collisions","ret","collisionIndices","collision","p","animationFromGeomIndex","geometryIndex","geometries","animations","havokChunkData","j","renderMesh","propGeomIndex","model","pos","translate","rot","rotate","scale","mesh","parseHavokMesh","rotation","order","seedRandom","sin","clone","geom","Geometry","vertices","v","Vector3","indices","f1","f2","f3","faces","Face3","computeFaceNormals","boundingBox","boundsMax","propModels","zoneModels","obsModels","mdl","renderZoneModelsCB","propertiesChunkData","props","propArray","animProps","propAnimArray","instanceProps","propInstanceArray","metaProps","propMetaArray","concat","meshCache","textureCache","renderIndex","pctStr","toString","prop","addMeshToLOD","groups","lod","needsClone","lodDist","lod2","lodOverride","geometry","material","updateMatrix","matrixAutoUpdate","add","Group","addLevel","getMeshesForFilename","isCached","boundingSphere","meshArray","LOD","maxDist","boundingSphereRadius","radius","transforms","transform","update","addMeshesToScene","renderCallback","getFileIdsAsync","fileIds","getIdsForProp","Utils","getFilesUsedByModel","propFileIds","strings","entryHeaderDef","decryptionOffset","bitsPerSymbol","value","readUCS2String","recid","language","TerrainShader","drawWater","wireframe","opacity","transparent","renderRect","parseNumChunks","terrainData","numChunksD_1","sqrt","dims","chunkArray","numChunksD_2","loadPagedImageCallback","infaltedBuffer","terrainTiles","pimgDS","pimgTableDataChunk","pimgData","mapRect","parameterData","maxAnisotropy","anisotropy","xChunks","yChunks","allMaterials","materials","allTextures","texFileArray","dx","dy","cdx","cdy","allMats","customMaterial","MeshLambertMaterial","flatShading","chunkTextures","strippedPages","page","layer","coord","solidColor","matName","chunkTex","wrapS","RepeatWrapping","wrapT","stepChunk","cx","cy","water","chunkIndex","pageX","pageY","chunkTextureIndices","loResMaterial","texIndexArray","pageOffetX","materialFile","pageOffetY","fileNames","gi","textureFileName","pageTexName","pageTexName2","near","far","envOutput","uniforms","UniformsUtils","merge","UniformsLib","uvScale","Vector2","texturePicker","texturePicker2","texture1","texture2","texture3","texture4","ShaderMaterial","fragmentShader","getFragmentShader","vertexShader","getVertexShader","chunkGeo","PlaneBufferGeometry","chunkW","cn","attributes","array","heightMapArray","chunk","mS","Matrix4","identity","elements","applyMatrix","SceneUtils","createMultiMaterialObject","PI","globalOffsetX","chunkOffsetX","globalOffsetY","chunkOffsetY","z","px","py","updateMatrixWorld","renderChunk","pagedImageId","pagedImage","terrainChunk","texture","renderZone","zone","zoneDefs","renderZoneCallback","zoneDef","zd","token","defToken","modelGroups","getModelGroups","groupKeys","stepModels","meshGroups","instanceIdx","meshIdx","materialFlags","move","mg","mga","readVerts","verts","Float32Array","readIndices","getIndex","readUVs","uv","uvs","readNormals","normal","normals","writeVerts","stride","writeIndices","strideIndices","writeUvs","uvStride","writeNormals","normalStride","meshGroup","mergedGeom","BufferGeometry","addAttribute","BufferAttribute","setIndex","buffersNeedUpdate","zPos","mapX","mapY","c","zoneRect","vertRect","encodeData","zdx","linearPos","flag","zoneDefLayer","layerDefArray","modelX","modelY","modelZ","raycaster","Raycaster","intersections","intersectObject","distance","modelArray","modelFilename","rotRangeX","zOffsets","layerFlags","rotRangeY","rotRangeZ","scaleRange","fadeRange","zoneChunkData","zones","zoneArray","zoneDefArray","stepZone","HEAD_STRUCT","DUPLICATE_SETTINGS","ANIM","GAME","Main","SKEL","TOOL","main","nvms","Chunk","addr","headerLength","NaN","loadHead","getDefinition","useNthIndex","fileTypes","defsFound","formats","versions","chunkVersion","__root","loadData","def","next","chunkDataSize","File","noChunks","chunks","readHead","readChunks","ch","toLowerCase","getChunkStructs","ME","getMaterial","sharedTextures","finalMaterial","dxChunk","grChunk","finalTextures","textures","effect","techniques","passes","effects","samplerTextures","shaders","pixelShader","samplerIndex","samplerIdx","sampler","samplers","textureToken","texTokens","textureIndex","samplerTex","texURL","getTexture","uvIdx","uvPSInputIndex","ft","nt","MeshPhongMaterial","FrontSide","normalMap","flipY","textureFilename","alphaTest","shading","FlatShading","needsUpdate","finalTexture","mapping","defaultColor","random","DataTexture","RGBAFormat","generateDataTexture","minFilter","LinearMipMapLinearFilter","magFilter","LinearFilter","generateMipmaps","format","f16","h","pow","Infinity","popcount","bits","base32Max","arr","arr_in","comparator","sort","hasOwnProperty","getArrayReader","structDef","maxCount","struct","arr_len","arr_ptr","readType","getRefArrayReader","ret_arr","orgPos","offsets","readInt32Array","pointer","getQWordReader","getStringReader","ptr","getString16Reader","stringOffset","num","getPointerReader","getFileNameReader","fileRef","m_highPart","m_lowPart","promiseTask","logPrefix","returned","startNewPromise","amount","prefix","matFiles","fvfFormat","renderGeomChunk","yPos","dz","cz","plane","overdraw","modelDataChunk","showUnmaterialed","rawMeshes","mats","permutations","rawMesh","rawGeom","fvf","numVerts","vertexCount","rawVerts","vertDS","distToUV","uv32Flag","uv16Flag","isUV32","hasUV","masked","numUV","readFloat32","computeVertexNormals","uvName","matIdx","materialIndex","finalMesh","materialFilename","materialName","numLods","lods","loadMeshFromModelFile","finalMeshes","modelFile","geometryDataChunk","bsc","center","loadMaterialIndex","mIdx","matCallback","sharedMeshes","matFileName","ShaderChunk"],"mappings":"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","file":"T3D-1.1.0.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/// Includes\nconst ArchiveParser = require('./ArchiveParser');\nconst FileTypes = require('./FileTypes');\nconst PersistantStore = require('./PersistantStore');\nconst DataReader = require('./DataReader');\nconst PromiseUtils = require('../util/PromiseUtils');\n/// EndIncludes\n\nconst FETCHLIMIT = 100000;\n\n/**\n * TODO - doc\n * One of the big main advantages of this new API is that there is just only one nummeric ID \n * for the files.\n */\nclass Archive {\n    constructor(settings) {\n        this._dataReader = new DataReader({\n            path: settings.t3dtoolsWorker,\n            workers: settings.concurrentTasks\n        });\n\n        this._concurrentTasks = settings.concurrentTasks;\n\n        this._file;\n        this._archiveMeta;\n        this._mftTable;\n        this._mftIndex;\n\n        this._persistantStore = new PersistantStore();\n        this._persistantCache = undefined;\n        this._fileTypeCache = [];\n    }\n\n    loadArchive(file, callback){\n        if(!callback) callback = () => {};\n        let self = this;\n        \n        ArchiveParser.readArchive(file, function(data){\n            if(!data) callback(true);\n            self._file = file;\n            self._archiveMeta = data.ANDatHeader;\n            self._mftTable = data.MFTTable.table;\n            self._mftTableSize = data.MFTTable.header.nbOfEntries;\n            self._mftIndexTable = data.MFTIndex.baseIdToMFT;\n            self._baseIdRegister = data.MFTIndex.MFTbaseIds;\n            callback(false);\n        });\n        \n    }\n\n    getFileMeta(fileId, isMftID){\n        if(!isMftID)\n            fileId = this._mftIndexTable[fileId];\n\n        return {\n            mftId: fileId,\n            offset: this._mftTable.offset[fileId],\n            size: this._mftTable.size[fileId],\n            compressed: this._mftTable.compressed[fileId],\n            crc: this._mftTable.crc[fileId]\n        }\n    }\n\n    getFile(baseId, isImage){\n        let self = this;\n\n        return new Promise((resolve, reject) => {\n            let mftId = this._mftIndexTable[baseId];\n            if(!mftId){\n                T3D.Logger.log(T3D.Logger.TYPE_ERROR, \"Specified baseId is invalid\");\n                reject();\n            }\n\n            let offset = this._mftTable.offset[mftId];\n            let size = this._mftTable.size[mftId];\n            let compressed = this._mftTable.compressed[mftId];\n\n            if(offset <= 0) {\n                T3D.Logger.log(T3D.Logger.TYPE_ERROR, \"File location in archive is invalid\");\n                reject();\n            }        \n\n            ArchiveParser.getFilePart(this._file, offset, size, function(ds, len){\n                //If the file is not compressed, return the data already\n                if(!compressed){\n                    resolve(ds.buffer);\n                } else {\n                    self._dataReader.inflate(ds, len, baseId, resolve, isImage);\n                }\n            })\n        });\n        \n    }\n\n    readFileType(id, isMftID){\n        let self = this;\n        return new Promise((resolve, reject) => {\n            if(!isMftID)\n                id = self._mftIndexTable[id];\n            \n            if(self._fileTypeCache[id] != undefined)\n                return resolve(self._fileTypeCache[id]);\n\n            let offset = self._mftTable.offset[id];\n            let size = self._mftTable.size[id];\n            let compressed = self._mftTable.compressed[id];\n    \n            ArchiveParser.getFilePart(self._file, offset, Math.min(size,2000), function(ds, _size){\n                if(compressed){\n                    self._dataReader.inflate(\n                        ds,\n                        _size,\n                        id,\n                        function(inflatedData){\n                            let ds = new DataStream(inflatedData);\n                            let resultType = FileTypes.getFileType(ds);\n                            self._fileTypeCache[id] = resultType;\n                            resolve(resultType);\n                        }, \n                        false, 0x20\n                    );\n                } else {\n                    let resultType = FileTypes.getFileType(ds);\n                    self._fileTypeCache[id] = resultType;\n                    resolve(resultType);\n                }\n            });\n        });\n    }\n\n    updatePersistant(archive, disableLog) {\n        let self = this;\n        let logs = [];\n\n        let persistantList = [];\n\n        return new Promise((resolve, reject) => {\n            let iterateList = Object.keys(this._mftIndexTable).map(i => Number(i));\n\n            //Iterate through all the archive baseIds\n            PromiseUtils.limitedAsyncIterator(iterateList, (id, index) => {\n                \n                return new Promise((done, fail) => {\n\n                    if(index % FETCHLIMIT == 0){\n                        let offset = id;\n                        let limit = (index+FETCHLIMIT < iterateList.length) ? iterateList[index+FETCHLIMIT] : iterateList[iterateList.length - 1];\n\n\n                        let fetchingData = self._persistantStore.getFiles(offset, limit);\n                        fetchingData.then((data) => {\n                            //just checking for deleted index in the current slice\n                            let slice = iterateList.slice(index, (index + FETCHLIMIT + 1 < iterateList.length) ? \n                                index + FETCHLIMIT + 1 : iterateList.length);\n                            let oldSlice = Object.keys(data).map(i => Number(i));\n                            self._cleanFileList(slice, oldSlice, logs);\n\n                            //Adding the newly fetched data\n                            for (let dataIndex in data){\n                                persistantList[dataIndex] = data[dataIndex];\n                            }\n                            \n                            //Update the current item\n                            self._callUpdateItem(persistantList, id, logs).then(done).catch(fail);\n                        })\n                        fetchingData.catch(reject); //Failing to fetch will call a reject\n                    } else {\n                        self._callUpdateItem(persistantList, id, logs).then(done).catch(fail);\n                    }\n\n                });\n            }, self._concurrentTasks, \"Finding types\"\n            ).then(() => {\n                self._persistantCache = persistantList;\n                resolve();\n            }).catch(reject);\n        });\n    }\n\n    _updateFileListItem(baseId, persistantData, logArray){\n        let self = this;\n        if(!logArray)\n            logArray = [];\n\n        return new Promise((resolve, reject) => {\n            let currentData = self.getFileMeta(baseId);\n\n            function compareData(){\n                //If the item has an invalid offset\n                if(currentData.offset<=0)\n                    return reject();\n    \n                //If the baseId didn't exist before\n                if(persistantData !== undefined && currentData.size === undefined){\n                    self.readFileType(currentData.mftId, true).then((resultType) => {\n                        logArray.push(`NewItem: { baseId: ${baseId}, type: ${resultType}, size: ${currentData.size} }`);\n                        self._persistantStore.putFile({ \n                            baseId: baseId, size: currentData.size, crc: currentData.crc, fileType: resultType\n                        }).then(resolve);\n                    });\n                }\n                //If the size or checksum of the current don't match the old one\n                else if(currentData.size !== persistantData.size ||\n                        currentData.crc !== persistantData.crc\n                ){\n                    self.readFileType(currentData.mftId, true).then((resultType) => {\n                        logArray.push(`ItemModified: { baseId: ${baseId}, type: ${resultType}, size: ${currentData.size} }`);\n                        self._persistantStore.putFile({ \n                            baseId: baseId, size: currentData.size, crc: currentData.crc, fileType: resultType\n                        }).then(resolve);\n                    });\n                }\n                //If nothing changed\n                else {\n                    resolve();\n                }\n            }\n\n            //If the persistantData is not already loaded\n            if(!persistantData)\n                self._persistantStore.getFile(baseId).then((persistantData) => {\n                    compareData();\n                });\n            else\n                compareData();\n        });\n    }\n\n    _cleanFileList(actualKeys, oldKeys, logArray) {\n        let self = this;\n        if(!logArray)\n            logArray = [];\n\n        return new Promise((resolve, reject) => {\n            function checkAndClean(id) {\n                return new Promise((done, fail) => {\n                    if(!actualKeys.includes(id)){\n                        logArray.push(`ItemDeleted: { baseId: ${id}}`);\n                        self._persistantStore.deleteFile(id)\n                            .then(done)\n                            .catch(done);\n                    }\n                })\n            }\n            PromiseUtils.limitedAsyncIterator(oldKeys, checkAndClean, \n                                              self._concurrentTasks * 4)\n                .then(resolve)\n                .catch(reject);\n        });\n    } \n\n    _callUpdateItem(data, id, logs){\n        let persistantData = data[id] ? data[id] : {};\n        return this._updateFileListItem(id, persistantData, logs);\n    }\n}\n\n\n\nmodule.exports = Archive;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/// Includes\nconst MathUtils = require('../util/MathUtils');\nconst defANDAT = require('../format/definition/ANDAT');\nconst defMFT = require('../format/definition/MFT');\n/// EndIncludes\n\n/**\n * TODO - doc\n * The ArchiveParser module is a set of tools for the Archive class to\n * correctly read the Archive\n */\n\nreadArchive = function(file, callback){\n    var ANDatHeader, MFTTable, MFTIndex;\n    \n    // Get the header from the file then parse it\n    getFilePart(file, 0, 40, function(ds, len){\n        ANDatHeader = parseANDatHeader(ds);\n\n        // Get the MFTTable and then parse it\n        getFilePart(file, ANDatHeader.mftOffset, ANDatHeader.mftSize, function(ds, len){\n            MFTTable = parseMFTTable(ds, len);\n\n            // Get the MFTIndex table and then parse it\n            getFilePart(file, MFTTable.mftIndexOffset, MFTTable.mftIndexSize, function(ds, len){\n                MFTIndex = parseMFTIndex(ds, len);\n\n                //Then callback\n                callback({\n                    ANDatHeader: ANDatHeader,\n                    MFTTable: MFTTable,\n                    MFTIndex: MFTIndex\n                });\n            });\n        })\n    });\n\n}\n\nparseANDatHeader = function(ds){\n    var header = {};\n\n    // Header parsing\n    header.version = ds.readUint8();\n    header.magic = ds.readString(3);\n    header.headerSize = ds.readUint32();\n    ds.seek(ds.position + 4); //Skip uint32\n    header.chunkSize = ds.readUint32();\n    header.crc = ds.readUint32();\n    ds.seek(ds.position + 4); //Skip uint32\n    header.mftOffset = MathUtils.arr32To64([ds.readUint32(), ds.readUint32()]);\n    header.mftSize = ds.readUint32();\n    header.flags = ds.readUint32();\n    // End header parsing\n\n    //Check MAGIC\n    if(header.magic != \"AN\\u001A\"){\n        T3D.Logger.log(\n            T3D.Logger.TYPE_ERROR, \"ANDat header is not valid\", header.magic);\n        return null;\n    }\n\n    T3D.Logger.log(\n        T3D.Logger.TYPE_DEBUG,\n        \"Loaded Main .dat header\"\n    );\n\n    return header;\n}\n\nparseMFTTable = function(ds){\n    // Parse the table header\n    var header = {};\n    header.magic = ds.readString(4);\n    ds.seek(ds.position + 8) //Skip uint64\n    header.nbOfEntries = ds.readUint32();\n    ds.seek(ds.position + 4 + 4); //Skip uint32 * 2\n\n    //check MAGIC\n    if(header.magic != \"Mft\\u001A\"){\n        T3D.Logger.log(\n            T3D.Logger.TYPE_ERROR, \"MFTTable header is not valid\", header.magic);\n        return null;\n    }\n\n    //Pre alloc the big arrays\n    var table = {\n        offset: new Float64Array(header.nbOfEntries),\n        size: new Uint32Array(header.nbOfEntries),\n        compressed: new Uint16Array(header.nbOfEntries),\n        crc: new Uint32Array(header.nbOfEntries),\n    };\n    \n    // Go through the table\n    for(var i=0; i<header.nbOfEntries-1; i++){\n        table.offset[i] = MathUtils.arr32To64([ds.readUint32(), ds.readUint32()]);\n        table.size[i] = ds.readUint32();\n        table.compressed[i] = ds.readUint16();\n        ds.seek(ds.position + 4 + 2); //Skip uint16 + uint32\n        table.crc[i] = ds.readUint32();\n    }\n\n    T3D.Logger.log(\n\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\"Loaded MFTTable\"\n\t);\n\n    return {\n        header: header, \n        table: table, \n        //Register the MFTIndex table position and size\n        mftIndexOffset: table.offset[1], \n        mftIndexSize: table.size[1] \n    };\n}\n\n/**\n * TODO - doc\n *   This function used to be much more complex with the use of\n *   a \"fileId\" which in the end was just the equivalent of \n *   MFTbaseIds[mftId].sort().reverse()[0] (aka the bigger baseId found)\n * @param {*} ds \n * @param {*} size \n */\nparseMFTIndex = function(ds, size){\n    var length = size / 8;\n\n    var baseIdToMFT = [];\n    var MFTbaseIds = [];\n\n    for(var i=0; i<length; i++){\n        //Parse table\n        var id = ds.readUint32();\n        var mftIndex = ds.readUint32();\n        //Store the values\n        baseIdToMFT[id] = mftIndex;\n        if(!MFTbaseIds[mftIndex])\n            MFTbaseIds[mftIndex] = [];\n        MFTbaseIds[mftIndex].push(id);\n    }\n\n    T3D.Logger.log(\n\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\"Finished indexing MFT\"\n\t);\n\n    return {\n        baseIdToMFT: baseIdToMFT, \n        MFTbaseIds: MFTbaseIds\n    };\n}\n\ngetFilePart = function(file, offset, length, callback){\n    var reader = new FileReader();\n\t\t\n\treader.onerror = function(fileEvent){\n\t\tthrow new Error(fileEvent);\n\t}\n\treader.onload  = function(fileEvent){\n\t\tvar buffer = fileEvent.target.result;\n\t\tvar ds = new DataStream(buffer);\n\t  \tds.endianness = DataStream.LITTLE_ENDIAN;\n        /// Pass data stream and data length to callback function, keeping \"this\" scope\n        callback(ds, length);\n\t}\n\t\n\treader.readAsArrayBuffer(file.slice(offset, offset + length));\n}\n\nmodule.exports = {\n    readArchive: readArchive,\n    parseANDatHeader: parseANDatHeader,\n    parseMFTTable: parseMFTTable,\n    parseMFTIndex: parseMFTIndex,\n    getFilePart: getFilePart\n};","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * TODO - doc\n */\nclass DataReader {\n    constructor(settings){\n        this._settings = settings;\n        this._workerPool = [];\n        this._workerLoad = [];\n        this._inflateCallbacks = [];\n        for (let i = 0; i<settings.workers; i++){\n            this._startWorker(settings.path);\n        }\n    }\n\n    inflate(ds, size, handle, callback, isImage, capLength){\n        let arrayBuffer = ds.buffer;\n\n        //If no capLength then inflate the whole file\n        if(!capLength){\n            capLength = 0;\n        }\n\n        //Buffer length size check\n        if(arrayBuffer.byteLength < 12){\n            T3D.Logger.log(\n                T3D.Logger.TYPE_WARNING,\n                `not inflating, length is too short (${arrayBuffer.byteLength})`, handle\n            );\n            callback(null);\n            return;\n        }\n\n        // Register the callback\n        if(this._inflateCallbacks[handle]){\n            this._inflateCallbacks[handle].push(callback);\n    \n            ///No need to make another call, just wait for callback event to fire.\n            return;\n        }\n        else{\n            this._inflateCallbacks[handle] = [callback];\t\n        }\n\n        // Add the load to the worker\n        let workerId = this._getBestWorkerIndex();\n        this._workerLoad[workerId] += 1;\n        this._workerPool[workerId].postMessage(\n            [handle, arrayBuffer, isImage===true, capLength]\n        );\n    }\n\n    _startWorker(path){\n        let self = this;\n        let worker = new Worker(path);\n        let selfWorkerId = this._workerPool.push(worker) - 1;\n        if(this._workerLoad.push(0) != selfWorkerId + 1) \n            throw new Error(\"WorkerLoad and WorkerPool don't have the same length\");\n\n        worker.onmessage = function(message_event){\n            let handle;\n            // Remove load\n            self._workerLoad[selfWorkerId] -= 1;\n\n            // If error\n            if( typeof message_event.data === 'string'){\n                T3D.Logger.log(\n                    T3D.Logger.TYPE_WARNING,\n                    \"Inflater threw an error\", message_event.data\n                );\n                handle = message_event.data.split(':')[0];\n                for(let callback of self._inflateCallbacks[handle]){\n                    callback(null);\n                }\n            } \n            else {\n                handle = message_event.data[0];\n                // On success\n                if(self._inflateCallbacks[handle]){\n                    for(let callback of self._inflateCallbacks[handle]) {\n                        let data = message_event.data;\n                        // Array buffer, dxtType, imageWidth, imageHeigh\t\t\t\n                        callback(data[1], data[2], data[3], data[4]);\t\n                    }\n                    // Remove triggered listeners\n                    self._inflateCallbacks[handle] = null;\n                } \n                \n                // Unknown error\n                else {\n                    T3D.Logger.log(\n                        T3D.Logger.TYPE_ERROR,\n                        \"Inflater threw an error\", message_event.data\n                    );\n                }\n            }\n\n        };\n\n    }\n\n    _getBestWorkerIndex(){\n        return this._workerLoad.indexOf(Math.min(...this._workerLoad));\n    }\n\n}\n\nmodule.exports = DataReader;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/// Includes\nlet GW2File = require('../format/file/GW2File.js');\n/// EndIncludes\n\nlet FileTypes = {};\n\nFileTypes.TYPE = {};\n\nFileTypes.TYPE['UNKNOWN'] = 0x000;\n\nFileTypes.TYPE['TEXTURE_ATEC'] = 0x101;\nFileTypes.TYPE['TEXTURE_ATEP'] = 0x102;\nFileTypes.TYPE['TEXTURE_ATET'] = 0x103;\nFileTypes.TYPE['TEXTURE_ATEU'] = 0x104;\nFileTypes.TYPE['TEXTURE_ATEX'] = 0x105;\nFileTypes.TYPE['TEXTURE_ATTX'] = 0x106;\nFileTypes.TYPE['TEXTURE_DDS'] = 0x120;\nFileTypes.TYPE['TEXTURE_PNG'] = 0x121;\n\nFileTypes.TYPE['STRINGS'] = 0x200;\n\nFileTypes.TYPE['BINARIES'] = 0x300;\n\nFileTypes.TYPE['PACK_UNSORTED'] = 0x400;\nFileTypes.TYPE['PACK_ABIX'] = 0x401; //ABIX\nFileTypes.TYPE['PACK_ABNK'] = 0x402; //ABNK\nFileTypes.TYPE['PACK_AFNT'] = 0x403; //AFNT\nFileTypes.TYPE['PACK_AMAT'] = 0x404; //AMAT\nFileTypes.TYPE['PACK_AMSP'] = 0x405; //AMSP\nFileTypes.TYPE['PACK_ANIC'] = 0x406; //anic\nFileTypes.TYPE['PACK_ASND'] = 0x407; //ASND\nFileTypes.TYPE['PACK_CDHS'] = 0x408; //CDHS\nFileTypes.TYPE['PACK_CINP'] = 0x409; //CINP\nFileTypes.TYPE['PACK_CMAC'] = 0x410; //cmaC\nFileTypes.TYPE['PACK_CMPC'] = 0x411; //cmpc\nFileTypes.TYPE['PACK_CNTC'] = 0x412; //cntc\nFileTypes.TYPE['PACK_EMOC'] = 0x413; //emoc\nFileTypes.TYPE['PACK_EULA'] = 0x414; //eula\nFileTypes.TYPE['PACK_HVKC'] = 0x415; //hvkC\nFileTypes.TYPE['PACK_MAPC'] = 0x416; //mapc\nFileTypes.TYPE['PACK_MMET'] = 0x417; //mMet\nFileTypes.TYPE['PACK_MODL'] = 0x418; //MODL\nFileTypes.TYPE['PACK_MPSD'] = 0x419; //mpsd\nFileTypes.TYPE['PACK_PIMG'] = 0x420; //PIMG\nFileTypes.TYPE['PACK_PRLT'] = 0x421; //prlt\nFileTypes.TYPE['PACK_STAR'] = 0x422; //STAR\nFileTypes.TYPE['PACK_TXTM'] = 0x423; //txtm\nFileTypes.TYPE['PACK_TXTV'] = 0x424; //txtv && txtV\n\n/**\n * TODO\n * @function getTypeName\n */\nFileTypes.getTypeName = function(typeID){\n    for (let key in FileTypes.TYPE){\n        if(FileTypes.TYPE[key] === typeID){\n            return key;\n        }\n    }\n    return undefined;\n}\n\n/**\n * TODO\n * @function getFileType \n * @param {DataStream} ds \n */\nFileTypes.getFileType = function(ds){\n    let first4 = ds.readCString(4);\n\n    //Parse textures\n    switch(first4){\n        case 'ATEC':\n            return FileTypes.TYPE.TEXTURE_ATEC;\n        case 'ATEP':\n            return FileTypes.TYPE.TEXTURE_ATEP;\n        case 'ATET':\n            return FileTypes.TYPE.TEXTURE_ATET;\n        case 'ATEU':\n            return FileTypes.TYPE.TEXTURE_ATEU;\n        case 'ATEX':\n            return FileTypes.TYPE.TEXTURE_ATEX;\n        case 'ATTX':\n            return FileTypes.TYPE.TEXTURE_ATTX;\n    };\n\n    if (first4.indexOf(\"DDS\") === 0)\n        return FileTypes.TYPE.TEXTURE_DDS;\n    \n    if (first4.indexOf(\"PNG\") === 0)\n        return FileTypes.TYPE.TEXTURE_PNG;\n\n    // PackFiles\n    if (first4.indexOf(\"PF\") === 0){\n        let file = new GW2File(ds, 0, true);/// true for \"plz no load chunkz\"\n        switch(file.header.type) {\n            case 'ABIX':\n                return FileTypes.TYPE.PACK_ABIX;\n            case 'ABNK':\n                return FileTypes.TYPE.PACK_ABNK;\n            case 'AFNT':\n                return FileTypes.TYPE.PACK_AFNT;\n            case 'AMAT':\n                return FileTypes.TYPE.PACK_AMAT;\n            case 'AMSP':\n                return FileTypes.TYPE.PACK_AMSP;\n            case 'anic':\n                return FileTypes.TYPE.PACK_ANIC\n            case 'ASND':\n                return FileTypes.TYPE.PACK_ASND;\n            case 'CDHS':\n                return FileTypes.TYPE.PACK_CDHS;\n            case 'CINP':\n                return FileTypes.TYPE.PACK_CINP;\n            case 'cmaC':\n                return FileTypes.TYPE.PACK_CMAC;\n            case 'cmpc':\n                return FileTypes.TYPE.PACK_CMPC;\n            case 'cntc':\n                return FileTypes.TYPE.PACK_CNTC;\n            case 'emoc':\n                return FileTypes.TYPE.PACK_EMOC\n            case 'eula':\n                return FileTypes.TYPE.PACK_EULA;\n            case 'hvkC':\n                return FileTypes.TYPE.PACK_HVKC;\n            case 'mapc':\n                return FileTypes.TYPE.PACK_MAPC;\n            case 'mMet':\n                return FileTypes.TYPE.PACK_MMET;\n            case 'MODL':\n                return FileTypes.TYPE.PACK_MODL;\n            case 'mpsd':\n                return FileTypes.TYPE.PACK_MPSD;\n            case 'PIMG':\n                return FileTypes.TYPE.PACK_PIMG;\n            case 'prlt':\n                return FileTypes.TYPE.PACK_PRLT;\n            case 'STAR':\n                return FileTypes.TYPE.PACK_STAR;\n            case 'txtm':\n                return FileTypes.TYPE.PACK_TXTM;\n            case 'txtv':\n            case 'txtV':\n                return FileTypes.TYPE.PACK_TXTV;\n            default:\n                return FileTypes.TYPE.PACK_UNSORTED;\n        }\n    }\n    \n    // Binaries\n    if (first4.indexOf(\"MZ\") === 0)\n        return FileTypes.TYPE.BINARIES;\n    \n    // Strings\n    if (first4.indexOf(\"strs\") === 0)\n        return FileTypes.TYPE.STRINGS;\n\n    // Unknown\n    return FileTypes.TYPE.UNKNOWN;\n}\n\nfunction isCorrectItem(item){\n    return (\n        Object.keys(item).length === 4 &&\n        item[baseId] != undefined &&\n        item[size] != undefined &&\n        item[type] != undefined &&\n        item[crc] != undefined\n    );\n}\n\nmodule.exports = FileTypes;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/// Generic ArenaNet File with basic header functionality\nvar GW2File = require('../format/file/GW2File.js');\n\n/// Definition of main dat file header\nvar defANDAT = require('../format/definition/ANDAT');\n\n/// Definition of the MFT index\nvar defMFT = require('../format/definition/MFT');\n\n/// Small collection of Math and Sort algorithms\nvar MathUtils = require('../util/MathUtils.js');\n\n/// List of known GW2 maps used to make lookup faster\nvar MapFileList =  require('../MapFileList');\n\n/// Utilities to handle the whole archive file list\nvar FileTypes = require('./FileTypes');\n\n/**\n * A statefull class that handles reading and inflating data from a local GW2 dat file.\n * @class LocalReader\n * @constructor\n * @param {File}\tdatFile A core JS File instance, must refer to the GW2 .dat\n * @param {Object} logger {{#crossLink \"Logger\"}}{{/crossLink}} object responsible for UI logging.\n */\nvar LocalReader = function(datFile, logger){\n\n\t/// Initiate list of file inflation listeners\n\tthis.fileListeners = [];\n\n\t/// Add reference to file object to DAT\n\tthis.dat = datFile;\n\tthis.version = T3D.version;\n\n\tif(logger)\n\t\tthis.logger = logger;\n\telse\n\t\tthis.logger = T3D.Logger;\n};\n\n/**\n * Parses the dat file main header and parses the MFT index\n * @method parseHeaderAsync \n * @async\n * @param  {Function} callback Fires when mft indexing is complete. No arguments\n */\nLocalReader.prototype.parseHeaderAsync = function(callback){\n\n\tthis.onFullyLoaded = callback;\n\n\t///Read dat file header, 40 bytes should always be the length\n\tthis.loadFilePart(this.dat, 0, 40, this.readANDatHeader);\t\n}\n\n/**\n * Registers an inflater webworker from the DOM to this instance.\n * @method connectInflater\n * @param  {HTMLElement} inflater   The embed element for the t3dtools.js webworker\n */\nLocalReader.prototype.connectInflater = function(inflater){\n\tvar self = this;\n\n\t//HTML webworker Element\n\tthis.inflater = inflater;\t\n\n    /// Set up a listener for any messages passed by the webworker component\n    this.inflater.addEventListener(\n    \t'message',\n    \tfunction(message_event){\n    \t\tself.listener.call(self, message_event);\n    \t},\n    \ttrue\n\t);\n\n}\n\n/**\n * Listener for the inflater.\n * @method listener\n * @param {Object} message_event data received from the webworker\n */\nLocalReader.prototype.listener = function(message_event){\n\tif( typeof message_event.data === 'string' ) {\n\t\t\n\t\tthis.logger.log(\n\t\t\tT3D.Logger.TYPE_WARNING,\n\t\t\t\"Inflater threw an error\", message_event.data\n\t\t);\n\t\treturn;\n\t}\n\n\tvar handle = message_event.data[0];\n\n\tif(this.fileListeners[handle]){\n\t\tthis.fileListeners[handle].forEach(function(callback){\n\t\t\tvar data = message_event.data;\n\t\t\t/// Array buffer, dxtType, imageWidth, imageHeigh\t\t\t\n\t\t\tcallback(data[1], data[2], data[3], data[4]);\t\n\t\t});\n\n\t\t// Remove triggered listeners\n\t\tthis.fileListeners[handle] = null;\n\t}\n\t\n}\n\n/**\n * Reads the main header of this dat file and calls readMFTHeader\n * in order to parse the MFT index.\n * @method readANDatHeader\n * @param  {DataStream} ds DataStream instance holding header data\n */\nLocalReader.prototype.readANDatHeader = function(ds){\n\n\n\t/// Read file header data struct\n\tthis.fileHeader = ds.readStruct(defANDAT);\n\n\tthis.logger.log(\n\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\"Loaded Main .dat header\", this.fileHeader\n\t);\n\n\t/// Get pointer to MFT chunk header\n\tthis.fileHeader.mftOffset =  MathUtils.arr32To64(this.fileHeader.mftOffset);\n\n\t/// Load MFT\n\tthis.loadFilePart(\n\t\tthis.dat,\n\t\tthis.fileHeader.mftOffset,\n\t\tthis.fileHeader.mftSize,\n\t\tthis.readMFTHeader );\n\n};\n\n/**\n * Reads the MFT header and calls readMFTIndexFile\n * in order to parse the MFT index.\n * @method readMFTHeader\n * @param  {DataStream} ds DataStream instance holding header data\n */\nLocalReader.prototype.readMFTHeader = function(ds){\n\n\t/// Read MFT header data struct\n\t/// Global variable mft\n\tthis.mft = ds.readStruct(defMFT);\n\n\tvar entryStartPtr = ds.position;\n\tvar numEntries = this.mft.nbOfEntries;\n\n\t/// MFT has entries with offset, size, compression flag and crc\n\t/// for all files in the .dat\n\n\tthis.mft.entryDict = {\n\t\toffset:new Float64Array(numEntries),\n\t\tsize:new Uint32Array(numEntries),\n\t\tcompressed:new Uint16Array(numEntries),\n\t\tcrc: new Uint32Array(numEntries),\n\t}\n\n\n\t/// Read offset, size and compressed flag of the entries.\n\tthis.logger.log(\n\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\"reading MFT entries\"\n\t);\n\tfor(var i=0; i<numEntries-1; i++){\n\t\t\n\t\t/// Read the 64bit offset\n\t\tvar offset_0 = ds.readUint32();\n\t\tvar offset_1 = ds.readUint32();\n\t\tthis.mft.entryDict.offset[i] =  MathUtils.arr32To64(\n\t\t\t[ offset_0, offset_1 ] );\n\n\t\t/// Size is 32bit int and compression flags are 16bits\n\t\tthis.mft.entryDict.size[i] = ds.readUint32();\n\t\tthis.mft.entryDict.compressed[i] = ds.readUint16();\n\t\t\n\t\t/// Skip 6 unknown bytes\n\t\tds.seek(ds.position + 6);\n\n\t\t/// CRC is 32bit int\n\t\tthis.mft.entryDict.crc[i] = ds.readUint32();\n\t}\n\n\t/// Read data pointed to by 2nd mft entry\n\t/// This entry maps file ID to MFT index\t\n\tvar offset = this.mft.entryDict.offset[1];\n\tvar size = this.mft.entryDict.size[1];\n\n\tthis.loadFilePart(this.dat, offset, size, this.readMFTIndexFile);\n\n};\n\n/**\n * Reads the main MFT index file and builds MFT indices used for acceccing\n * files refered to by MFT index, File ID or Base ID.\n * @method readMFTIndexFile\n * @param  {DataStream} ds DataStream instance holding header data\n * @param  {Number} size The size of the index file\n */\nLocalReader.prototype.readMFTIndexFile = function(ds, size){\n\t\n\tvar length = size / 8;\n\n\t/// fileIdTable\n\tvar ids = new Uint32Array(length); // x -> id\n\tvar mftIndices = new Uint32Array(length); // x -> mft\n\n\t/// m_entryToId\n\tvar m_entryToId_baseId = new Uint32Array(length); //mft -> baseId\n\tvar m_entryToId_fileFileId = new Uint32Array(length); //mft -> fileid\n\n\tthis.mft.baseToMft = new Uint32Array(2e6); // -> mft\n\tthis.mft.fileToMft = new Uint32Array(2e6); // -> mft\n\t\n\tfor(var i=0; i<length; i++){\n\t\tids[i] = ds.readUint32();\n\t\tmftIndices[i] = ds.readUint32();\n\t}\n\t\n\t/// Raw map of \"ID\" to mft index\n\tthis.mft.id2index = {\n\t\tids:ids,\n\t\tmftIndices:mftIndices\n\t}\n\n\t/// m_entryToId has both base and filed id\n\tfor(var i=0; i<length; i++){\n\n\n\t\tif (ids[i] == 0 && mftIndices[i] == 0) {\n            continue;\n        }\n \t\t\n \t\tvar entryIndex = mftIndices[i];\n        var entry     = {\n        \tfileId : m_entryToId_fileFileId[entryIndex],\n        \tbaseId : m_entryToId_baseId[entryIndex]\n        }\n\n        if (entry.baseId == 0) {\n            entry.baseId = ids[i];            \n        } else if (entry.fileId == 0) {\n            entry.fileId = ids[i];\n        }\n\n        if (entry.baseId > 0 && entry.fileId > 0) {\n            if (entry.baseId > entry.fileId) {\n            \t//std::swap(entry.baseId, entry.fileId);\n            \tvar temp = entry.baseId;\n            \tentry.baseId = entry.fileId;\n            \tentry.fileId = temp;                \n            }\n        }\n\n        this.mft.baseToMft[entry.baseId] = entryIndex;\n        this.mft.fileToMft[entry.fileId] = entryIndex;\n\n        //Write back\n        m_entryToId_fileFileId[entryIndex] = entry.fileId;\n        m_entryToId_baseId[entryIndex] = entry.baseId;\n\t}\n\n\t/// Populate global VO with finished dicts\n\tthis.mft.m_entryToId = {\n\t\tbaseId:m_entryToId_baseId,\n\t\tfileId:m_entryToId_fileFileId\n\t}\n\n\n\tthis.logger.log(\n\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\"Finished indexing MFT \", this.mft\n\t);\n\n\tif(this.onFullyLoaded)\n\t\tthis.onFullyLoaded();\n};\n\n/**\n * Reads the cached list of files corresponding to the reader's .dat from the localStorage.\n * @method loadFileList\n * @return {Array} Grouped List of files\n */\nLocalReader.prototype.loadFileList = function(){\n\tvar datFile = this.dat;\n\tvar datName = \"fileList_\" + this.version + \".\" + datFile.name + \"_\" + datFile.lastModified + \"_\" + datFile.size;\n\tvar str = localStorage.getItem(datName);\n\tif(!str)\n\t\treturn null;\n\ttry{\n\t\treturn JSON.parse(str);\t\n\t}\n\tcatch(e){\t\t\n\t}\n\treturn null;\t\n}\n\n/**\n * Reads the cached list of maps corresponding to the reader's .dat from the localStorage.\n * @method loadMapList\n * @return {Array} Grouped List of maps\n */\nLocalReader.prototype.loadMapList = function(){\n\tvar datFile = this.dat;\n\tvar mapName = \"mapList_\" + this.version + \".\" + datFile.name + \"_\" + datFile.lastModified + \"_\" + datFile.size;\n\tvar str = localStorage.getItem(mapName);\n\tif(!str)\n\t\treturn null;\n\ttry{\n\t\treturn JSON.parse(str);\t\n\t}\n\tcatch(e){\n\t\t\n\t}\n\treturn null;\t\n}\n\n/**\n * Stores a files list array in the browser's local storage.\n * @method storeFileList\n * @param  {File} datFile  The File instance used to build the file list.\n * @param  {Object} fileList The list to store.\n */\nLocalReader.prototype.storeFileList = function(datFile, fileList){\n\tdebugger;\n\tvar stringrep = JSON.stringify(fileList);\n\tvar datName = \"fileList_\" + this.version + \".\" + datFile.name + \"_\" + datFile.lastModified + \"_\" + datFile.size;\n\tlocalStorage.setItem(datName, stringrep);\n}\n\n\n/**\n * Stores a map list array in the browser's localStorage.\n * @method storeMapList\n * @param  {File} datFile  The File instance used to build the map list.\n * @param  {Object} mapList The list to store.\n */\nLocalReader.prototype.storeMapList = function(datFile, mapList){\n\tvar mapName = \"mapList_\" + this.version + \".\" + datFile.name + \"_\" + datFile.lastModified + \"_\" + datFile.size;\n\tlocalStorage.setItem(mapName, JSON.stringify(mapList) );\n}\n\n\n/**\n * Reads the file type of each file in the dat and stores the resulting list in \n * the browser's local storage.\n * @method readFileListAsync\n * @async\n * @param  {Function} callback Fired when the list is generated and stores\n *\n * First argument is the a list of mft indices grouped by file type.\n */\nLocalReader.prototype.readFileListAsync = function(callback){\n\n\tvar self = this;\n\n\t/// Get a list of unique indices based on file addresses\n\tvar mftIndices = this.mft.id2index.mftIndices;\n\tvar uniqueIdxs = MathUtils.sort_unique(mftIndices, function(a, b) {\n\t\treturn self.mft.entryDict.offset[a] - self.mft.entryDict.offset[b];\n\t});\n\n\t/// Set total ammount of files to list\n\tvar maxLength = uniqueIdxs.length;\n\t//maxLength = 1e4;\n\n\tthis.logger.log(\n\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\"Scanning \",maxLength, \"files\"\n\t);\n\n\t/// Number of parallel event chains for file lookup\n\tvar N = 8;\n\n\tthis.listFiles(uniqueIdxs, null, 0, maxLength, N, \n\t\tfunction(result){\n\n\t\t\t/// Callback for listFiles\n\t\t\t/// should be an object grouped by header type\n\n\t\t\t/// Clear listeners used during indexing\n\t\t\tself.fileListeners = [];\n\t\t\t\n\t\t\tself.storeFileList(self.dat, result);\n\n\t\t\t/// Fire callback and pass the map list\n\t\t\tcallback(result);\n\t\t}\n\t);\n}\n\n/**\n * Looks up mft indices for all mapc pack files in the dat. Either looks trough all files or\n * only the list defined in {{#crossLink \"T3D/MapFileList:property\"}}{{/crossLink}}.\n * @method readMapListAsync\n * @async\n * @param  {boolean}   searchAll if true forces re-indexing of entire dat.\n * If false only reads indices specified in {{#crossLink \"T3D/MapFileList:property\"}}{{/crossLink}}.\n * @param  {Function} callback Fired when the list is generated\n *\n * First argument is the a list of mft indices grouped by file type. For exmample:\n * \n * \t\t{\t\n * \t\t\tmaps:[\n * \t\t\t\t{\n * \t\t\t\t\tname: 'Heart of Maguuma',\n * \t\t\t\t\tmaps: [\n * \t\t\t\t\t\t{fileName:1151420, name:'HoT BWE3 Raid'},\n * \t\t\t\t\t\t{fileName:969663, name:'Verdant Brink}\n * \t\t\t\t\t]\n * \t\t\t\t},\n * \t\t\t\t{\n * \t\t\t\t\tname: 'Unknown maps',\n * \t\t\t\t\tmaps: [\n * \t\t\t\t\t\t{fileName:12345678, name:'Unknown map 12345678'}\n * \t\t\t\t\t]\n * \t\t\t\t}\n * \t\t\t]\n \n *\t    };\n */\nLocalReader.prototype.readMapListAsync = function(searchAll, callback){\n\tvar self = this;\n\tvar datFile = this.dat;\n\tvar mftIndices = [];\n\n\t/// Number of threads for map lookup\n\tvar N = 8; \n\n\t/// Time spent looking up maps\n\tvar t = new Date().getTime();\n\n\tthis.logger.log(\n\t\tT3D.Logger.TYPE_PROGRESS,\n\t\t\"Finding maps (first visit only)\",\n\t\t\"initializing\"\n\t)\n\n\t/// Only look for known maps\n\tif(!searchAll){\n\n\t\tMapFileList.maps.forEach(function(mapCol){\n\t\t\tmapCol.maps.forEach(function(mapEntry){\n\t\t\t\tvar entryBaseId = mapEntry.fileName.split(\".\")[0];\n\t\t\t\tvar mftIndex = self.getFileIndex(entryBaseId)\n\t\t\t\tmftIndices.push(mftIndex);\n\t\t\t});\n\t\t});\n\t}\n\n\t/// Look for all maps\n\telse{\n\t\tmftIndices = this.mft.id2index.mftIndices;\n\t}\n\n\t/// Get a list of unique indices based on file addresses\n\tvar uniqueIdxs = MathUtils.sort_unique(mftIndices, function(a, b) {\n\t\treturn self.mft.entryDict.offset[a] - self.mft.entryDict.offset[b];\n\t});\n\n\t/// Callback for map lookup\n\tvar cb = function(result){\n\t\tvar dt = new Date().getTime() - t;\n\n\t\tself.logger.log(\n\t\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\t\"Time elapsed \", Math.round(0.001*dt),\" seconds\"\n\t\t);\n\n\t\t/// Clear listeners used during indexing\n\t\tself.fileListeners = [];\n\n\t\tvar localMapList = {maps:[]};\n\n\t\t/// Arrange each found map into a grouped list\n\t\tif(result.mapc){\n\n\t\t\tresult.mapc.forEach(function(mftIndex){\n\n\t\t\t\t/// Base Id is used by gw2browser and is therefore the de facto identifier\n\t\t\t\t/// in the community. Let's use it here too!\n\t\t\t\tvar baseId = self.mft.m_entryToId.baseId[mftIndex+1];\n\n\t\t\t\t/// Hack to avoid releasing maps newer than VB\n\t\t\t\t/*if(baseId > 11542000){\n\t\t\t\t\treturn;\n\t\t\t\t}*/\n\n\t\t\t\tvar name = \"\";\n\t\t\t\tvar group = \"\";\n\n\t\t\t\tMapFileList.maps.forEach(function(mapCol){\n\t\t\t\t\tmapCol.maps.forEach(function(mapEntry){\n\t\t\t\t\t\tif(name.length == 0 && mapEntry.fileName.indexOf(baseId+\".\")>=0){\n\t\t\t\t\t\t\tname = mapEntry.name;\n\t\t\t\t\t\t\tgroup = mapCol.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif(name.length == 0){\n\t\t\t\t\tname = \"Unknown map \"+baseId;\n\t\t\t\t}\n\n\t\t\t\tif(group.length == 0){\n\t\t\t\t\tgroup = \"Unknown maps\";\n\t\t\t\t}\n\n\t\t\t\tvar localGroup = null;\n\t\t\t\tlocalMapList.maps.forEach(function(mapCol){\n\t\t\t\t\tif(mapCol.name == group){\n\t\t\t\t\t\tlocalGroup = mapCol;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif(!localGroup){\n\t\t\t\t\tlocalGroup = {name:group,maps:[]};\n\t\t\t\t\tlocalMapList.maps.push(localGroup);\n\t\t\t\t}\n\n\t\t\t\tlocalGroup.maps.push({fileName:baseId, name:name});\n\t\t\t\t\n\t\t\t});\n\n\t\t} /// end if result.mapc\n\t\t\t\t\n\t\t/// Store map list into local storage.\n\t\tself.storeMapList(datFile, localMapList);\n\n\t\t/// Fire callback and pass the map list\n\t\tcallback(localMapList);\n\n\t}/// End of map lookup callback.\n\n\n\t/// Start map lookup:\n\tvar maxLength = uniqueIdxs.length;\n\tthis.logger.log(\n\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\"Scanning \",maxLength, \" files for maps...\"\n\t);\n\tthis.listFiles(uniqueIdxs, \"mapc\", 0, maxLength, N, cb);\n}\n\n/**\n * Lists all MFT indices grouped by file type. If a file type is specified only files of that type\n * is added to the list.\n * \n * @method listFiles\n * @param  {Array}   uniqueIdxs File MFT indices to look in.\n * @param  {String}  type       Pack file type or file type to accept. If not set adds all files. \n * @param  {[type]}   start     uniqueIdxs start ofset \n * @param  {[type]}   length    number of entries to scan in uniqueIdxs\n * @param  {[type]}   N         Number of parallel event listeners to run while scanning. (Kinda like parallelism but not quite)\n * @param  {Function} callback  Fired when all files have been indexed. First argument is a list of \n * MFT indices grouped by file type, for example\n * \t{\n *\t  \t\"Unknown\"\t: [444, 555, 333],\n *\t  \t\"MODL\"\t\t: [444, 555, 333],\n * \t  \t\"String\"\t: [666, 777, 888]\n * \t}\n */\nLocalReader.prototype.listFiles = function(uniqueIdxs, type, start, length, N ,callback){\n\tvar self = this;\n\tvar maxlen = start+length;\n\tvar lastPct = 0;\n\tvar pctM = 100.0 / Math.min(length, uniqueIdxs.length - start);\n\tvar threadsDone = 0;\n\n\tvar result = {};\n\n\t/// Fires when file has beed inflated.\n\t/// Pushes matching file types into the result array\n\tvar peekCallback=function(inflatedData, i, mftIndex){\n\t\tif(!inflatedData){\n\t\t\tself.logger.log(\n\t\t\t\tT3D.Logger.TYPE_WARNING,\n\t\t\t\t\"No infalted data for entry\"\n\t\t\t);\n\t\t\treadUniqueId(i+N);\n\t\t\treturn;\n\t\t}\n\n\t\tvar ds = new DataStream(inflatedData);\n\t\tvar fileType = FileTypes.getFileType(ds);\n\t\tfileType = FileTypes.getTypeName(fileType);\n\t\t\n\t\t/// Add file to result[type] array\n\t\t/// If a type was specified in the call only allow that type to be added\n\t\tif( !type || fileType == type){\n\t\t\tif(!result[fileType]){\n\t\t\t\tresult[fileType] = [];\n\t\t\t}\n\t\t\tresult[fileType].push(mftIndex);\n\t\t}\n\n\t\treadUniqueId(i+N);\n\t}\n\n\t\n\tvar readUniqueId = function(i){\n\n\t\tif(i%N==0){\n\t\t\tvar pct = Math.min(100, Math.floor( (i-start) * pctM) );\n\t\t\tif(lastPct != pct){\n\t\t\t\tself.logger.log(\n\t\t\t\t\tT3D.Logger.TYPE_PROGRESS,\n\t\t\t\t\t\"Find type\",\n\t\t\t\t\tpct\n\t\t\t\t);\n\t\t\t\tlastPct = pct;\n\t\t\t}\n\t\t}\n\n\t\tif( i>=uniqueIdxs.length || i>=maxlen ){\n\t\t\tself.logger.log(\n\t\t\t\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\t\t\t\"Thread \",i%N+\" done\"\n\t\t\t);\n\t\t\tthreadsDone++;\n\t\t\tif(threadsDone == N){\n\t\t\t\tcallback(result);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tvar mftIndex = uniqueIdxs[i];\n\n\t\tvar compressed = self.mft.entryDict.compressed[mftIndex];\n\t\tif(!compressed){\n\t\t\t/*self.logger.log(\n\t\t\t\t\tT3D.Logger.TYPE_WARNING,\n\t\t\t\t\t\"File is NOT compressed, skipping.\"\n\t\t\t);*/\n\t\t\treadUniqueId(i+N);\n\t\t\treturn;\n\t\t}\n\n\t\tvar handle = mftIndex;\n\t\tvar offset = self.mft.entryDict.offset[mftIndex];\n\t\tvar size =  self.mft.entryDict.size[mftIndex];\n\n\t\tif(size<0x20){\n\t\t\t/*this.logger.log(\n\t\t\t\t\tT3D.Logger.TYPE_WARNING,\n\t\t\t\t\t\"File is too small, skipping.\"\n\t\t\t);*/\n\t\t\treadUniqueId(i+N);\n\t\t\treturn;\n\t\t}\n\n\t\t/// Read .dat file part\n\t\tself.loadFilePart(self.dat, offset, Math.min(size,2000),\n\t\t\tfunction(ds, _size){\n\t\t\t\t\n\t\t\t\t///Infalte\n\t\t\t\tself.inflate(\n\t\t\t\t\tds,\n\t\t\t\t\t_size,\n\t\t\t\t\thandle,\n\t\t\t\t\t///Infaltion  callback\n\t\t\t\t\tfunction(inflatedData){\n\t\t\t\t\t\tpeekCallback(inflatedData, i, mftIndex);\n\t\t\t\t\t}, \n\t\t\t\t\tfalse, 0x20\n\t\t\t\t);\n\n\n\t\t});\n\n\t}\n\n\t/// Make N calls in serial, this will however result in N\n\t/// Parallell processes due to callbacks..\n\tfor(var n=0; n<N; n++){\n\t\treadUniqueId(start + n);\t\n\t}\n};\n\n/**\n * Gets MFT index by fileId or baseId\n * @method getFileIndex\n * @param  {Number} baseOrFileId A file Id or base Id\n * @return {Number}              MFT index\n */\nLocalReader.prototype.getFileIndex = function(baseOrFileId){\n\n\n\tvar index = -1;\n\n\t/// Get by base id\n\t\n\t/*for(var i = 0; i<this.mft.m_entryToId.baseId.length; i++){\n\t\tif( this.mft.m_entryToId.baseId[i+1] == baseOrFileId ){\t\n\t\t\t\n\t\t\tindex = i;\n\n\t\t\tthis.logger.log(\n\t\t\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\t\t\"Found BASE ID\", baseOrFileId, \" at INDEX \", i\n\t\t\t);\n\n\t\t\treturn index;\n\t\t}\n\t}*/\n\tbaseOrFileId = parseInt(baseOrFileId);\n\tindex = this.mft.m_entryToId.baseId.indexOf(baseOrFileId);\n\tif(index != -1){\n\t\treturn index-1;\n\t}\n\telse{\n\t\tindex = this.mft.m_entryToId.fileId.indexOf(baseOrFileId);\n\t\tif(index != -1){\n\t\t\treturn index-1;\n\t\t}\n\t}\n\n\t/// Get by file id\n\t/*if(index==-1){\n\t\tfor(var i = 0; i<this.mft.m_entryToId.fileId.length; i++){\n\t\t\tif( this.mft.m_entryToId.fileId[i+1] == baseOrFileId ){\t\n\t\t\t\t\n\t\t\t\tindex = i;\n\n\t\t\t\tthis.logger.log(\n\t\t\t\t\tT3D.Logger.TYPE_DEBUG,\n\t\t\t\t\t\"Found FILE ID\", baseOrFileId, \" at INDEX \", i\n\t\t\t\t);\n\n\t\t\t\treturn index;\n\t\t\t}\n\t\t}\t\n\t}*/\n\n\treturn index;\n}\n\n/**\n * Reads a bitmap from a texture file in the dat.\n * @method loadTextureFile\n * @async\n * @param  {Number}   baseId   Base or File id of the texture to load\n * @param  {Function} callback Fires when the inflater has read the texture data.\n * \n * The passed arguments are \n * -ArrayBuffer Bitmap\n * -Number DXT Type\n * -Number image width\n * -Number image height\n *\n */\nLocalReader.prototype.loadTextureFile = function(baseId, callback){\n\tthis.loadFile(baseId, callback, true);\n}\n\n/**\n * Reads data from a file in the dat.\n * @method loadFile\n * @async\n * @param  {Number}   baseId   Base or File id of the texture to load\n * @param  {Function} callback Fires when the inflater has read the data.\n *\n * The passed arguments are \n * -ArrayBuffer raw data\n * -Number DXT Type if applicable\n * -Number image width if applicable\n * -Number image height if applicable\n *\n * \n * @param  {boolean}  isImage  \n * @param  {[type]}   raw      If true, any infation is skipped and raw data is returned.\n */\nLocalReader.prototype.loadFile = function(baseId, callback, isImage, raw){\n\t\n\tvar self = this;\n\n\tvar index = this.getFileIndex(baseId);\n\tvar mftIndex = index;\n\n\t//If the file doesn't exist still make sure to fire the callback\n\tif(mftIndex <= 0 ){\n\t\tself.logger.log(\n\t\t\tT3D.Logger.TYPE_WARNING,\n\t\t\t\"Could not find file with baseId \",baseId\n\t\t);\n\t\tcallback(null);\n\t\treturn;\n\t}\n\n\t//console.log(\"fetchign  baseId \",baseId);\n\t\n\tvar offset = this.mft.entryDict.offset[mftIndex];\n\n\tvar size = this.mft.entryDict.size[mftIndex];\n\t//console.log(\"File at found index is \"+ size +\" bytes\");\n\t\n\tvar compressed = this.mft.entryDict.compressed[mftIndex];\n\tif(!compressed){\n\t\tself.logger.log(\n\t\t\tT3D.Logger.TYPE_WARNING,\n\t\t\t\"File is NOT compressed, skipping\"\n\t\t);\n\n\t\tcallback(null);\n\t\treturn;\n\t}\n\n\t/// Read map and pass the ds to our inflate function\n\t//TODO: will this work?? Shared base id's and all that...\n\tvar handle = index;\n\n\tthis.loadFilePart(this.dat, offset, size, function(ds, size){\n\t\t\n\t\t/// If the raw param was passed return the un-inflated data\n\t\tif(raw){\n\t\t\tcallback(ds);\n\t\t}\n\n\t\t/// If raw parameter was not passed or false, inflate first\n\t\telse{\n\t\t\tself.inflate(ds, size, handle, callback, isImage);\t\n\t\t}\n\t\t\n\t});\n};\n\n\n/**\n * Inflates binary data using an external webworker. If the isImage flag is set the infalted data is\n * also decoded if it contains DXT image data.\n * @method inflate\n * @param  {DataStream} ds DataStream instance holding data to inflate\n * @param  {Number}   size      Number if bytes to read\n * @param  {Number}   handle    Unique ID for this file\n * @param  {Function} callback  callback to register for this inflating task\n * @param  {Boolean}  isImage   Passed to the inflater in order to decode image data\n * @param  {[type]}   capLength Number of bytes to deflate.\n */\nLocalReader.prototype.inflate = function(ds, size, handle, callback, isImage, capLength){\n\t\n\tvar arrayBuffer = ds.buffer;\t\n\n\tif(!capLength){\n\t\t//capLength = arrayBuffer.byteLength;\n\t\tcapLength = 1;\n\t}\n\t//console.log(\"Uncompressing file size \",size, \"handle\", handle, \"cap\", capLength, \"isImage\", isImage);\n\t\n\tif(arrayBuffer.byteLength < 12){\n\t\tthis.logger.log(\n\t\t\tT3D.Logger.TYPE_WARNING,\n\t\t\t\"not inflating, length is too short (\"+arrayBuffer.byteLength+\")\", handle\n\t\t);\n\t\tcallback(null);\n\t\treturn;\n\t}\n\tif(handle == 123350 || handle == 123409 || handle == 123408 ){\n\t\tcallback(null);\n\t\treturn;\n\t}\n\n\t/// Register listener for file load callback\n\tif(this.fileListeners[handle]){\n\t\tthis.fileListeners[handle].push(callback);\n\n\t\t///No need to make another call, just wait for callback event to fire.\n\t\treturn;\n\t}\n\telse{\n\t\tthis.fileListeners[handle] = [callback];\t\n\t}\n\t\n    \n    /// Call the webworker component with the handle and arrayBuffer as an arguments\n\tthis.inflater.postMessage([handle,arrayBuffer,isImage===true, capLength]);\n};\n\n/**\n * Reads bytes from a big file. Uses offset and length (in bytes) in order to only load\n * parts of the file that are used.\n * @method loadFilePart\n * @async\n * @param  {File}   file     File object to read from\n * @param  {[type]}   offset   Offset in bytes to start reading\n * @param  {[type]}   length   Number of bytes to read\n * @param  {Function} callback Two arguments are passed. \n *\n * The first is a DataStream object representation of the loaded data.\n *\n * The second is the length of the data.\n */\nLocalReader.prototype.loadFilePart = function(file, offset, length, callback){\n\tvar self = this;\n\n\tvar reader = new FileReader();\n\t\t\n\treader.onerror = function(fileEvent){\n\t\tdebugger;\n\t}\n\treader.onload  = function(fileEvent){\n\n\t\tvar buffer = fileEvent.target.result;\n\t\tvar ds = new DataStream(buffer);\n\t  \tds.endianness = DataStream.LITTLE_ENDIAN;\n\n\t  \t/// Pass data stream and data length to callback function, keeping \"this\" scope\n\t  \tcallback.call(self, ds, length);\n\t}\n\t\n  \tvar start = offset;\n\tvar end = start + length;\n\treader.readAsArrayBuffer(file.slice(start, end));\n};\n\nmodule.exports = LocalReader;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/// T3DLib version\nlet version = require('../T3DLib').version;\n\n/// Indexed DB versioning\nconst DB_VERSION = 1;\n\n\n\n\n/****\n * This current model doesn't work so well on the performance side\n * IndexedDB is not meant to be used to store a huge array of 500 000+ items\n * containing just 4 numbers.\n * Next iteration will be one item = Full List\n *   The last item is the most up to date version\n * During the scanning, the archive may upload incomplete versions of the list.\n ****/\n\n\n\n/**\n * This class handles offline storage of the .dat indexes and files metadata\n * @class PersistantStore\n * @constructor\n */\nclass PersistantStore{\n\n    constructor() {\n        //They may be multiple connection request issued at the same time, but it's actually okay since\n        //as soon as they are registered, the not-used ones will get garbage collected\n        this._dbConnection = undefined;\n        this._getConnection();\n    }\n\n    /**\n     * Initialize the IndexedDB connection and manages version changes.\n     * @async\n     * @method connectDB\n     */\n    _getConnection(){\n        let self = this;\n        return new Promise(function(resolve, reject){\n\n            if(self._dbConnection){\n                return resolve(self._dbConnection);\n            }\n\n            // Let us open our database\n            let request = window.indexedDB.open(\"Tyria3DLibrary\", DB_VERSION);\n            \n            /// onblocked is fired when the db needs an upgrade but an older version is opened in another tab\n            request.onblocked = function(event) {\n                T3D.Logger.log(\n                    T3D.Logger.TYPE_ERROR,\n                    \"The T3D persistant database cannot be upgraded while the app is opened somewhere else.\"\n                );\n            }\n\n            /// fired when the database needs to be upgraded (or the first time)\n            request.onupgradeneeded = function(event){\n                let db = event.target.result;\n                let currentVersion = event.oldVersion;\n\n                /// Define the database structure:\n                if(currentVersion < 1){\n                    let store = db.createObjectStore(\"fileList\", { keyPath: \"baseId\", unique: true});\n                    store.createIndex(\"fileType\", \"fileType\", {unique: false});\n                }\n            }\n\n            request.onsuccess = function(event){\n                self._dbConnection = event.target.result;\n                self.isReady = true;\n                resolve(self._dbConnection);\n            }\n\n            request.onerror = function(event){\n                T3D.Logger.log(\n                    T3D.Logger.TYPE_ERROR,\n                    \"The T3D persistant database could not be opened.\"\n                );\n                reject(request.error);\n            }\n        });\n    }\n\n    getFile(id) {\n        let self = this;\n        return new Resolve(function(resolve, reject){\n            self._getConnection().then((db) => {\n                let request = db.transaction([\"fileList\"], \"readonly\")\n                                .objectStore(\"fileList\")\n                                .get(itemId);\n                request.onsuccess = function(event){\n                    resolve(request.result);\n                }\n                request.onerror = function(event){\n                    reject(request.result);\n                }\n            });\n        });\n    }\n\n    getTypeFiles(fileType, limit) {\n        let self = this;\n        return new Resolve(function(resolve, reject){\n            self._getConnection().then((db) => {\n                let request = db.transaction([\"fileList\"], \"readonly\")\n                    .objectStore(\"fileList\")\n                    .index(\"fileType\")\n                    .getAll(IDBKeyRange.only(fileType), limit);\n                request.onsuccess = function(event){\n                    resolve(request.result);\n                }\n                request.onerror = function(event){\n                    reject(request.result);\n                }\n            });\n        });\n    }\n\n    getHighestId() {\n        let self = this;\n        return new Promise((resolve, reject) => {\n            self._getConnection().then((db) => {\n\n            });\n        });\n    }\n\n    getCount() {\n        let self = this;\n        return new Promise(function(resolve, reject){\n            self._getConnection().then((db) => {\n                let store = db.transaction([\"fileList\"], \"readonly\")\n                    .objectStore(\"fileList\");\n                let reqCount = store.count();\n                reqCount.onsuccess = () => {\n                    resolve(reqCount.result);\n                };\n                reqCount.onerror = reject;\n            });\n        });\n    }\n\n    getFiles(offset, limit) {\n        let self = this;\n        return new Promise(function(resolve, reject){\n\n            let range;\n            if(!offset && !limit)\n                //warning this will blow up\n                range = IDBKeyRange.lowerBound(0);\n            else if(!offset)\n                range = IDBKeyRange.upperBound(limit);\n            else if(!limit)\n                range = IDBKeyRange.lowerBound(offset);\n            else\n                range = IDBKeyRange.bound(offset, limit);\n\n            let returnArray = [];\n            self._getConnection().then((db) => {\n                let request = db.transaction([\"fileList\"], \"readonly\")\n                    .objectStore(\"fileList\")\n                    .getAll(range);\n\n                request.onsuccess = function(event){\n                    //Unfold the result into a usable array\n                    for(let item of request.result){\n                        returnArray[item.baseId] = item;\n                    }\n                    resolve(returnArray);\n                }\n                request.onerror = function(event){\n                    reject(request.result);\n                }\n                \n            });\n        });\n    }\n\n    putFile(item){\n        let self = this;\n        return new Promise(function(resolve, reject){\n            self._getConnection().then((db) => {\n                let request = db.transaction([\"fileList\"], \"readwrite\")\n                .objectStore(\"fileList\")\n                .put(item);\n\n                request.onsuccess = function(event){\n                    resolve(request.result);\n                }\n                request.onerror = function(event){\n                    reject(request.result);\n                }\n            });\n        });\n    }\n\n    deleteFile(item){\n        let self = this;\n        return new Promise(function(resolve, reject){\n            self._getConnection().then((db) => {\n                let request = self._dbConnection.transaction([\"fileList\"], \"readwrite\")\n                    .objectStore(\"fileList\")\n                    .delete(item);\n\n                request.onsuccess = function(event){\n                    resolve(request.result);\n                }\n                request.onerror = function(event){\n                    reject(request.result);\n                }\n            });\n        });\n    }\n}\n\nmodule.exports = PersistantStore;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * A Logger class for T3D\n *\n * This satic class defines severity levels of messages and provides\n * basic logging functionality. Replacing the reference to\n * @class Logger\n * @static \n */\nvar Logger = {};\n\n/**\n * @property {[Number]} TYPE_ERROR\n */\nLogger.TYPE_ERROR = 4;\n\n/**\n * @property {[Number]} TYPE_WARNING\n */\nLogger.TYPE_WARNING = 3;\n\n/**\n * @property {[Number]} TYPE_MESSAGE\n */\nLogger.TYPE_MESSAGE = 2;\n\n/**\n * @property {[Number]} TYPE_PROGRESS\n */\nLogger.TYPE_PROGRESS = 1;\n\n/**\n * @property {[Number]} TYPE_DEBUG\n */\nLogger.TYPE_DEBUG = 0;\n\n\n\n/**\n * The logging functions, indexed by severity/type.\n *\n * @property logFunctions\n * @type Function[]\n */\nLogger.logFunctions = new Array(5);\n\n/**\n * Main logging method. Takes 1 to N arguments. If there are more than 1 arguments\n * the first argument is interpreted as severity. If there is only one argument\n * severity defaults to\n * {{#crossLink \"Logger/TYPE_MESSAGE:property\"}}{{/crossLink}}.\n *  \n * The following arguments are passed to a logging function matching the\n * severity.\n * \n \n * \n * @method  log\n */\nLogger.log = function(){\n\n\t/// Require at least 1 argument\n\tif(arguments.length == 0){\n\t\treturn;\n\t}\n\t\n\t/// Parse arguments to an actual array\n\tvar argArr = Logger.argsToArr(arguments);\n\n\t/// Default to message if just one argument was passed\n\tif(argArr.length == 1){\n\t\targArr.unshift(Logger.TYPE_MESSAGE);\n\t}\n\n\t/// Otherwise 1st arg is severity, log/warn/error\n\tvar severity = Math.max(0,Math.min(Logger.logFunctions.length, argArr.shift()));\n\tvar logFunc  = Logger.logFunctions[severity];\n\n\t/// Ouput the rest of the arguments\n\tlogFunc.apply(this, argArr);\n}\n\nLogger.argsToArr = function(args){\n\tvar argArr = new Array(args.length);\n    for(var i = 0; i < argArr.length; ++i) {\n        argArr[i] = args[i];\n    }\n    return argArr;\n}\n\nLogger.logFunctions[Logger.TYPE_ERROR] = function(){\n\tconsole.error.apply(console,arguments);\n}\n\nLogger.logFunctions[Logger.TYPE_WARNING] = function(){\n\tconsole.warn.apply(console,arguments);\n}\n\nLogger.logFunctions[Logger.TYPE_MESSAGE] = function(){\n\tconsole.log.apply(console,arguments);\n}\n\nLogger.logFunctions[Logger.TYPE_PROGRESS] = function(){\n\tvar argArr = Logger.argsToArr(arguments);\n\targArr.unshift(\"Progress: \");\n\tconsole.log.apply(console,argArr);\n}\n\nLogger.logFunctions[Logger.TYPE_DEBUG] = function(){\n\tvar argArr = Logger.argsToArr(arguments);\n\tconsole.debug.apply(console,argArr);\n}\n\n\nmodule.exports = Logger;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = {\n\n\tmaps : [\n\t\t{\n            name:\"01. Shiverpeaks\",\n            maps: [\n                { fileName :\"125199.data\", name:\"Wayfarer Foothills (0)\" },\t\n                { fileName :\"187611.data\", name:\"Wayfarer Foothills (1)\" },\n                { fileName :\"568778.data\", name:\"Cragstead\" },\n                { fileName :\"132434.data\", name:\"Hoelbrak (0)\" },\n                { fileName :\"197122.data\", name:\"Hoelbrak (1)\" },\n                { fileName :\"124093.data\", name:\"Snowden Drifts (0)\" },\t\n                { fileName :\"186397.data\", name:\"Snowden Drifts (1)\" },\n                { fileName :\"275155.data\", name:\"Dredgehaunt Cliffs\" },\n                { fileName :\"276252.data\", name:\"Frostgorge Sound\" },\n                { fileName :\"277587.data\", name:\"Lornar's Pass\" },\n                { fileName :\"278717.data\", name:\"Timberline Falls (0)\"},\n                { fileName :\"846866.data\", name:\"Timberline Falls (1)\" },\n                { fileName :\"1018612.data\", name:\"Timberline Falls (2)\" },\n                { fileName :\"295282.data\", name:\"Eye of the North\" },\n            ]\n        },\n\t\t{\n            name:\"02. Ascalon\",\n            maps: [\n                { fileName :\"126118.data\", name:\"Plains of Ashford (0)\" },\n                { fileName :\"188591.data\", name:\"Plains of Ashford (1)\" },\n                { fileName :\"127888.data\", name:\"Diessa Plateau (0)\" },\t\n                { fileName :\"190490.data\", name:\"Diessa Plateau (1)\" },\n                { fileName :\"131944.data\", name:\"Black Citadel (0)\" },\n\t \t\t\t{ fileName :\"196585.data\", name:\"Black Citadel (1)\" },\n\t \t\t\t{ fileName :\"280025.data\", name:\"Blazeridge Steppes\" },\n\t\t\t\t{ fileName :\"281313.data\", name:\"Fireheart Rise\" },\n\t\t\t\t{ fileName :\"282668.data\", name:\"Iron Marches\" },\n\t\t\t\t{ fileName :\"283574.data\", name:\"Fields of Ruin\" },\n            ]\n        },\n        {\n            name:\"03. Kryta\",\n            maps: [\n                { fileName :\"191000.data\", name:\"Lion's Arch (0)\"},\n                { fileName :\"814803.data\", name:\"Lion's Arch (1)\" },\n                { fileName :\"1019669.data\", name:\"Lion's Arch (Legacy)\" },\n                { fileName: \"1796999.data\", name:\"Lion's Arch (2)\"},\n                { fileName: \"1869665.data\", name:\"Lion's Arch (3)\"},\n                { fileName :\"128151.data\", name:\"Divinity's Reach (0)\"  },\n                { fileName :\"191265.data\", name:\"Divinity's Reach (1)\" },\n                { fileName :\"705746.data\", name:\"Divinity's Reach (2)\" },\n                { fileName :\"129834.data\", name:\"North of Divinity's Reach (0)\" },\t\n                { fileName :\"193081.data\", name:\"North of Divinity's Reach (1)\" },\n                { fileName :\"129524.data\", name:\"Queensdale (0)\" },\n                { fileName :\"192711.data\", name:\"Queensdale (1)\" },\n                { fileName :\"130970.data\", name:\"Kessex Hills (0)\" },\t\n                { fileName :\"194288.data\", name:\"Kessex Hills (1)\" },\n                { fileName :\"672138.data\", name:\"Kessex Hills (2)\" },\n                { fileName :\"861815.data\", name:\"Kessex Hills (3)\" },\n                { fileName :\"286945.data\", name:\"Bloodtide Coast\" },\n                { fileName :\"287870.data\", name:\"Harathi Hinterlands\" },\n                { fileName :\"289176.data\", name:\"Gendarran Fields\" },\n                { fileName :\"295005.data\", name:\"Chantry of Secrets\" },\n                { fileName :\"294938.data\", name:\"Claw Island\" },\n            ]\n        },\n        {\n            name:\"04. Maguuma Jungle\",\n            maps: [\n                { fileName :\"195149.data\", name:\"Caledon Forest\" },\n\t\t\t\t{ fileName :\"195493.data\", name:\"Metrica Province\" },\n                { fileName :\"922320.data\", name:\"Metrica Province Instance\" },\n                { fileName :\"198076.data\", name:\"The Grove\" },\n\t\t\t\t{ fileName :\"198272.data\", name:\"Rata Sum\" },\n\t\t\t\t{ fileName :\"291064.data\", name:\"Mount Maelstrom\" },\n\t\t\t\t{ fileName :\"292254.data\", name:\"Sparkfly Fen\" },\n\t\t\t\t{ fileName :\"293307.data\", name:\"Brisban Wildlands\" },\n            ]\n        },\n        {\n            name:\"05. Ruins of Orr\",\n            maps: [\n                { fileName :\"284829.data\", name:\"Straits of Devastation\" },\n                { fileName :\"285089.data\", name:\"Malchor's Leap\" },\n                { fileName :\"285634.data\", name:\"Cursed Shore\" },\n                { fileName :\"295179.data\", name:\"Cathedral of Hidden Depths\" },\n                { fileName :\"295962.data\", name:\"A Light in the Darkness\" },\n            ]\n        },\n        {\n            name:\"06. Living World S1\",\n            maps: [\n                { fileName :\"520479.data\", name:\"Southsun Cove\" },\n\t\t\t\t{ fileName :\"679089.data\", name:\"Tower of Nightmares\" },\n            ]\n        },\n        {\n            name:\"07. Living World S2\",\n            maps: [\n                { fileName :\"836211.data\", name:\"Dry top (0)\" },\n                { fileName :\"861770.data\", name:\"Dry top (1)\" },\n                { fileName :\"909361.data\", name:\"The Silverwastes (0)\" },\n                { fileName :\"996202.data\", name:\"The Silverwastes (1)\" },\n                { fileName :\"908730.data\", name:\"Glint's Lair\" },\n            ]\n        },\n        {\n            name:\"08. Heart of Maguuma\",\n            maps: [\n                { fileName :\"969663.data\", name:\"Verdant Brink\" },\n                { fileName :\"1262460.data\", name:\"Hearts and Minds\" },\n                { fileName :\"969964.data\", name:\"Unknown Airship in tree\" },\n                { fileName :\"1262310.data\", name:\"Dragon Stand\" },\n                { fileName :\"1263739.data\", name:\"Tarir\" },\n\t\t\t\t{ fileName :\"1264291.data\", name:\"Tangled Depths\" },\n            ]\n        },\n        {\n            name:\"09. Living World S3\",\n            maps: [\n                { fileName :\"1472635.data\", name:\"(E1) Bloodstone Fen\" },\n                { fileName :\"1498071.data\", name:\"(E2) Taimi Simulator\" },\n                { fileName :\"1498578.data\", name:\"(E2) Ring of Fire\" },\n                { fileName :\"1605211.data\", name:\"(E3) Bitterfrost Frontier\" },\n                { fileName :\"1645474.data\", name:\"(E4) Caudecus Manor\" },\n                { fileName :\"1646520.data\", name:\"(E4) Lake Doric\" },\n                { fileName :\"1682493.data\", name:\"(E5) Draconis Mons\" },\n                { fileName :\"1682763.data\", name:\"(E5) Titan's Throat\" },\n                { fileName: \"1734839.data\", name:\"(E6) White Mantle Fortress\"},\n\t\t\t\t{ fileName: \"1735346.data\", name:\"(E6) Siren's Landing\"},\n\t\t\t\t{ fileName: \"1735440.data\", name:\"(E6) Shining Blade Headquarters\"},\n            ]\n        },\n        {\n            name:\"10. Crystal Desert\",\n            maps: [\n                { fileName: \"1794574.data\", name:\"Crystal Oasis\"},\n                { fileName: \"1833034.data\", name:\"Desert Highlands\"},\n                { fileName: \"1833726.data\", name:\"PoF story instances\"},\n                { fileName: \"1839188.data\", name:\"Domain of Vabbi\"},\n\t\t\t\t{ fileName: \"1840103.data\", name:\"Elon Riverlands\"},\n\t\t\t\t{ fileName: \"1840368.data\", name:\"Kormir Sanctuary\"},\n\t\t\t\t{ fileName: \"1842533.data\", name:\"The Desolation\"},\n            ]\n        },\n        {\n            name:\"11. Living World S4\",\n            maps: [\n                { fileName: \"1901428.data\", name:\"(E1) Fahranur\"},\n\t\t\t\t{ fileName: \"1902235.data\", name:\"(E1) Istan\"},\n                { fileName: \"1903523.data\", name:\"(E1) Crystal Oasis\"},\n                { fileName: \"1954984.data\", name:\"(E2) Desert Highlands\"},\n\t\t\t\t{ fileName: \"1955224.data\", name:\"(E2) Inquest Lab Tower\"},\n\t\t\t\t{ fileName: \"1955471.data\", name:\"(E2) Rata Primus\"},\n\t\t\t\t{ fileName: \"1955642.data\", name:\"(E2) Divinity's Reach\"},\n\t\t\t\t{ fileName: \"1955915.data\", name:\"(E2) Mount Maelstrom\"},\n\t\t\t\t{ fileName: \"1956140.data\", name:\"(E2) Frostgorge Sound\"},\n\t\t\t\t{ fileName: \"1956245.data\", name:\"(E2) Void\"},\n\t\t\t\t{ fileName: \"1956299.data\", name:\"(E2) Hided Inquest Lab\"},\n\t\t\t\t{ fileName: \"1957526.data\", name:\"(E2) Sandswept Isles\"}\n            ]\n        },\n        {\n            name:\"12. Seasonal Activities\",\n            maps: [\n                { fileName :\"506592.data\", name:\"Ascent to Madness\" },\n\t\t\t\t{ fileName :\"506670.data\", name:\"Mad King's Labyrinth (Past)\" },\n\t\t\t\t{ fileName :\"662436.data\", name:\"Mad King's Labyrinth (Present)\" },\n                { fileName :\"506739.data\", name:\"Mad King's Clock Tower\" },\n                { fileName :\"622681.data\", name:\"The Crown Pavilion\" },\n                { fileName :\"569756.data\", name:\"SAB Hub (0)\" },\n                { fileName :\"636133.data\", name:\"SAB Hub (1)\" },\n\t\t\t\t{ fileName :\"635555.data\", name:\"SAB World 1\" },\n                { fileName :\"635960.data\", name:\"SAB World 2\" },\n                { fileName :\"606255.data\", name:\"Zephyr Sanctum\" },\n                { fileName :\"529896.data\", name:\"Tixx's Infinirarium\" },\n\t\t\t\t{ fileName :\"529945.data\", name:\"Winter Wonderland\" },\n            ]\n        },\n        {\n            name:\"13. Activites\",\n            maps: [\n                { fileName :\"605983.data\", name:\"Sanctum Sprint\" },\n\t\t\t\t{ fileName :\"606030.data\", name:\"Basket Brawl\" },\n            ]\n        },\n        {\n            name:\"14. Dungeons\",\n            maps: [\n                { fileName :\"126840.data\", name:\"Ascalonian Catacombs (0)\" },\n                { fileName :\"189364.data\", name:\"Ascalonian Catacombs (1)\" },\n\t\t\t\t{ fileName :\"275474.data\", name:\"Sorrow's Embrace\" },\n\t\t\t\t{ fileName :\"276520.data\", name:\"Honor of the Waves\" },\n\t\t\t\t{ fileName :\"284039.data\", name:\"Citadel of Flame\" },\n\t\t\t\t{ fileName :\"287214.data\", name:\"Caudecus's Manor\" },\n\t\t\t\t{ fileName :\"291284.data\", name:\"Twilight Arbor (0)\" },\n\t\t\t\t{ fileName :\"645968.data\", name:\"Twilight Arbor (1)\" },\n\t\t\t\t{ fileName :\"293606.data\", name:\"Crucible of Eternity\" },\n\t\t\t\t{ fileName :\"473930.data\", name:\"The Ruined City of Arah\" },\n\t\t\t\t{ fileName :\"473765.data\", name:\"Arah - Story\" },\n\t\t\t\t{ fileName :\"580061.data\", name:\"Molten Facility\" },\n\t\t\t\t{ fileName :\"595722.data\", name:\"Aetherblade Retreat\" },\n            ]\n        },\n        {\n            name:\"15. Fractals\",\n            maps: [\n                { fileName :\"519839.data\", name:\"Fractals of the Mists\" },\n                { fileName :\"697450.data\", name:\"Thaumanova Reactor\" },\n                { fileName :\"1426653.data\", name:\"Cliffside Fractal\" },\n                { fileName :\"1472361.data\", name:\"Chaos Isle Fractal\" },\n                { fileName :\"1472382.data\", name:\"Snowblind Fractal\" },\n                { fileName :\"1472406.data\", name:\"Swampland Fractal\" },\n                { fileName :\"1498016.data\", name:\"Mistlock Observatory\" },\n                { fileName :\"1498798.data\", name:\"Aetherblade/Mai Trin Fractal\" },\n                { fileName :\"1605344.data\", name:\"Nightmare Fractal\" },\n                { fileName: \"1733857.data\", name:\"Shattered Observatory Fractal\"},\n                { fileName: \"1733961.data\", name:\"Mistlock Sanctuary\"},\n                { fileName: \"1905739.data\", name:\"Molten Boss Fractal\"},\n\t\t\t\t{ fileName: \"1905889.data\", name:\"Twilight Oasis Fractal\"},\n            ]\n        },\n        {\n            name:\"16. Raid\",\n            maps: [\n                { fileName :\"1151420.data\", name:\"(W1) Spirit Vale\" },\n                { fileName :\"1383309.data\", name:\"(W2) Salvation Pass\" },\n                { fileName :\"1427048.data\", name:\"Special Forces Training Area\" },\n                { fileName :\"1454070.data\", name:\"(W3) Stronghold of the Faithful\" },\n                { fileName :\"1645215.data\", name:\"(W4) Bastion of the Penitent\" },\n                { fileName: \"1906329.data\", name:\"(W5) Hall of Chains\"},\n            ]\n        },\n        {\n            name:\"17. Structured PvP\",\n            maps: [\n                { fileName :\"871093.data\", name:\"Original Stronghold\" },\n                { fileName :\"870987.data\", name:\"Battle of Champion's Dusk (0)\" },\n                { fileName :\"1666233.data\", name:\"Battle of Champion's Dusk (1)\" },\n                { fileName :\"132570.data\", name:\"Heart of the Mists (0)\" },\n                { fileName :\"197249.data\", name:\"Heart of the Mists (1)\" },\n                { fileName: \"1734729.data\", name:\"Heart of the Mists (2)\"},\n                { fileName: \"1712986.data\", name:\"Hall of the Mists\"},\n                { fileName :\"132710.data\", name:\"The Battle of Khylo (0)\" },\n                { fileName :\"197402.data\", name:\"The Battle of Khylo (1)\" },\n                { fileName :\"132837.data\", name:\"Forest of Niflhel (0)\" },\n                { fileName :\"197545.data\", name:\"Forest of Niflhel (1)\" },\n                { fileName :\"376916.data\", name:\"Legacy of the Foefire\" },\n                { fileName :\"467374.data\", name:\"Raid on the Capricorn\" },\n                { fileName :\"520609.data\", name:\"Temple of the Silent Storm\" },\n                { fileName :\"579383.data\", name:\"Skyhammer (0)\" },\n                { fileName :\"677968.data\", name:\"Skyhammer (1)\" },\n                { fileName: \"1934470.data\", name:\"Skyhammer (2)\"},\n                { fileName :\"791564.data\", name:\"Courtyard (0)\" },\n                { fileName: \"1713054.data\", name:\"Courtyard (1)\"},\n                { fileName :\"556199.data\", name:\"Spirit Watch (0)\" },\n                { fileName :\"1473061.data\", name:\"Spirit Watch (1)\" },\n                { fileName :\"506539.data\", name:\"Reaper's Rumble\" },\n                { fileName :\"529718.data\", name:\"Snowball Mayhem\" },\n                { fileName :\"595582.data\", name:\"Dragon Ball Arena\" },\n                { fileName :\"617120.data\", name:\"Aspect Arena\" },\n                { fileName :\"1644624.data\", name:\"Revenge of the Capricorn\" },\n                { fileName: \"1704155.data\", name:\"Eternal Coliseum\"},\n            ]\n        },\n        {\n            name:\"18. World vs World\",\n            maps: [\n                { fileName :\"131235.data\", name:\"Eternal Battlegrounds (0)\" },\n                { fileName :\"195806.data\", name:\"Eternal Battlegrounds (1)\" },\n                { fileName: \"1885693.data\", name:\"Eternal Battlegrounds (2)\"},\n                { fileName: \"1918037.data\", name:\"Eternal Battlegrounds (3)\"},\n                { fileName :\"131574.data\", name:\"Alpine Borderlands (0)\" },\n                { fileName :\"641501.data\", name:\"Alpine Borderlands (1)\" },\n                { fileName: \"1799855.data\", name:\"Alpine Borderlands (2)\"},\n                { fileName :\"1647236.data\", name:\"Desert Borderlands (0)\" },\n                { fileName: \"1799442.data\", name:\"Desert Borderlands (1)\"},\n                { fileName :\"736241.data\", name:\"Edge of the Mists\" },\n            ]\n        },\n        {\n            name:\"19. Guild Halls\",\n            maps: [\n                { fileName :\"1255378.data\", name:\"Gilded Hollow\" }, \n                { fileName :\"1256064.data\", name:\"Lost Precipice\" },\n                { fileName: \"1843274.data\", name:\"Windswept Haven\"},\n            ]\n        },\n        {\n            name:\"20. Concept and not released\",\n            maps: [\n                { fileName :\"122695.data\", name:\"Empty Plane\" },\n                { fileName :\"184799.data\", name:\"Empty Plane v1\" },\n                { fileName :\"197562.data\", name:\"Empty Plane v2\" },\n                { fileName :\"875614.data\", name:\"Unknown Mists Platforms\" },\n                { fileName :\"132853.data\", name:\"Empty Box\" },\n                { fileName :\"1255516.data\", name:\"Guild Coliseum\" },\n                { fileName :\"1498193.data\", name:\"Concept sPVP Map 1\" },\n                { fileName :\"1513556.data\", name:\"Concept sPVP Map 2\" }, \n\t\t\t\t{ fileName :\"1513607.data\", name:\"Concept sPVP Map 3\" },\n\t\t\t\t{ fileName :\"1513620.data\", name:\"Concept sPVP Map 4\" },\n                { fileName :\"1513675.data\", name:\"Concept sPVP Map 5\" },\n                { fileName: \"1712945.data\", name:\"Concept sPVP Map 6\"},\n            ]\n        },\n\n    ]\n}","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Provides the static Tyria 3D Library Class.\n * @module T3D\n */\n\n/* INCLUDES */\nLocalReader = require('./LocalReader/LocalReader.js');\n\n/**\n * Tyria 3D Library main class.\n * \n * Use this static class to access file parsers- and data renderer classes.\n * \n * This class also works as a factory for creating\n * LocalReader instances that looks up and inflates files from the Guild Wars 2 .dat.\n *\n * @main T3D\n * @class T3D\n * @static \n */\nmodule.exports = T3D;\nfunction T3D() {}\n\n/* PRIVATE VARS */\nvar _version = \"1.1.0\";\nvar _settings = {\n\tt3dtoolsWorker: \"modules/t3dtools/t3dworker.js\",\n\tconcurrentTasks: (typeof navigator != 'undefined') ? navigator.hardwareConcurrency : 1,\n};\n\n/* PUBLIC PROPERTIES */\n\n/**\n * The current library version. Used to make sure local storage caches are not\n * shared between different releases.\n *\n * @final\n * @property version\n * @type String\n */\nT3D.version = _version;\n\n\n/* FILES */\n\n/**\n * A static reference to the GW2File class, the preferred way of\n * accessing this class.\n *\n * @final\n * @property GW2File\n * @type Class\n */\nT3D.GW2File =\t\t\t\trequire(\"./format/file/GW2File\");\n\n/**\n * A static reference to the GW2Chunk class, the preferred way of\n * accessing this class.\n *\n * @final\n * @property GW2Chunk\n * @type Class\n */\nT3D.GW2Chunk = \t\t\t\trequire(\"./format/file/GW2Chunk\");\n\n/**\n * TODO - doc\n */\nT3D.Archive =\t\t\t\trequire(\"./LocalReader/Archive\");\n\n\n/* RENDERERS */\n\n/**\n * A static reference to the DataRenderer class, the preferred way of\n * accessing this class.\n * \n * @final\n * @property DataRenderer\n * @type Class\n */\nT3D.DataRenderer = \t\t\trequire(\"./dataRenderer/DataRenderer\");\n\n/**\n * A static reference to the EnvironmentRenderer class, the preferred way of\n * accessing this class.\n *\n * @final\n * @property EnvironmentRenderer\n * @type Class\n */\nT3D.EnvironmentRenderer = \trequire(\"./dataRenderer/EnvironmentRenderer\");\n\n/**\n * A static reference to the HavokRenderer class, the preferred way of\n * accessing this class.\n * \n * @final\n * @property HavokRenderer\n * @type Class\n */\nT3D.HavokRenderer = \t\trequire(\"./dataRenderer/HavokRenderer\");\n\n/**\n * A static reference to the PropertiesRenderer class, the preferred way of\n * accessing this class.\n *\n * @final\n * @property PropertiesRenderer\n * @type Class\n */\nT3D.PropertiesRenderer = \trequire(\"./dataRenderer/PropertiesRenderer\");\n\n/**\n * A static reference to the SingleModelRenderer class, the preferred way of\n * accessing this class.\n *\n * @final\n * @property SingleModelRenderer\n * @type Class\n */\nT3D.SingleModelRenderer = \t\trequire(\"./dataRenderer/SingleModelRenderer\");\n\n/**\n * A static reference to the TerrainRenderer class, the preferred way of\n * accessing this class.\n *\n * @final\n * @property TerrainRenderer\n * @type Class\n */\nT3D.TerrainRenderer = \t\trequire(\"./dataRenderer/TerrainRenderer\");\n\n/**\n * A static reference to the ZoneRenderer class, the preferred way of\n * accessing this class.\n *\n * @final\n * @property ZoneRenderer\n * @type Class\n */\nT3D.ZoneRenderer = \t\t\trequire(\"./dataRenderer/ZoneRenderer\");\n\n/**\n * A static reference to the StringRenderer class, the preferred way of\n * accessing this class.\n *\n * @final\n * @property StringRenderer\n * @type Class\n */\nT3D.StringRenderer = \t\trequire(\"./dataRenderer/StringRenderer\");\n\n\n\n\n/* LOGGING */\n\n/**\n * A static reference to the static Logger object, the preferred way of\n * accessing this object. A simple way of providing your own logging methods\n * is to simply overwrite any or all of the logging methods specified in \n * {{#crossLink \"Logger/logFunctions:property\"}}{{/crossLink}}\n *\n * @property Logger\n * @type Object\n */\nT3D.Logger = require(\"./Logger\");\n\n\n/* SETTINGS */\n\n/**\n * Contains a list of known map fileID:s and their names. Used in order to quickly\n * look up what maps are in a .dat file. Note that this property is hard coded and\n * has high probablity of being outdated. Also note that the names are just guesses\n * by RequestTimeout.\n *\n * The format of this list objects is\n *\n * \n * \t{ \n *  \tmaps : [\n *\t  \t\t{\n *     \t\t\tname:\"World Area Name\",\n *\t       \t\tmaps:[\n *\t         \t\t{ fileName :\"[numeric fileId].data\", name:\"Map Name One\" },\n *\t           \t\t{ fileName :\"[numeric fileId].data\", name:\"Map Name Two\" },\t\t\n *\t             \t{ fileName :\"[numeric fileId].data\", name:\"Map Name Three\" }\n *\t              ]\n *           },\n *\t         {\n *\t\t\t    name:\"Another World Area Name\",\n *\t\t \t   \tmaps:[\n *\t\t \t\t   \t{ fileName :\"[numeric fileId].data\", name:\"Map Name 408\" }\n *\t\t\t    ]\n *\t\t     }\n * \t\t]\n *   }\n *\n * @final\n * @property MapFileList\n * @type Object\n */\nT3D.MapFileList = \trequire(\"./MapFileList\");\n\n/* UTILS */\n\n/**\n * A static reference to the MaterialUtils class.\n *\n * @final\n * @property MaterialUtils\n * @type Object\n */\nT3D.MaterialUtils = require('./util/MaterialUtils.js');\n\n/**\n * A static reference to the MathUtils class.\n *\n * @final\n * @property MathUtils\n * @type Object\n */\nT3D.MathUtils = require('./util/MathUtils.js');\n\n/**\n * A static reference to the ParserUtils class.\n *\n * @final\n * @property ParserUtils\n * @type Object\n */\nT3D.ParserUtils = require('./util/ParserUtils.js');\n\n\n/**\n * A static reference to the RenderUtils class.\n *\n * @final\n * @property RenderUtils\n * @type Object\n */\nT3D.RenderUtils = require('./util/RenderUtils.js');\n\n/**\n * A static reference to the PersistantStore class.\n * \n * @final\n * @property PersistantStore\n * @type Class\n */\nT3D.PersistantStore = require('./LocalReader/PersistantStore');\n\n/**\n * TODO - doc\n */\nT3D.Archive = require('./LocalReader/Archive');\nT3D.FileTypes = require('./LocalReader/FileTypes');\n\n/* PRIVATE METHODS */\n\n/**\n * Performs checks for required browser capabilities and required third party libraries.\n * Loggs any warnings or error messages.\n * \n * @private\n * @method  checkRequirements\n * @return {Number} The ammount of errors and warnings generated.\n */\nfunction checkRequirements(){\n\tvar numErrors = 0;\n\n\tif(!global.window || !window.indexedDB){\n\t\tT3D.Logger.log(\n\t\t\tT3D.Logger.TYPE_ERROR,\n\t\t\t\"T3D persistant storing and loading requires indexedDB support.\"\n\t\t);\n\t\tnumErrors++;\n\t}\n\n\tif(typeof DataStream === \"undefined\"){\n\t\tT3D.Logger.log(\n\t\t\tT3D.Logger.TYPE_ERROR,\n\t\t\t\"T3D core functionality requires DataStream library.\"\n\t\t);\n\t\tnumErrors++;\n\t}\n\n\tif(typeof THREE === \"undefined\"){\n\t\tT3D.Logger.log(\n\t\t\tT3D.Logger.TYPE_WARNING,\n\t\t\t\"T3D mesh generation requires three.js library.\"\n\t\t);\n\t\tnumErrors++;\n\t}\n\n\tif(numErrors<1){\n\t\tT3D.Logger.log(\n\t\t\tT3D.Logger.TYPE_MESSAGE,\n\t\t\t\"Tyria 3D API v\"+T3D.version+\" initialized.\"\n\t\t);\n\t}\n\n\treturn numErrors;\n}\n\n/**\n * Performs a quick and dirty check to find what chunk name definitions \n * appear multiple times in th formats array. Note that anything that\n * appears more than 2 times wil get a too hight value due to the \n * algorithm being... incorrect.\n *\n * @private\n * @method findDuplicateChunkDefs\n * @return {Object} An object mapping duplicate chunk definition names.\n * to the number of apperances.\n */\nfunction findDuplicateChunkDefs(){\n\tvar dups = {};\n\tT3D.formats.forEach(\n\t\tfunction(f1){\n\n\t\t\tT3D.formats.forEach(\n\t\t\t\tfunction(f2){\n\t\t\t\t\tif(f2.name == f1.name && f2 !== f1){\n\t\t\t\t\t\tif(dups[f1.name]){\n\t\t\t\t\t\t\tdups[f1.name]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tdups[f1.name]=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t);\n\treturn dups\n}\n\n\n/* PUBLIC METHODS */\n\n\n/**\n * Creates a new instance of LocalReader with a webworker inflater connected to it.\n * \n * @method getLocalReader\n * @async\n * @param  {File}   \tfile\t\tCore JS File instance, must refer to a GW2 .dat file\n * @param  {Function}\tcallback\tCallback function, fired when the file index is fully\n *                             \t\tconstructed. Takes no arguments.\n *                             \t\t\n * @param  {String} \tt3dtoolsWorker URL to the inflater file. If omitted\n *                               \t_settings.t3dtoolsWorker will be used instead.\n * @param  {Class}\t\tlogger\t\t\n * \n * @return {LocalReader}\t\t\tThe contructed LocalReader, note that this object\n *                             \t\twill not be fully initialized until the callback\n *                             \t\tis fired.\n */\nT3D.getLocalReader = function(file, callback, t3dtoolsWorker, logger){\n\n\t/// Create Inflater for this file reader.\n\tvar worker = new Worker(t3dtoolsWorker ? t3dtoolsWorker : _settings.t3dtoolsWorker);\n\n\tvar lrInstance = new LocalReader(file, logger);\n\tlrInstance.connectInflater(worker);\n\n\t/// Parse the DAT file MFT header. This must be done oncein order to access\n\t/// any files in the DAT.\n\tlrInstance.parseHeaderAsync(callback);\n\n\t/// Return file reader object\n\treturn lrInstance;\t\n}\n\n/**\n * Utility method for acceccing a list containing information about all files\n * in the .dat connected to the provided LocalReader instance. This method first\n * tries to read a local indexing list from the client's localstorage and\n * fallbacks to generating the list by scanning the MFT indices of the .dat\n * and peeking each file in order to find out what filetype it has.\n *\n * Note that peeking the files is the time consuming task, so if you don't want\n * yout application to spend time indexing the .dat and have a priori knowledge\n * about the required file Id's you should not use this method.\n * \n * @method  getFileListAsync\n * @async\n * @param  {LocalReader}\tlocalReader A fully initialized LocalReader instance\n * @param  {Function}\t\tcallback    Fires when the index has been loaded\n *                                 \t\tfrom the localstorage or after it has\n *                                 \t\tbeen built and stored in localstorage.\n *                                 \t\tTakes the generated object list of\n *                                 \t\tfiles as an argument. This list groups\n *                                 \t\tarrays of MFT indices per file type,\n *                                 \t\tfor exmample:\n *\n * \n * \t{\n *\t  \t\"Unknown\"\t: [444, 555, 333],\n *\t  \t\"MODL\"\t\t: [444, 555, 333],\n * \t  \t\"String\"\t: [666, 777, 888]\n * \t}\n * \n * For more details see\n * {{#crossLink \"LocalReader/listFiles:method\"}}{{/crossLink}}\n */\nT3D.getFileListAsync = function(localReader, callback){\n\n\t/// Check local storage for an existing file list\n\tvar fileList = localReader.loadFileList();\n\n\t/// If there is no cached list, look for pre-defined maps.\n\tif(!fileList){\n\t\tlocalReader.readFileListAsync(callback);\n\t}\n\n\t/// Otherwise, just fire the callback with the cached list\n\telse{\n\t\tcallback(fileList);\n\t}\n\t\n}\n\n/**\n * Utility method for acceccing a list containing information about all map files\n * in the .dat connected to the provided LocalReader instance. This method first\n * tries to read a local indexing list from the client's localstorage and\n * fallbacks to generating the list by scanning the MFT indices of the .dat\n * and peeking each file in order to find out what filetype it has.\n *\n * If the searchAll flag is not set to true, this process will only scan files\n * from the {{#crossLink \"T3D/MapFileList:property\"}}{{/crossLink}}\n * \n * @method getMapListAsync\n * @async\n * @param {LocalReader}\tlocalReader\tA fully initialized LocalReader instance\n * @param {Function}\tcallback\tFires when the index has been loaded\n *                                 \tfrom the localstorage or after it has\n *                                 \tbeen built and stored in localstorage.\n *                                 \tTakes the generated object list of\n *                                 \tfiles as an argument. This list groups\n *                                 \tarrays of MFT indices per file type,\n *                                 \tfor exmample:\n * \n * \t\t{\t\n * \t\t\tmaps:[\n * \t\t\t\t{\n * \t\t\t\t\tname: 'Heart of Maguuma',\n * \t\t\t\t\tmaps: [\n * \t\t\t\t\t\t{fileName:1151420, name:'HoT BWE3 Raid'},\n * \t\t\t\t\t\t{fileName:969663, name:'Verdant Brink}\n * \t\t\t\t\t]\n * \t\t\t\t},\n * \t\t\t\t{\n * \t\t\t\t\tname: 'Unknown maps',\n * \t\t\t\t\tmaps: [\n * \t\t\t\t\t\t{fileName:12345678, name:'Unknown map 12345678'}\n * \t\t\t\t\t]\n * \t\t\t\t}\n * \t\t\t]\n \n *\t    };\n * @param {boolean} searchAll if true forces re-indexing of entire dat.\n */\nT3D.getMapListAsync = function(localReader, callback, searchAll){\n\n\t/// If seachAll flag is true, force a deep search\n\tif(searchAll){\n\t\tlocalReader.readMapListAsync(true, callback);\n\t\treturn;\n\t}\n\n\t/// Check local storage for an existing map list\n\tvar mapList = localReader.loadMapList();\n\n\t/// If there is no cached list, look for pre-defined maps.\n\tif(!mapList){\n\t\tlocalReader.readMapListAsync(false, callback);\n\t}\n\n\t/// Otherwise, just fire the callback with the cached list\n\telse{\n\t\tcallback(mapList);\n\t}\n\t\n}\n\n/**\n * Utility method used for rendering map files. Loads a map file and applies\n * the provided renderers to it.\n * \n * @method renderMapContentsAsync\n * @async\n * @param  {LocalReader}\tlocalReader A fully initialized LocalReader instance\n * @param  {Number}   \t\tfileName\tThe File Id of a mapc file.\n * @param  {Array}   \t\trenderers\tAn array of renderer classes. Each\n *                               \t\tclass should extend \n *                               \t\t{{#crossLink \"DataRenderer\"}}{{/crossLink}}\n * @param  {Function}\t\tcallback    Callback function, takes the shared\n *                                 \t\trenderer context as an argument.\n * @param  {Class}\t\t\tlogger      A logger class of the same type as\n *                               \t\t{{#crossLink \"Logger\"}}{{/crossLink}}\n */\nT3D.renderMapContentsAsync = function(localReader, fileName, renderers, callback, logger){\n\n\t/// VO for storing result from renderers\n    var context = {};\n\n\t/// Make sure we got an actuall ID number\t\t\n\tif(parseInt(fileName)){\n\n\t\t/// File name is baseId, load using local reader.\n\t\tlocalReader.loadFile(\n\t\t\tfileName,\n\t\t\tfunction(arrayBuffer){\n\n\t\t\t\t/// Set up datastream\n\t\t\t\tvar ds = new DataStream(arrayBuffer, 0, DataStream.LITTLE_ENDIAN);\n\n\t\t\t\t/// Initiate Map file object. Connect callback\n\t\t\t\tvar mapFile = new T3D.GW2File(ds, 0);\n\n\t\t\t\t/// Populate VO by running the renderers\n\t\t\t    var runAllRenderers = function(i){\n\t\t\t\t\t\n\t\t\t\t\t/// Run each renderer\n\t\t\t\t\tif(i < renderers.length ){\n\t\t\t\t\t\tT3D.runRenderer(\n\t\t\t\t\t\t\trenderers[i].renderClass,\n\t\t\t\t\t\t\tlocalReader,\n\t\t\t\t\t\t\tObject.assign(renderers[i].settings,{mapFile:mapFile}),\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\trunAllRenderers.bind(this,i+1)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t/// Fire callback with VO when done\n\t\t\t\t\telse{\n\t\t\t\t\t\tcallback(context);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t/// Starting point for running each renderer\n\t\t\t\trunAllRenderers(0);\n\t\t\t}\n\t\t);\n\t}\n\n\t/// Primitive error message...\n\telse{\n\t\tvar outputLogger = logger ? logger : T3D.Logger;\n\t\toutputLogger.log(\n\t\t\tT3D.Logger.TYPE_ERROR,\n\t\t\t\"Map id must be an integer!, was:\",fileName\n\t\t);\n\t}\t\n}\n\n/**\n * Utility method for applying a single renderer to a LocalReader insatnce.\n * \n * @method runRenderer\n * @async\n * \n * @param  {Class}\t\trenderClass\tA class extending \n *                                \t{{#crossLink \"DataRenderer\"}}{{/crossLink}}\n * @param  {LocalReader}localReader A fully initialized LocalReader instance\n * @param  {Object}\t\tsettings    Settings passed to the renderer. Often\n *                               \tspecifies thinks like what file ID should\n *                               \tbe loaded.\n * @param  {Object}\t\tcontext     The shared renderer context value object.\n * @param  {Function} \tcb          Callback method passed to the renderAsync\n *                                 \tmethod of the renderer.\n */\nT3D.runRenderer = function(renderClass, localReader , settings, context, cb){\n\tvar r = new renderClass(\n\t\tlocalReader,\n\t\tsettings,\n\t\tcontext\n\t);\n\n\tr.renderAsync(cb);\n}\n\n\n/**\n * @method getContextValue\n * @param  {Object} context      \tA shared renderer context value object.\n * @param  {Class} \tclazz        \tA class extending\n *                                \t{{#crossLink \"DataRenderer\"}}{{/crossLink}}.\n *                                \tSpecifies for renderer class you want to read \n *                                \toutput.\n * @param  {String} propName     \tThe name of the property written by the\n *                                \trenderer that should retrtieved.\n * @param  {any} \tdefaultValue \tThis value is passed back if no data could\n *                              \tbe found.\n * @return {any}    \t\t\t\tThe specified value from the conext if any,\n *                          \t\totherwise defaultValue.\n */\nT3D.getContextValue = function(context, clazz , propName, defaultValue){\n\tvar output = context[clazz.name];\n\tif(output){\n\t\treturn output[propName] ? output[propName] : defaultValue;\n\t}\n\treturn defaultValue;\n}\n\n/**\n * Check if the client web browser can render WebGL 3D content.\n * \n * @private\n * @method hasWebGL\n * @param  {boolean} return_context flag making this method return the canvas object instead of true\n * @return {boolean} true if the client is WebGL enabled, false otherwise\n */\nT3D.hasWebGL = function(return_context)\n{\n    if (!!window.WebGLRenderingContext) {\n        var canvas = document.createElement(\"canvas\"),\n             names = [\"webgl\", \"experimental-webgl\", \"moz-webgl\", \"webkit-3d\"],\n           context = false;\n \n        for(var i=0;i<4;i++) {\n            try {\n                context = canvas.getContext(names[i]);\n                if (context && typeof context.getParameter == \"function\") {\n                    // WebGL is enabled\n                    if (return_context) {\n                        // return WebGL object if the function's argument is present\n                        return {name:names[i], gl:context};\n                    }\n                    // else, return just true\n                    return true;\n                }\n            } catch(e) {}\n        }\n \n        // WebGL is supported, but disabled\n        return false;\n    }\n \n    // WebGL not supported\n    return false;\n}\n\n\n/// Library checks requirements on startup\ncheckRequirements();","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar GW2File = require('../format/file/GW2File');\n\n/**\n * Base class for data interpretors a.k.a. 'Renderers'\n *\n * Renderers are classes that collect and interpret data from the dat file.\n * \n * A {{#crossLink \"LocalReader\"}}{{/crossLink}} instance is used for accessing data from the dat.\n * \n * A {{#crossLink \"Logger\"}}{{/crossLink}} is used for posting progress output or error messages.\n *\n * Most Renderers use one or more\n * {{#crossLink \"GW2Chunk\"}}GW2Chunks{{/crossLink}}, typed data structures that can be read from\n * {{#crossLink \"GW2File\"}}GW2Files{{/crossLink}}.\n *\n * The generated data, be it strings, numbers or meshes are put into a value object structure called\n * the 'context'. The context can store data generated by multiple renderers and makes sure each\n * renderer type, or class has it's own value object within the context. This enables one renderer\n * to read data written by another renderer wihtout having to worry about overwriting existing data\n * within the context. Keep in mind that you will have to manually pass and clean the conext object!\n *\n * A clean context object should just be the empty javasript object : {}.\n *\n * When a Renderer is done it will fire the callback and any view interrested in retrieving the generated\n * data from the context can read it using\n * {{#crossLink \"T3D/getContextValue:method\"}}{{/crossLink}}.\n * \n * \n * \n * \n * @class DataRenderer\n * @constructor\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nvar DataRenderer = module.exports = function(localReader, settings, context, logger) {\n\n\t/// Just storing parameters\n\tthis.localReader = localReader;\n\tthis.settings = settings;\n\tif(!settings){\n\t\tsettings = {};\n\t}\n\tthis.context = context;\n\tthis.context[this.constructor.name] = {};\n\n\tif(logger)\n\t\tthis.logger = logger;\n\telse\n\t\tthis.logger = T3D.Logger;\t\n}\n\n/**\n * Gets the output value object for a specified class within the context.\n * @method  getOutput\n * @param  {Class} otherClass The class to fetch the output value object for.\n * If not specified the class of this instance will be used.\n * @return {Object}            The output value object for this class within the context.\n */\nDataRenderer.prototype.getOutput = function(otherClass){\n\treturn this.context[otherClass ? otherClass.name : this.constructor.name];\n}\n\n/**\n * Basic rendering of unknown files. Output fileds generated:\n *\n * - *fileId* The fileId passed in the settings parameter when constructing this instance.\n * \n * - *rawData* An ArrayBuffer containg the infalted binary data of the loaded file.\n * \n * - *rawString* A string representation of the rawData\n * \n * - *image* A value object witht he fields 'width', 'height' and 'data' describing a RGBA bitmap\n * image. Only set if the loaded file was a texture.\n * \n * - *file* A GW2File representation of the loaded file. Only set if the loaded file was a Pack File.\n * \n * @method  renderAsync\n * @async\n * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n */\nDataRenderer.prototype.renderAsync = function(callback){\n\tvar self = this;\n\t\n\tthis.localReader.loadFile(this.settings.id, function(inflatedData){\n\n\t\t/// Set fileId so callers can identify this VO\t\t\n\t\tself.getOutput().fileId = self.settings.id;\n\n\t\t/// Share inflated data\n\t\tself.getOutput().rawData = inflatedData;\n\n\t\t/// Construct raw string\n\t\tvar uarr = new Uint8Array(inflatedData);\n\t\tvar rawStrings = [], chunksize = 0xffff;\n\t\tvar len = Math.min(uarr.length,10000);\n\n\t\t// There is a maximum stack size. We cannot call String.fromCharCode with as many arguments as we want\n\t\tfor (var i = 0; i * chunksize < len; i++){\n\t\t\trawStrings.push(String.fromCharCode.apply(null, uarr.subarray(i * chunksize, (i + 1) * chunksize)));\n\t\t}\n\n\t\tif(len<uarr.length){\n\t\t\trawStrings.push(\"T3D Ignored the last \"+(uarr.length-len)+\" bytes when generating this raw output\");\n\t\t}\n\n\t\tself.getOutput().rawString = rawStrings.join();\n\n\n\n\t\t/// Check if this is an PF or ATEX file\n\t\t// Binareis are MZ\n\t\tvar ds = new DataStream(inflatedData);\n\t\tvar first4 = ds.readCString(4);\n\n\t\t/// Do special stuff for different fcc signatures\n\t\t/// \n\t\t/// fourcc != fcc::ATEX && fourcc != fcc::ATEC && fourcc != fcc::ATEP &&\n        /// fourcc != fcc::ATET && fourcc != fcc::ATEU && fourcc != fcc::ATTX)\n\t\t/// \n\t\tif( first4 == \"ATEX\" || first4 == \"ATEC\" ||\n\t\t\tfirst4 == \"ATEP\" || first4 == \"ATET\" || \n\t\t\tfirst4 == \"ATEU\" || first4 == \"ATTX\" ){\n\n\t\t\t/// TODO: MOVE TO GW2 texture file!!\n\t\t\t/// Load file using LocalReader.\n\t\t\tself.localReader.loadTextureFile(self.settings.id,\n\t\t\t\tfunction(inflatedData, dxtType, imageWidth, imageHeigth){\n\t\t\t\t\t\n\t\t\t\t\t/// Create image using returned data.\n\t\t\t\t\tvar image = {\n\t\t\t\t\t\tdata   : new Uint8Array(inflatedData),\n\t\t\t\t\t\twidth  : imageWidth,\n\t\t\t\t\t\theight : imageHeigth\n\t\t\t\t\t};\n\n\t\t\t\t\tself.getOutput().image = image;\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\t\telse if(first4.indexOf(\"PF\") == 0){\n\t\t\tself.getOutput().file = new GW2File(ds,0);\n\t\t\tcallback();\n\t\t}\n\t\telse{\n\t\t\tself.getOutput().file = null;\n\t\t\tcallback();\n\t\t}\n\n\t});\t\n}","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar RenderUtils = require(\"../util/RenderUtils\");\nvar DataRenderer = require('./DataRenderer');\n\n/**\n *\n * A renderer that generates some of the environment objects of a map.\n * \n * @class EnvironmentRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"mapFile\", a GW2File.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nfunction EnvironmentRenderer(localReader, settings, context, logger){\n\tDataRenderer.call(this, localReader, settings, context, logger);\n\n\tthis.mapFile = this.settings.mapFile;\n\n\tthis.getMat = function(tex){\n\t\treturn new THREE.MeshBasicMaterial({\n\t\t\tmap: tex,\n\t\t\tside: THREE.BackSide,\n\t\t\tfog: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t};\n\n\tthis.loadTextureWithFallback = function(targetMatIndices, materialArray, filename, fallbackFilename, hazeColorAsInt){\n\t\tvar self = this;\n\t\t\n\t\tfunction writeMat(mat){\n\t\t\ttargetMatIndices.forEach(function(i){\n\t\t\t\tmaterialArray[i] = mat; \n\t\t\t});\n\t\t}\n\n\t\tfunction loadFallback(){\n\t\t\tvar mat = self.getMat(\n\t\t\t\tnew THREE.TextureLoader().load(fallbackFilename)\n\t\t\t);\n\n\t\t\twriteMat(mat);\n\t\t}\n\n\t\tfunction errorCallback(){\n\t\t\tsetTimeout(loadFallback, 1);\n\t\t}\n\n\t\tvar mat = self.getMat(\n\t\t\tRenderUtils.loadLocalTexture(\n\t\t\t\tlocalReader,\n\t\t\t\tfilename,\n\t\t\t\tnull, hazeColorAsInt,\n\t\t\t\terrorCallback )\n\t\t);\n\n\t\twriteMat(mat);\t\t\t\n\t}\n\n\tthis.getHazeColor = function(environmentChunkData){\n\t\tvar hazes = environmentChunkData && environmentChunkData.dataGlobal.haze;\n\n\t\tif(!hazes || hazes.length<=0){\n\t\t\treturn [190, 160, 60];\n\t\t}\n\t\telse{\n\t\t\treturn hazes[0].farColor;\n\t\t}\n\t};\n\n\tthis.parseLights = function(environmentChunkData){\n\t\tvar self = this;\n\n\t\t/// Set up output array\n\t\tself.getOutput().lights = [];\n\n\t\tvar lights = environmentChunkData ? environmentChunkData.dataGlobal.lighting : [{\n\t\t\tlights:[],\n\t\t\tbacklightIntensity:1.0,\n\t\t\tbacklightColor:[255,255,255]\n\t\t}];\n\n\t\tvar ambientLight;\n\n\t\t//var light = lights[0];\n\t\t//\n\t\tvar hasLight = false;\n\t\tlights.forEach(function(light, idx){\n\n\t\t\tif(hasLight)\n\t\t\t\treturn;\n\n\t\t\t/// Directional lights\n\t\t\tvar sumDirLightIntensity = 0;\n\n\t\t\t\n\t\t\tlight.lights.forEach(function(dirLightData,idx){\n\n\t\t\t\thasLight = true;\n\t\t\t\t\n\t\t\t\tvar color = new THREE.Color(\n\t\t\t\t\tdirLightData.color[2]/255.0,\n\t\t\t\t\tdirLightData.color[1]/255.0,\n\t\t\t\t\tdirLightData.color[0]/255.0\n\t\t\t\t);\n\n\t\t\t\tvar directionalLight = new THREE.DirectionalLight( color.getHex(), dirLightData.intensity );\n\t\t\t\t\n\t\t\t\tdirectionalLight.position.set(\n\t\t\t\t\t-dirLightData.direction[0],\n\t\t\t\t\tdirLightData.direction[2],\n\t\t\t\t\tdirLightData.direction[1]\n\t\t\t\t).normalize();\n\t\t\t\t\n\t\t\t\tsumDirLightIntensity += dirLightData.intensity;\n\n\t\t\t\tself.getOutput().lights.push(directionalLight);\n\n\t\t\t});// END for each directional light in light\n\n\n\t\t\t/// Add some random directional lighting if there was no, in order to se SOME depth on models\n\t\t\tif(!light.lights || light.lights.length==0){\t\t\n\n\t\t\t\tvar directions = [\n\t\t\t\t\t[0,1,0,.3],\t\t\t\t\t\n\t\t\t\t\t[1,2,1,.3],\n\t\t\t\t\t[-1,-2,-1,.3]\n\t\t\t\t];\n\n\t\t\t\tdirections.forEach(function(lightDir){\n\n\t\t\t\t\tvar color = new THREE.Color(1,1,1);\n\t\t\t\t\tvar intensity = lightDir[3];\n\t\t\t\t\tvar directionalLight = new THREE.DirectionalLight( color.getHex(), intensity );\n\t\t\t\t\t\n\t\t\t\t\tdirectionalLight.position.set(lightDir[0],lightDir[1],lightDir[2]).normalize();\n\t\t\t\t\t\n\t\t\t\t\tsumDirLightIntensity += intensity;\n\n\t\t\t\t\tself.getOutput().lights.push(directionalLight);\n\n\t\t\t\t});\n\t\t\t\t\n\t\t\t}\n\n\n\t\t\t/// Ambient light\n\t\t\t//light.backlightIntensity /= sumDirLightIntensity +light.backlightIntensity; \n\t\t\tlight.backlightIntensity =  light.backlightIntensity; \n\t\t\tvar color = new THREE.Color(\n\t\t\t\tlight.backlightIntensity * (255.0-light.backlightColor[2])/255.0,\n\t\t\t\tlight.backlightIntensity * (255.0-light.backlightColor[1])/255.0,\n\t\t\t\tlight.backlightIntensity * (255.0-light.backlightColor[0])/255.0\n\t\t\t);\n\n\t\t\tambientLight = new THREE.AmbientLight(color);\n\n\t\t})// END for each light in lighting\n\n\t\tvar ambientTotal = 0;\n\t\tif(ambientLight){\n\t\t\tambientTotal = ambientLight.color.r + ambientLight.color.g + ambientLight.color.b;\n\t\t\tthis.getOutput().lights.push(ambientLight);\n\t\t}\n\n\t\t/// Parsing done, set hasLight flag and return\n\t\tthis.getOutput().hasLight = hasLight || ambientTotal>0;\t\t\n\t};\n\n\tthis.parseSkybox = function(environmentChunkData, parameterChunkData, hazeColorAsInt){\n\n\t\t/// set up output array\n\t\tthis.getOutput().skyElements = [];\n\t\t\n\t\t/// Grab sky texture.\n\t\t/// index 0 and 1 day\n\t\t/// index 2 and 3 evening\n\t\tvar skyModeTex = this.environmentChunkData && this.environmentChunkData.dataGlobal.skyModeTex[0];\n\n\t\t/// Fallback skyboxfrom dat.\n\t\tif(!skyModeTex){\n\t\t\tskyModeTex = {\n\t\t\t\ttexPathNE:1930687,\n\t\t\t\ttexPathSW:193069,\n\t\t\t\ttexPathT:193071\n\t\t\t}\n\t\t}\n\n\t\t/// Calculate bounds\n\t\tvar bounds = parameterChunkData.rect;\n\t\tvar mapW = Math.abs( bounds.x1 -bounds.x2 );\n\t\tvar mapD = Math.abs( bounds.y1 -bounds.y2 );\n\t\tvar boundSide = Math.max( mapW, mapD );\n\n\t\tvar materialArray = [];\n\n\t\t/// Load skybox textures, fallback to hosted png files.\n\t\tthis.loadTextureWithFallback([1,4], materialArray, skyModeTex.texPathNE + 1, \"img/193068.png\", hazeColorAsInt);\n\t\tthis.loadTextureWithFallback([0,5], materialArray, skyModeTex.texPathSW + 1, \"img/193070.png\", hazeColorAsInt);\n\t\tthis.loadTextureWithFallback([2], materialArray, skyModeTex.texPathT + 1, \"img/193072.png\", hazeColorAsInt);\n\t\tmaterialArray[3] = new THREE.MeshBasicMaterial({visible:false});\n\n\n\t\t/// Create skybox geometry\n\t\tvar boxSize = 1024;\t\t\n\t\tvar skyGeometry = new THREE.BoxGeometry( boxSize, boxSize/2 , boxSize ); //Width Height Depth\n\n\t\t/// Ugly way of fixing UV maps for the skybox (I think)\n\t\tskyGeometry.faceVertexUvs[0].forEach(function(vecs, idx){\n\n\t\t\tvar face = Math.floor(idx/2);\n\n\t\t\t// PX NX\n\t\t\t// PY NY\n\t\t\t// PZ NZ\n\n\t\t\t/// PX - WEST \tNX - EAST\n\t\t\tif(face == 0 || face == 1){\n\t\t\t\tvecs.forEach(function(vec2){\n\t\t\t\t\tvec2.x = 1 - vec2.x;\t\n\t\t\t\t\tvec2.y /= 2.0;\t\n\t\t\t\t\tvec2.y += .5;\t\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t/// NZ - SOUTH \tPZ - NORTH\n\t\t\telse if(face == 5 || face == 4){\n\t\t\t\tvecs.forEach(function(vec2){\n\t\t\t\t\tvec2.y /= -2.0;\t\n\t\t\t\t\tvec2.y += .5;\t\n\t\t\t\t});\n\t\t\t}\n\n\t\t\telse{\n\t\t\t\tvecs.forEach(function(vec2){\n\t\t\t\t\tvec2.x = 1 - vec2.x;\t\n\t\t\t\t});\n\t\t\t}\n\n\t\t});\n\n\t\tskyGeometry.uvsNeedUpdate = true;\n\t\t\n\t\t/// Generate final skybox\n\t\tvar skyBox = new THREE.Mesh( skyGeometry, materialArray );\n\n\t\t/// Put horizon in camera center\n\t\tskyBox.translateY(boxSize/4);\n\t\t//skyBox.translateY( -environmentChunk.data.dataGlobal.sky.verticalOffset );\n\t\t\n\t\t/// Write to output\n\t\tthis.getOutput().skyElements.push(skyBox);\n\t};\n}\n\n\n/// DataRenderer inheritance:\nEnvironmentRenderer.prototype = Object.create(DataRenderer.prototype);\nEnvironmentRenderer.prototype.constructor = EnvironmentRenderer;\n\n/**\n * Output fileds generated:\n *\n * - *hazeColor* Array of RGBA values describing the global haze color of the map.\n * - *lights* An array of THREE.DirectionalLight and  THREE.AmbientLight objects.\n * - *hasLight* Boolean is false if no directional lights were added to \"lights\".\n * - *skyElements* A textured THREE.Mesh skybox.\n * \n * \n * @method  renderAsync\n * @async\n * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n */\nEnvironmentRenderer.prototype.renderAsync = function(callback){\n\n\tvar environmentChunkData = this.mapFile.getChunk(\"env\").data;\n\tvar parameterChunkData = this.mapFile.getChunk(\"parm\").data;\n\n\t/// Set renderer clear color from environment haze\n\tvar hazeColor = this.getHazeColor(environmentChunkData);\n\tvar hazeColorAsInt =  hazeColor[2]*256*256+hazeColor[1]*256+hazeColor[0];\n\tthis.getOutput().hazeColor = hazeColor;\n\n\t/// Add directional lights to output. Also write hasLight flag\n\tthis.parseLights(environmentChunkData);\n\n\t/// Generate skybox\n\tthis.parseSkybox(environmentChunkData, parameterChunkData, hazeColorAsInt);\n\n\t/// All parsing is synchronous, just fire callback\n\tcallback();\n};\n\t\n\nmodule.exports = EnvironmentRenderer;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar DataRenderer = require('./DataRenderer');\n\n/**\n *\n * A renderer that generates meshes describing the collisions of a map.\n * \n * @class HavokRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"mapFile\", a GW2File. If \"visible\" is specified and true, the generated meshes will be textured\n * with a MeshNormalMaterial, otherwise they will not be visible.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nfunction HavokRenderer(localReader, settings, context, logger){\n\tDataRenderer.call(this, localReader, settings, context, logger);\n\n\tthis.mapFile = this.settings.mapFile;\n\n\tthis.lastP = -1;\n\tthis.seed = 1;\n\tthis.meshes = [];\n\n\t/**\n\t * TODO\n\t * @method renderModels\n\t * @param  {Function} callback         [description]\n\t * @async\n\t */\n\tthis.renderModels = function(models, title, callback){\n\t\tvar mat;\n\t\tif(this.settings && this.settings.visible){\n\t\t\tmat = new THREE.MeshNormalMaterial( { side: THREE.DoubleSide } ); \n\t\t}\n\t\telse{\n\t\t\tmat = new THREE.MeshBasicMaterial( { visible: false } );\t\t\t\n\t\t}\n\n\t\tthis.parseAllModels(models, mat, title, 200, 0, callback);\n\t}\n\n\n\t/**\n\t * TODO\n\t * @method  getCollisionsForAnimation\n\t * @param  {[type]} animation  [description]\n\t * @param  {[type]} collisions [description]\n\t * @return {[type]}            [description]\n\t */\n\tthis.getCollisionsForAnimation = function(animation, collisions){\n\t\tvar ret = [];\n\t\t\n\t\tfor (var i = 0; i < animation.collisionIndices.length; i++) {\n\t\t\tvar index = animation.collisionIndices[i];\n\t\t\tvar collision = collisions[ index ];\n\t\t\tcollision.index = index;\n\t\t\tret.push( collision );\n\t\t}\n\t\t\n\t\treturn ret;\n\t};\n\n\t/**\n\t * TODO\n\t * @method  parseAllModels description\n\t * @param  {[type]} models       [description]\n\t * @param  {[type]} mat       [description]\n\t * @param  {[type]} title     [description]\n\t * @param  {[type]} chunkSize [description]\n\t * @param  {[type]} offset    [description]\n\t * @return {[type]} callback          [description]\n\t * @async\n\t */\n\tthis.parseAllModels = function(models, mat, title, chunkSize, offset, callback){\n\t\tvar i = offset;\t\t\n\n\t\tfor(; i < offset+chunkSize && i < models.length; i++){\n\t\t\t\n\t\t\tvar p = Math.round(i*100/ models.length );\n\t\t\tif( p != this.lastP){\n\n\t\t\t\tthis.logger.log(\n\t\t\t\t\tT3D.Logger.TYPE_PROGRESS,\n\t\t\t\t\t\"Loading Collision Models (\"+title+\")\",\n\t\t\t\t\tp\n\t\t\t\t);\n\t\t\t\tthis.lastP = p;\n\t\t\t}\t\n\t\t\n\t\t\t/// Get animation object\n\t\t\tvar animation =  this.animationFromGeomIndex(\n\t\t\t\tmodels[i].geometryIndex,\n\t\t\t\tthis.geometries,\n\t\t\t\tthis.animations\n\t\t\t);\n\t\t\t\n\t\t\tvar collisions = this.getCollisionsForAnimation( animation, this.havokChunkData.collisions);\n\t\t\t\n\t\t\tfor(var j=0; j< collisions.length; j++){\n\t\t\t\tvar collision = collisions[j];\t\t\t\n\t\t \t\tthis.renderMesh( collision, models[i], mat );\n\t\t\t}\n\t\t}\n\n\t\tif(i<models.length){\n\t\t\twindow.setTimeout(\n\t\t\t\tthis.parseAllModels.bind(this, models, mat, title, chunkSize, offset+chunkSize, callback),\n\t\t\t\t10 /*time in ms to next call*/\n\t\t\t);\n\t\t}\n\t\telse{\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * TODO\n\t * @method  animationFromGeomIndex\n\t * @param  {[type]} propGeomIndex [description]\n\t * @param  {[type]} geometries    [description]\n\t * @param  {[type]} animations    [description]\n\t * @return {[type]}               [description]\n\t */\n\tthis.animationFromGeomIndex = function(propGeomIndex, geometries, animations){\n\t\t\n\t\t// geometries is just list of all geometries.animations[end] for now\n\t\tvar l = geometries[propGeomIndex].animations.length;\n\t\t\n\t\treturn animations[ geometries[propGeomIndex].animations[l-1] ];\n\t\t//return animations[ geometries[propGeomIndex].animations[0] ];\n\t};\n\n\t/**\n\t * TODO\n\t * @method renderMesh\n\t * @param  {[type]} collision [description]\n\t * @param  {[type]} model     [description]\n\t * @param  {[type]} mat       [description]\n\t * @return {[type]}           [description]\n\t */\n\tthis.renderMesh = function( collision, model, mat ){\n\t    \n\t    var pos = model.translate;\n\t    var rot = model.rotate;\n\t    var scale = 32 * model.scale;    \n\t    \n\t    /// Generate mesh\n\t    var mesh = this.parseHavokMesh(collision, mat);\n\t    \n\t    /// Position mesh\n\t    /// \"x\",\"float32\",\"z\",\"float32\",\"y\",\"float32\"\n\t    mesh.position.set(pos[0], -pos[2], -pos[1]);    \n\t    \n\t    /// Scale mesh\n\t    if(scale)\n\t    \tmesh.scale.set( scale, scale, scale );\n\n\t    /// Rotate mesh\n\t    if(rot){\n\t    \tmesh.rotation.order = \"ZXY\";\n\n\t    \t// [\"x\",\"float32\",\"z\",\"float32\",\"y\",\"float32\"], \n\t    \tmesh.rotation.set(rot[0], -rot[2], -rot[1]);\n\t    }\n\t    \t\n\t\t/// Add mesh to scene and collisions\n\t\tthis.getOutput().meshes.push(mesh);\n\t};\n\n\n\t/**\n\t * TODO\n\t * @method  seedRandom\n\t * @return {[type]} [description]\n\t */\n\tthis.seedRandom = function(){\n\t    var x = Math.sin(this.seed++) * 10000;\n\t    return x - Math.floor(x);\n\t};\n\n\t/**\n\t * TODO\n\t * @method  parseHavokMesh\n\t * @param  {[type]} collision [description]\n\t * @param  {[type]} mat       [description]\n\t * @return {[type]}           [description]\n\t */\n\tthis.parseHavokMesh = function(collision, mat){\n\t\t\n\t\tvar index = collision.index;\n\n\t\tif(!this.meshes[index]){\n\n\t\t\tvar geom = new THREE.Geometry();\n\t\t\t\n\t\t\t/// Pass vertices\t    \t\t\n\t\t\tfor(var i=0; i<collision.vertices.length; i++){\n\t\t\t\tvar v=collision.vertices[i];\n\t\t\t\t//\"x\",\"float32\",\"z\",\"float32\",\"y\",\"float32\"]\n\t\t\t\tgeom.vertices.push( new THREE.Vector3(v[0] , v[2] , -v[1] ) );\n\t\t\t}\t    \t\t\n\t\t\t\t\n\t\t\t/// Pass faces\n\t\t\tfor(var i=0; i<collision.indices.length; i+=3){\n\n\t\t\t\tvar f1=collision.indices[i];\n\t\t\t\tvar f2=collision.indices[i+1];\n\t\t\t\tvar f3=collision.indices[i+2];\n\n\t\t\t\tif( f1<=collision.vertices.length &&\n\t\t\t\t\tf2<=collision.vertices.length &&\n\t\t\t\t\tf3<=collision.vertices.length){\n\t\t\t\t\tgeom.faces.push( new THREE.Face3( f1, f2, f3 ) );\n\t\t\t\t}\n\t   \t\t\telse{\n\t   \t\t\t\tthis.logger.log(\n\t   \t\t\t\t\tT3D.Logger.TYPE_ERROR,\n\t   \t\t\t\t\t\"Errorus index in havok model geometry.\"\n   \t\t\t\t\t);\n\t   \t\t\t}\n\t\t\t}\n\n\t\t\t/// Prepare geometry and pass new mesh\n\t\t\tgeom.computeFaceNormals();\n\t\t\t//geom.computeVertexNormals();\n\t\t\t\n\t\t\tthis.meshes[index]= new THREE.Mesh( geom, mat ); \n\t\t\t\n\t\t\treturn this.meshes[index];\n\t\t}\n\t\telse{\n\t\t\treturn this.meshes[index].clone();\n\t\t}\n\t};\n\n};\n\n\n/// DataRenderer inheritance:\nHavokRenderer.prototype = Object.create(DataRenderer.prototype);\nHavokRenderer.prototype.constructor = HavokRenderer;\n\n/**\n * Output fileds generated:\n *\n * - *boundingBox* Array of values describing the bounding box of all collision.\n * - *meshes* An array of THREE.Mesh objects visualizing all collision in the map.\n * \n * @method  renderAsync\n * @async\n * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n */\nHavokRenderer.prototype.renderAsync = function(callback){\n\tvar self = this;\n\n\t// TODO:The design of this method pretty much requires one instance\n\t// of the class per parallel async render. Should probably fix this\n\t// at some point...\n\t\n\t/// Get required chunks\n\tthis.havokChunkData = this.mapFile.getChunk(\"havk\").data;\n\n    /// Set static bounds to the bounds of the havk models\n    this.getOutput().boundingBox = this.havokChunkData.boundsMax;\n\t\n\t/// Clear old meshes\n\tthis.meshes = [];\n\n\t/// Set up output array\n\tthis.getOutput().meshes = [];\n\n\t/// Grab model raw data from the chunk.\n\t/// Add missing scale value to obs models.\n\tvar propModels = this.havokChunkData.propModels;\n\tvar zoneModels = this.havokChunkData.zoneModels;\n\tvar obsModels = this.havokChunkData.obsModels;\n\tobsModels.forEach(function(mdl){\n\t\tmdl.scale = 1;\n\t});\n\n\t/// Store geoms and animations from the file in hte instance so we don't\n\t/// have to pass them arround too much. (fix this later)\n\tthis.geometries = this.havokChunkData.geometries;\n\tthis.animations = this.havokChunkData.animations;\t\t\n\t\n\t/// Render \"prop\", \"zone\" and \"obs\" models in that order.\n\tvar renderPropModelsCB = function(){\n\t\tself.renderModels(zoneModels, \"zone\", renderZoneModelsCB);\n\t};\n\tvar renderZoneModelsCB = function(){\n\t\tself.renderModels(obsModels, \"obs\", callback);\n\t};\n\tself.renderModels(propModels, \"prop\", renderPropModelsCB);\n\n\t\n}\n\nmodule.exports = HavokRenderer;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar RenderUtils = require(\"../util/RenderUtils\");\nvar DataRenderer = require('./DataRenderer');\n\n/**\n *\n * A renderer that generates property models for a map.\n * \n * @class PropertiesRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"mapFile\", a GW2File.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nfunction PropertiesRenderer(localReader, settings, context, logger){\n\tDataRenderer.call(this, localReader, settings, context, logger);\n\tthis.mapFile = this.settings.mapFile;\n}\n\n/// DataRenderer inheritance:\nPropertiesRenderer.prototype = Object.create(DataRenderer.prototype);\nPropertiesRenderer.prototype.constructor = PropertiesRenderer;\n\n/**\n * Renders all property meshes in a GW2 map described by the map's PROP chunk.\n * Output fileds generated:\n *\n * - *meshes* An array of THREE.Mesh objects visualizing all property models refered by this map.\n * \n * @method  renderAsync\n * @async\n * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n */\nPropertiesRenderer.prototype.renderAsync = function(callback){\n\tvar self = this;\n\n\tself.getOutput().meshes = [];\n\n\tvar propertiesChunkData =  this.mapFile.getChunk(\"prp2\").data;\n\n\tif(!propertiesChunkData){\n\t\trenderCallback();\n\t\treturn;\n\t}\n\n\tvar props = propertiesChunkData.propArray;\n\tvar animProps =propertiesChunkData.propAnimArray;\n\tvar instanceProps = propertiesChunkData.propInstanceArray;\n\tvar metaProps = propertiesChunkData.propMetaArray;\n\n\t/// Concat all prop types\n\tprops = props\n\t\t.concat(animProps)\n\t\t.concat(instanceProps)\n\t\t.concat(metaProps);\n\n\t/// Create mesh cache\n\tself.meshCache = {};\n\tself.textureCache = {};\n\n\t// For now, we'll do all load in serial\n\t// TODO: load unique meshes and textures in parallell (asynch), then render!\n\tvar lastPct = -1;\n\n\tvar renderIndex = function(idx){\n\n\t\tif(idx>= props.length){\n\n\t\t\t/// Empty mesh cache\n\t\t\tself.meshCache = {};\n\t\t\tself.textureCache = {};\n\t\t\tcallback();\n\t\t\treturn;\n\t\t}\n\n\t\tvar pct = Math.round(1000.0*idx / props.length);\n\t\tpct/=10.0;\n\t\t\n\t\t/// Log progress\n\t\tif(lastPct!=pct){\n\t\t\tvar pctStr = pct +\n\t\t\t\t( pct.toString().indexOf(\".\")<0 ? \".0\":\"\" );\n\n\t\t\tself.logger.log(\n\t\t\t\tT3D.Logger.TYPE_PROGRESS,\n\t\t\t\t\"Loading 3D Models (Props)\", pctStr\n\t\t\t);\n\t\t\tlastPct = pct;\n\t\t}\n\n\t\t/// Read prop at index.\n\t\tvar prop = props[idx];\t\t\t\t\t\t\t\t\n\n\t    /// Adds a single mesh to a group.\n\t\tvar addMeshToLOD = function(mesh, groups, lod, prop, needsClone){\n\n\t\t\t/// Read lod distance before overwriting mesh variable\n\t\t    var lodDist = prop.lod2 != 0 ? prop.lod2 : mesh.lodOverride[1];\n\n\t\t    /// Read flags before overwriting mesh variable\n\t    \tvar flags = mesh.flags;\n\n\t    \t/// Mesh flags are 0 1 4\n\t    \t/// For now, use flag 0 as the default level of detail\n\t    \tif(flags==0)\n\t    \t\tlodDist=0;\n\t    \t\n\t    \t/// Create new empty mesh if needed\n\t    \tif(needsClone){\n\t    \t\tmesh = new THREE.Mesh( mesh.geometry, mesh.material );\n\t    \t}\n\n\t    \tmesh.updateMatrix();\n\t\t\tmesh.matrixAutoUpdate = false;\n\n\t    \t// Find group for this LOD distance\n\t    \tif(groups[lodDist]){\n\t    \t\tgroups[lodDist].add(mesh);\n\t    \t}\n\t    \t// Or create LOD group and add to a level of detail\n\t    \t// WIP, needs some testing!\n\t    \telse{\n\t    \t\tvar group = new THREE.Group();\n\t    \t\tgroup.updateMatrix();\n\t\t\t\tgroup.matrixAutoUpdate = false;\n\t    \t\tgroup.add(mesh);\n\t    \t\tgroups[lodDist] = group;\n\t    \t\tlod.addLevel(group,lodDist);\n\t    \t}\n\n\t    \treturn lodDist;\n\t    }\n\n\t    /// Adds array of meshes to the scene, also adds transform clones\n\t\tvar addMeshesToScene = function(meshArray, needsClone, boundingSphere){\n\t\t\t\n\t\t    ///Add original \n\n\t\t    /// Make LOD object and an array of groups for each LOD level\n\t\t    var groups = {};\n\t\t    var lod = new THREE.LOD();\n\n\t\t    /// Each mesh is added to a group corresponding to its LOD distane\n\t\t    var maxDist = 0;\n\t\t    meshArray.forEach(function(mesh){\n\t\t    \tmaxDist = Math.max( maxDist, addMeshToLOD(mesh,groups,lod,prop,needsClone) );\n\t    \t});\n\n\t    \t/// Add invisible level (the raycaster crashes on lod without any levels)\n\t    \tlod.addLevel(new THREE.Group(),100000);\n\n\t\t    /// Set position, scale and rotation of the LOD object\n\t\t\tif(prop.rotation){\n\t\t    \tlod.rotation.order = \"ZXY\";\n\t\t    \t//[\"x\",\"float32\",\"z\",\"float32\",\"y\",\"float32\"],\n\t\t    \tlod.rotation.set(prop.rotation[0], -prop.rotation[2], -prop.rotation[1]);\n\t\t    }\n\t\t    lod.scale.set( prop.scale, prop.scale, prop.scale );\n\t\t    lod.position.set(prop.position[0], -prop.position[2], -prop.position[1]);\n\t\t   \t\n\n\t\t   \tlod.boundingSphereRadius = ( boundingSphere && boundingSphere.radius ? boundingSphere.radius : 1.0) * prop.scale;\n\n\t\t    lod.updateMatrix();\n\t\t    lod.matrixAutoUpdate = false;\n\n\t\t    /// Show highest level always\n\t\t    //lod.update(lod);\n\n\t    \t//Add LOD containing mesh instances to scene\n\t    \tself.getOutput().meshes.push(lod);\n\t    \t\t\t\t    \n\t\t    // Add one copy per transform, needs to be within it's own LOD\n\t\t    if(prop.transforms){\n\n\t\t    \tprop.transforms.forEach(function(transform){\n\t\t    \t\t\n\t\t    \t\t/// Make LOD object and an array of groups for each LOD level\n\t\t    \t\tvar groups = {};\n\t\t    \t\tvar lod = new THREE.LOD();\n\n\t\t    \t\t/// Each mesh is added to a group corresponding to its LOD distane\n\t\t    \t\tvar maxDist = 0;\n\t\t\t    \tmeshArray.forEach(function(mesh){\n\t\t\t    \t\tmaxDist = Math.max( maxDist, addMeshToLOD(mesh,groups,lod,prop,true) );\n\t\t\t    \t});\n\n\t\t\t    \t/// Add invisible level\n\t    \t\t\t//lod.addLevel(new THREE.Group(),10000);\n\n\t\t\t    \t/// Set position, scale and rotation of the LOD object\n\t\t\t\t\tif(transform.rotation){\n\t\t\t\t    \tlod.rotation.order = \"ZXY\";\n\t\t\t\t    \tlod.rotation.set(transform.rotation[0], -transform.rotation[2], -transform.rotation[1]);\n\t\t\t\t    }\n\t\t\t\t    lod.scale.set( transform.scale, transform.scale, transform.scale );\n\t\t\t\t    lod.position.set(transform.position[0], -transform.position[2], -transform.position[1]);\n\n\t\t\t\t\tlod.updateMatrix();\n\t\t    \t\tlod.matrixAutoUpdate = false;\n\n\t\t    \t\tlod.boundingSphereRadius = ( boundingSphere && boundingSphere.radius ? boundingSphere.radius : 1.0) * prop.scale;\n\n\t\t\t\t\t/// Show highest level always\n\t\t    \t\tlod.update(lod);\n\n\t\t\t    \t/// Add LOD containing mesh instances to scenerender: function(propertiesChunkHeader, map, localReader, renderCallback){\n\t\t\t    \tself.getOutput().meshes.push(lod);\n\t\t\t    });\n\t\t    }\n\t\t}\n\n\t\t/// Get meshes\n\t\tvar showUnmaterialed = false;\n\t\tRenderUtils.getMeshesForFilename(prop.filename, prop.color, self.localReader, self.meshCache, self.textureCache, showUnmaterialed,\n\t\t\tfunction(meshes, isCached, boundingSphere){\n\t\t\t\n\t\t\t\tif(meshes){\n\t\t\t\t\taddMeshesToScene(meshes, isCached, boundingSphere);\n\t\t\t\t}\n\n\t\t\t\t/// Render next prop\n\t\t\t\trenderIndex(idx+1);\n\t\t\t}\n\t\t);\n\n\t\t\n\n\t};\n\n\t/// Start serial loading and redering. (to allow re-using meshes and textures)\n\trenderIndex(0);\n}\n\n\n/**\n * TODO: write description. Used for export feature\n * @method getFileIdsAsync\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nPropertiesRenderer.prototype.getFileIdsAsync = function(callback){\n\tvar fileIds = [];\n\n\tvar propertiesChunkData =  this.mapFile.getChunk(\"prp2\").data;\n\n\tvar props = propertiesChunkData.propArray;\n\tvar animProps = propertiesChunkData.propAnimArray;\n\tvar instanceProps = propertiesChunkData.propInstanceArray;\n\tvar metaProps = propertiesChunkData.propMetaArray;\n\n\tprops = props\n\t\t.concat(animProps)\n\t\t.concat(instanceProps)\n\t\t.concat(metaProps);\n\n\tvar getIdsForProp = function(idx){\n\n\t\tif(idx>=props.length){\n\t\t\tcallback(fileIds);\n\t\t\treturn;\n\t\t}\n\n\t\tif(idx%100==0){\n\n\t\t\tthis.logger.log(\n\t\t\t\tT3D.Logger.TYPE_MESSAGE,\n\t\t\t\t\"getting ids for entry\",idx,\"of\",props.length\n\t\t\t);\n\t\t}\n\n\t\tvar prop = props[idx];\n\t\tUtils.getFilesUsedByModel(\n\t\t\tprop.filename,\n\t\t\tlocalReader,\n\t\t\tfunction(propFileIds){\n\t\t\t\tfileIds = fileIds.concat(propFileIds);\n\t\t\t\tgetIdsForProp(idx+1);\n\t\t\t}\n\t\t);\n\n\t};\n\n\tgetIdsForProp(0);\n};\n\nmodule.exports = PropertiesRenderer;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar RenderUtils = require(\"../util/RenderUtils\");\nvar DataRenderer = require('./DataRenderer');\n\n/**\n *\n * A renderer that generates meshes for a single model file.\n * \n * @class SingleModelRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"id\" the base ID or file ID of the model to generate meshes for.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nfunction SingleModelRenderer(localReader, settings, context, logger){\n\tDataRenderer.call(this, localReader, settings, context, logger);\n}\n\n\n/// DataRenderer inheritance:\nSingleModelRenderer.prototype = Object.create(DataRenderer.prototype);\nSingleModelRenderer.prototype.constructor = SingleModelRenderer;\n\n\n/**\n * Output fileds generated:\n *\n * - *meshes* An array of THREE.Mesh objects visualizing this model file.\n * \n * @method  renderAsync\n * @async\n * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n */\nSingleModelRenderer.prototype.renderAsync = function(callback){\n\tvar self = this;\n\n\t/// Get file id\n\tvar fileId = this.settings.id;\n\tvar showUnmaterialed = true;\n\n\t/// Load the model file\n\tvar meshCache = {};\n\tvar textureCache = {};\n\n\t/// Set up output array\n\tself.getOutput().meshes = [];\n\n\tRenderUtils.getMeshesForFilename(fileId, 0x00ff00, self.localReader, meshCache, textureCache, showUnmaterialed,\n\t\tfunction(meshes, isCached, boundingSphere){\n\t\t\n\t\t\tif(meshes){\n\t\t\t\tmeshes.forEach(function(mesh){\n\t\t\t\t\tmesh.boundingSphere = boundingSphere;\n\t\t\t\t\tself.getOutput().meshes.push(mesh);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t/// Fire callback after all meshes have been added.\n\t\t\tmeshCache = {};\n\t\t\tcallback();\n\t\t}\n\t);\n\n}\n\nmodule.exports = SingleModelRenderer;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar DataRenderer = require('./DataRenderer');\n\n/**\n *\n * A renderer that generates a list of readable strings from a \"strs\" file.\n * \n * @class StringRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"id\" the base ID or file ID of the string file to read strings from.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nfunction StringRenderer(localReader, settings, context, logger){\n\tDataRenderer.call(this, localReader, settings, context, logger);\n}\n\n\n/// DataRenderer inheritance:\nStringRenderer.prototype = Object.create(DataRenderer.prototype);\nStringRenderer.prototype.constructor = StringRenderer;\n\n/**\n * Output fileds generated:\n *\n * - *strings* An array of objects. Each object has a \"recid\"-property specifing on what index within the file\n * a given string was found, and a \"value\"-property specigying the string value.\n *\n * - *language* An integer specifing the language of the loaded file.\n * \n * @method  renderAsync\n * @async\n * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n */\nStringRenderer.prototype.renderAsync = function(callback){\n\tvar self = this;\n\n\t/// Get file id\n\tvar fileId = this.settings.id;\n\tvar showUnmaterialed = true;\n\n\t/// Load the string file\n\n\t/// Set up output array\n\tthis.getOutput().strings = [];\n\n\tthis.localReader.loadFile(this.settings.id, function(inflatedData){\n\t\tvar ds = new DataStream(inflatedData);\n\t\tvar end = ds.byteLength -2;\n\n    \t/// skip past fcc\n    \tds.seek(4);\n\n    \tvar entryHeaderDef =\n\t\t[\n\t\t\t\"size\", \"uint16\",\n\t\t\t\"decryptionOffset\", \"uint16\",\n\t\t\t\"bitsPerSymbol\", \"uint16\"\n\t\t];\n\n\t\tvar entryIndex = 0;\n\n    \twhile ( end - ds.position > 6) {\n\t        \t        \n\t        var entry = ds.readStruct(entryHeaderDef);\n\t        entry.size -= 6;\n\n\t        if(entry.size > 0){\n\n\n\t        \tvar isEncrypted = entry.decryptionOffset != 0 || entry.bitsPerSymbol != 0x10;\n\n\t        \t/// UTF-16\n\t        \tif( !isEncrypted ){\n\t        \t\tvar value =  ds.readUCS2String(entry.size/2);\n\t        \t\tself.getOutput().strings.push({\n\t        \t\t\tvalue:value,\n\t        \t\t\trecid:entryIndex\n\t        \t\t});\n\t        \t}\n\n\t        \t/// Other... ignored\n\t        \telse{\n\n\t        \t}\n\t        }\n\n\t        entryIndex++;        \n\t    }\n\n\n\t\tds.seek(ds.byteLength - 2);\n    \tself.getOutput().language = ds.readUint16();\n\t\tcallback();\n\t});\n\n\n}\n\nmodule.exports = StringRenderer;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar RenderUtils = require(\"../util/RenderUtils\");\nvar DataRenderer = require('./DataRenderer');\nvar GW2File = require(\"../format/file/GW2File.js\"); \n\nvar TerrainShader = require(\"../util/TerrainShader.js\");\n\n/**\n *\n * A renderer that generates the meshes for the terrain of a map.\n *\n * \n * Requires a context previously populated by a \n * {{#crossLink \"EnvironmentRenderer\"}}{{/crossLink}}.\n * \n * @class TerrainRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"mapFile\", a GW2File.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nfunction TerrainRenderer(localReader, mapFile, settings, context, logger){\n\tDataRenderer.call(this, localReader, mapFile, settings, context, logger);\n\tthis.mapFile = this.settings.mapFile;\n\n\tthis.drawWater = function(rect){\n\t\t\n\t\t/// Add Water\n\t\tvar material = material || new THREE.MeshBasicMaterial(\n\t\t\t{\n\t\t\t\tcolor: 0x5bb1e8,\n\t\t\t\twireframe:false,\n\t\t\t \topacity: 0.35\n\t\t\t}\n\t\t);\n\n\t\tmaterial.transparent = true;\n\t\treturn RenderUtils.renderRect(rect, 0, material);\n\t}\n\n\tthis.parseNumChunks = function(terrainData){\n\t\tterrainData.numChunksD_1 = Math.sqrt(\n\t\t\tterrainData.dims[0] *\n\t\t\tterrainData.chunkArray.length /\n\t\t\tterrainData.dims[1]\n\t\t);\n\t\tterrainData.numChunksD_2 =\n\t\t\tterrainData.chunkArray.length / terrainData.numChunksD_1;\n\t}\n\n\tthis.loadPagedImageCallback = function(callback, infaltedBuffer){\n\t\tvar self = this;\n\n\t\t// Prep output array\n\t\tself.getOutput().terrainTiles = [];\n\n\t\tvar pimgDS = new DataStream(infaltedBuffer);\n\t\tvar pimgFile = new GW2File(pimgDS,0);\n\t\tvar pimgTableDataChunk = pimgFile.getChunk(\"pgtb\");\n\t\tvar pimgData = pimgTableDataChunk && pimgTableDataChunk.data;\n\n\t\tthis.mapRect = null;\n\n\t\t/// Fetch chunks\n\t\tvar terrainData = this.mapFile.getChunk(\"trn\").data;\n\t\tvar parameterData = this.mapFile.getChunk(\"parm\").data;\n\n\t\t/// Read settings\n\t\tvar maxAnisotropy = this.settings.anisotropy ? this.settings.anisotropy : 1;\n\n\t\tvar chunks = [];\t\n\t\tvar chunkW = 35;\n\n\t\t/// Calculate numChunksD_1 and _2\n\t\tthis.parseNumChunks(terrainData);\n\n\t\tvar xChunks = terrainData.numChunksD_1;\n\t\tvar yChunks = terrainData.numChunksD_2;\n\n\t\tvar allMaterials = terrainData.materials.materials;\n\t\tvar allTextures = terrainData.materials.texFileArray;\n\n\t\t//Total map dx and dy\n\t\t/*\n\t\told parameter data definition:\n\t\t\"x1\", \"float32\",\n\t\t\"y1\", \"float32\",\n\t\t\"x2\", \"float32\",\n\t\t\"y2\", \"float32\"\n\t\t*/\n\t\t//var dx = parameterData.rect.x2 - parameterData.rect.x1;\n\t\t//var dy = parameterData.rect.y2 - parameterData.rect.y1;\n\t\tvar dx = parameterData.rect[2] - parameterData.rect[0];\n\t\tvar dy = parameterData.rect[3] - parameterData.rect[1];\n\n\t\t//Each chunk dx and dy\n\t\tvar cdx = dx/terrainData.numChunksD_1 * 1;//  35/33;\n\t\tvar cdy =dy/terrainData.numChunksD_2 * 1;//35/33;\n\t\tvar n=0;\n\t\tvar allMats = [];\n\t\tvar customMaterial = new THREE.MeshLambertMaterial({side: THREE.DoubleSide, color:0x666666, flatShading: true}); \n\t\tvar texMats = {};\n\n\t\t/// Load textures from PIMG and inject as material maps (textures)\n\t\tvar chunkTextures={};\n\t\t\n\t\t/// Load textures\n\t\tif(pimgData){\n\t\t\tvar strippedPages = pimgData.strippedPages;\n\n\t\t\t///Only use layer 0\n\t\t\tstrippedPages.forEach(function(page){\n\t\t\t\t\n\t\t\t\t/// Only load layer 0 and 1\n\t\t\t\tif(page.layer<=1){\n\t\t\t\t\tvar filename = page.filename;\n\t\t\t\t\tvar color = page.solidColor;\n\t\t\t\t\tvar coord = page.coord;\n\n\t\t\t\t\tvar matName = coord[0]+\",\"+coord[1];\n\t\t\t\t\tif(page.layer == 1)\n\t\t\t\t\t\tmatName+=\"-2\";\n\n\n\t\t\t\t\t/// Add texture to list, note that coord name is used, not actual file name\n\t\t\t\t\tif(!chunkTextures[matName]){\n\n\t\t\t\t\t\t/// Load local texture, here we use file name!\n\t\t\t\t\t\tvar chunkTex = RenderUtils.loadLocalTexture(self.localReader, filename);\n\n\t\t\t\t\t\tif(chunkTex){\n\t\t\t\t\t\t\t/// Set repeat, antistropy and repeat Y\n\t\t\t\t\t\t\tchunkTex.anisotropy = maxAnisotropy;\n\t\t\t\t\t\t\tchunkTex.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\t\t\tchunkTex.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t///...But store in coord name\n\t\t\t\t\t\tchunkTextures[matName] = chunkTex;\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t});/// end for each stripped page in pimgData\n\t\t}\n\t\t\n\t\t\n\t\t\t\t\n\t\t/// Render Each chunk\n\t\t/// We'll make this async in order for the screen to be able to update\n\n\t\tvar renderChunk = function(cx,cy){\n\t\t\tvar chunkIndex = cy*xChunks + cx;\n\n\t\t\tvar pageX = Math.floor(cx/4);\n\t\t\tvar pageY = Math.floor(cy/4);\n\n\t\t\t//TODO: Terrain texture LOD ?\n\t\t\tvar chunkTextureIndices = allMaterials[chunkIndex].loResMaterial.texIndexArray;\n\t\t\tvar matFileName = allMaterials[chunkIndex].loResMaterial.materialFile;\t\t\n\t\t\t//var chunkTextureIndices = allMaterials[chunkIndex].hiResMaterial.texIndexArray;\n\t\t\t//var matFileName = allMaterials[chunkIndex].hiResMaterial.materialFile;\n\n\n\t\t\tvar chunkData = terrainData.chunkArray[chunkIndex];\n\n\t\t\tvar mainTex = allTextures[chunkTextureIndices[0]];\n\t\t\tvar mat = customMaterial;\n\n\t\t\t/// TODO: just tick invert y = false...?\n\t\t\tvar pageOffetX = (cx % 4)/4.0;\n\t\t\tvar pageOffetY = 0.75 - (cy % 4)/4.0;\n\n\t\t\t//offset 0 -> 0.75\n\t\t\t\n\t\t\t\n\t\t\t//Make sure we have shared textures\n\n\t\t\t/// Load and store all tiled textures\n\t\t\tvar fileNames = [];\n\t\t\tfor(var gi=0;gi<chunkTextureIndices.length/2;gi++){\n\t\t\t\tvar textureFileName = allTextures[chunkTextureIndices[gi]].filename;\n\n\t\t\t\tfileNames.push(textureFileName);\n\t\t\t\t\n\t\t\t\t/// If the texture is not already loaded, read it from the .dat!\n\t\t\t\tif(!chunkTextures[textureFileName]){\n\n\t\t\t\t\t/// Load local texture\n\t\t\t\t\tvar chunkTex = RenderUtils.loadLocalTexture(self.localReader, textureFileName);\n\n\t\t\t\t\tif(chunkTex){\n\t\t\t\t\t\t/// Set repeat, antistropy and repeat Y\n\t\t\t\t\t\tchunkTex.anisotropy = maxAnisotropy;\n\t\t\t\t\t\tchunkTex.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\t\tchunkTex.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t}\n\n\t\t\t\t\tchunkTextures[textureFileName] = chunkTex;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}/// End for each chunkTextureIndices\n\n\t\t\t/// Create Composite texture material, refering the shared textures\n\t\t\tvar pageTexName=  pageX+\",\"+pageY;\t\t\t\t\n\t\t\tvar pageTexName2=  pageX+\",\"+pageY+\"-2\";\t\t\t\t\n\n\n\t\t\t/// TODO USe mapData (Chunk: env -> haze)\n\t\t\t//var fog = SceneUtils.getScene().fog;\n\t\t\tvar fog = {\n\t\t\t\tcolor: {r:1,g:1,b:1},\n\t\t\t\tnear: 0,\n\t\t\t\tfar: 0\n\t\t\t}\n\n\t\t\t/// Get haze color from environment rednerer\n\t\t\tvar envOutput = self.getOutput(T3D.EnvironmentRenderer);\n\t\t\tif(envOutput.hazeColor){\n\t\t\t\tfog.color.r  = envOutput.hazeColor[2]/255.0;\n\t\t\t\tfog.color.g  = envOutput.hazeColor[1]/255.0;\n\t\t\t\tfog.color.b  = envOutput.hazeColor[0]/255.0;\n\t\t\t}\n\t\t\t\n\t\t\tvar uniforms = THREE.UniformsUtils.merge([\n\t    \t\tTHREE.UniformsLib['lights'],\n\t\t\t]);\n\n\t\t\t/// TODO: READ FROM VO, don't default to hard coded scale\n\t\t\tuniforms.uvScale = { type: \"v2\", value: new THREE.Vector2( 8.0, 8.0 ) };\n\t\t\tuniforms.offset = { type: \"v2\", value: new THREE.Vector2( pageOffetX, pageOffetY) };\n\n\t\t\tuniforms.texturePicker = {type: \"t\", value: chunkTextures[pageTexName]};\n\t\t\tuniforms.texturePicker2 = {type: \"t\", value: chunkTextures[pageTexName2]};\n\n\t\t\tuniforms.texture1 = { type: \"t\", value: chunkTextures[fileNames[0]]};\n\t\t\tuniforms.texture2 = { type: \"t\", value: chunkTextures[fileNames[1]]};\n\t\t\tuniforms.texture3 = { type: \"t\", value: chunkTextures[fileNames[2]]};\n\t\t\tuniforms.texture4 = { type: \"t\", value: chunkTextures[fileNames[3]]};\n\t\t\t\n\t\t\t\n\t\t\tmat = new THREE.ShaderMaterial( {\n\t\t\t\tuniforms: uniforms,\n\t\t\t\tfragmentShader: TerrainShader.getFragmentShader(),\n\t\t\t\tvertexShader: TerrainShader.getVertexShader()\n\t\t\t} );\n\n\t\t\t///Store referenceto each material\n\t\t\tallMats.push(mat);\n\n\t\t\t\n\t\t\t/// -1 for faces -> vertices , -2 for ignoring outer faces\n\t\t\tvar chunkGeo =  new THREE.PlaneBufferGeometry ( cdx, cdy, chunkW-3, chunkW-3);\n\n\t\t\tvar cn = 0;\n\n\t\t\t///Render chunk\n\n\t\t\t/// Each chunk vertex\n\t\t\tfor(var y=0; y<chunkW; y++){\n\n\t\t\t\tfor(var x=0; x<chunkW; x++){\n\t\t\t\n\t\t\t\t\tif(  x != 0 && x !=chunkW-1 && y!=0 && y !=chunkW-1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tchunkGeo.attributes.position.array[cn*3+2] = terrainData.heightMapArray[n];\n\t\t\t\t\t\tcn++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tn++;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} // End each chunk vertex\n\n\t\t\t\n\t\t\t/// Flip the plane to fit wonky THREE js world axes\n\t\t\tvar mS = (new THREE.Matrix4()).identity();\n\t\t\tmS.elements[5] = -1;\n\t\t\tchunkGeo.applyMatrix(mS);\n\n\t\t\t/// Compute face normals for lighting, not used when textured\n\t\t\tchunkGeo.computeFaceNormals();\n\t\t\t//chunkGeo.computeVertexNormals();\n\n\n\t\t\t/// Build chunk mesh!\n\t\t\tvar chunk;\n\t\t\tchunk = new THREE.Mesh(\tchunkGeo , customMaterial );\n\t\t\tif(mat.length){\n\t\t\t\tchunk = THREE.SceneUtils.createMultiMaterialObject( chunkGeo, mat );\n\t\t\t}\n\t\t\telse{\n\t\t\t\tchunk = new THREE.Mesh(\tchunkGeo , mat );\t\n\t\t\t}\t\n\n\n\t\t\t///Move and rotate Mesh to fit in place\n\t\t\tchunk.rotation.set(Math.PI/2,0,0);\n\t\t\t\n\t\t\t/// Last term is the new one: -cdx*(2/35)\n\t\t\tvar globalOffsetX = parameterData.rect[0] + cdx/2;\n\t\t\tvar chunkOffsetX = cx * cdx;\n\n\t\t\tchunk.position.x = globalOffsetX + chunkOffsetX;\n\n\t\t\t///Adjust for odd / even number of chunks\n\t\t\tif(terrainData.numChunksD_2 % 2 == 0){\n\t\t\t\t\n\t\t\t\t/// Last term is the new one: -cdx*(2/35)\n\t\t\t\tvar globalOffsetY = parameterData.rect[1] + cdy/2 -0;// -cdy*(1/35);\n\t\t\t\tvar chunkOffsetY = cy * cdy * 1;//33/35;\n\n\t\t\t\tchunk.position.z =  chunkOffsetY + globalOffsetY;\n\t\t\t}\n\t\t\telse{\n\n\t\t\t\tvar globalOffsetY =  parameterData.rect[1] - cdy/2 + 0; //cdy*(1/35);\n\t\t\t\tvar chunkOffsetY = cy * cdy * 1;//33/35;\n\n\t\t\t\tchunk.position.z = globalOffsetY +  chunkOffsetY;\t\n\t\t\t}\n\n\n\t\t\tvar px = chunk.position.x;\n\t\t\tvar py = chunk.position.z;\n\n\n\t\t\tif(!self.mapRect){\n\t\t\t\tself.mapRect = {\n\t\t\t\t\tx1:px-cdx/2, x2:px+cdx/2,\n\t\t\t\t\ty1:py-cdy/2, y2:py+cdy/2 };\n\t\t\t}\n\t\t\t\n\t\t\tself.mapRect.x1 = Math.min(self.mapRect.x1, px -cdx/2);\n\t\t\tself.mapRect.x2 = Math.max(self.mapRect.x2, px +cdx/2);\n\n\t\t\tself.mapRect.y1 = Math.min(self.mapRect.y1, py -cdy/2);\n\t\t\tself.mapRect.y2 = Math.max(self.mapRect.y2, py +cdy/2);\n\t\t\t\n\t\t\tchunk.updateMatrix();\n\t\t\tchunk.updateMatrixWorld ();\n\n\t\t\t/// Add to list of stuff to render\n\t\t\t/// TODO: Perhaps use some kind of props for each entry instead?\n\t\t\tself.getOutput().terrainTiles.push( chunk );\t\t\n\n\t\t} /// End render chunk function\n\n\n\t\tvar stepChunk = function(cx,cy){\n\t\t\tif(cx>=xChunks){\n\t\t\t\tcx = 0;\n\t\t\t\tcy++;\n\t\t\t}\n\n\t\t\tif(cy>=yChunks){\n\n\t\t\t\t/// Draw water surface using map bounds\t\t\t\t\n\t\t\t\tself.getOutput().water = self.drawWater(self.mapRect);\n\n\t\t\t\t/// Set bounds in output VO\n\t\t\t\tself.getOutput().bounds = self.mapRect;\n\n\t\t\t\t/// Fire call back, we're done rendering.\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pct =  Math.floor( 100*(cy * xChunks + cx) /( xChunks * yChunks ) );\n\n\t\t\tself.logger.log(T3D.Logger.TYPE_PROGRESS,\"Loading Terrain\", pct);\n\n\t\t\trenderChunk(cx,cy);\n\t\t\tsetTimeout(stepChunk,1,cx+1,cy);\n\t\t}\n\n\t\tstepChunk(0,0);\n\t};\n}\n\n\n/// DataRenderer inheritance:\nTerrainRenderer.prototype = Object.create(DataRenderer.prototype);\nTerrainRenderer.prototype.constructor = TerrainRenderer;\n\n/**\n * Output fileds generated:\n * \n * - *terrainTiles* An array of THREE.Mesh objects visualizing terrain of the map.\n * \n * - *water* A THREE.Mesh object visualizing the bounds of the map.\n * \n * - *bounds* An object wiht x1, x2, y1, and y2 properties specifying the bounds of the map.\n * \n * @method  renderAsync\n * @async\n * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n */\nTerrainRenderer.prototype.renderAsync = function(callback){\n\t\n\t/// Load all paged Images, requires inflation of other pack files!\n\tvar pagedImageId =  this.mapFile.getChunk(\"trn\").data.materials.pagedImage;\n\tthis.localReader.loadFile(pagedImageId,this.loadPagedImageCallback.bind(this, callback));\n}\n\n/**\n * TODO: write description. Used for export feature\n * @method getFileIdsAsync\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nTerrainRenderer.prototype.getFileIdsAsync = function(callback){\n\n\tvar terrainChunk = this.mapFile.getChunk(\"trn\");\n\tvar pimgTableDataChunk = this.mapFile.getChunk(\"pimg\");\n\tvar fileIds = [];\n\n\t/// ------------ SPLASH TEXTURES ------------\n\tvar pimgData = pimgTableDataChunk && pimgTableDataChunk.data;\n\tvar strippedPages = pimgData.strippedPages;\n\t\n\t///Only use layer 0\n\tstrippedPages.forEach(function(page){\n\t\t\t\n\t\t/// Only load layer 0 and 1\n\t\tif(page.layer<=1 && page.filename>0){\n\t\t\tfileIds.push( page.filename );\n\t\t}\n\t});\n\t/// ------------ END SPLASH TEXTURES ------------\n\n\n\n\t/// ------------ TILED IMAGES ------------\n\tvar terrainData = terrainChunk.data;\n\tvar allTextures = terrainData.materials.texFileArray;\n\tallTextures.forEach(function(texture){\n\t\tif(texture.filename>0)\n\t\t\tfileIds.push(texture.filename);\n\t})\n\t/// ------------ END TILED IMAGES ------------\n\n\n\n\treturn fileIds;\n};\n\nmodule.exports = TerrainRenderer;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar RenderUtils = require(\"../util/RenderUtils\");\nvar DataRenderer = require('./DataRenderer');\n\n/**\n *\n * A renderer that generates zone models for a map.\n * \n * @class ZoneRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"mapFile\", a GW2File.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nfunction ZoneRenderer(localReader, settings, context, logger){\n\tDataRenderer.call(this, localReader, settings, context, logger);\n\tthis.mapFile = this.settings.mapFile;\n\n\t/**\n\t * TODO\n\t * @method  renderZone\n\t * @param  {[type]} zone               [description]\n\t * @param  {[type]} zoneDefs           [description]\n\t * @param  {[type]} mapRect            [description]\n\t * @param  {[type]} renderZoneCallback [description]\n\t * @return {[type]}                    [description]\n\t */\n\tthis.renderZone = function(zone, zoneDefs, mapRect, renderZoneCallback){\n\t\tvar self = this;\n\n\t\t/// Get Zone Definition\n\t\tvar zoneDef = null;\n\t\tzoneDefs.forEach(function(zd){\n\t\t\tif(!zoneDef && zd.token == zone.defToken)\n\t\t\t\tzoneDef = zd;\n\t\t});\n\n\t\t/// Create array of all models to add:\n\t\tvar models = [];\n\t\tvar modelGroups = this.getModelGroups(zone, zoneDef, mapRect);\n\n\t\t/// Create empty mesh cache\n\t\tself.meshCache = {};\n\t\tself.textureCache = {};\n\n\t\t/*\n\t\t * ---Keeping this out of the doc for now---\n\t\t * Steps trough each model and renders it to the scene, allowing for efficient caching.\n\t\t * @param  {Number} i - Current index within the models array\n\t\t */\n\t\t//var lastPct = -1;\n\t\tvar groupKeys = Object.keys(modelGroups);\n\t\tfunction stepModels(i){\n\n\t\t\t/*var pct = Math.round(100.0*i / groupKeys.length);\n\t\t\tif(lastPct!=pct){\n\t\t\t\tconsole.log(\"Rendering ZONE models \"+pct);\n\t\t\t\tlastPct = pct;\n\t\t\t}*/\n\n\t\t\tif(i>=groupKeys.length){\n\n\t\t\t\t/// Empty mesh cache\n\t\t\t\tself.meshCache = {};\n\t\t\t\tself.textureCache = {};\n\n\t\t\t\t/// Tell caller this zone is done loading\n\t\t\t\trenderZoneCallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/// Read model at index\n\t\t\t/// var model = models[i];\n\t\t\tvar key = groupKeys[i]; /// key is model filename\n\t\t\tvar group = modelGroups[key];\n\n\t\t\tvar meshGroups = [];\n\t\t\t\n\t\t\t/// Get model just once for this group\n\t\t\tvar showUnmaterialed = false;\n\t\t\tRenderUtils.getMeshesForFilename(key, null, self.localReader, self.meshCache, self.textureCache, showUnmaterialed,\n\n\t\t\t\tfunction(meshes, isCached){\n\t\t\t\t\t\n\t\t\t\t\t/// If there were meshes, add them to the scene with correct scaling rotation etc.\n\t\t\t\t\tif(meshes /* && meshes.length == 3*/){\n\n\t\t\t\t\t\t/// Add one copy per model instance\n\t\t\t\t\t\t/// TODO: add rotation!\n\t\t\t\t\t\t/// TODO: fine tune position?\n\t\t\t\t\t\t/// TODO: POTIMIZE!\n\t\t\t\t\t\t\n\n\t\t\t\t\t\tgroup.forEach(function(model, instanceIdx){\n\n\t\t\t\t\t\t\tvar isCached = true;\n\t\t\t\t\t\t\tvar scale = 1.0;\n\n\t\t\t\t\t\t\t/// For each Mesh in the model\n\t\t\t\t\t\t\tmeshes.forEach(function(mesh, meshIdx){\n\n\t\t\t\t\t\t\t\tif(mesh.materialFlags == 525 /* || mesh.materialFlags == 520 || mesh.materialFlags == 521*/ ){\n\t\t\t\t\t\t\t\t\t//console.log(\"Skipping lod\");\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\tvar move = {x:0,y:0,z:0};\n\n\t\t\t\t\t\t\t \t/// Add to big mesh\n\t\t\t\t\t\t\t \tif(!meshGroups[meshIdx]){\n\t\t\t\t\t\t\t \t\tvar mg = mesh.geometry.clone();\n\t\t\t\t\t\t\t \t\tvar mga = mg.attributes;\n\t\t\t\t\t\t\t \t\tmeshGroups[meshIdx] = {\n\t\t\t\t\t\t\t \t\t\treadVerts : mga.position.array,\n\t\t\t\t\t\t\t \t\t\tverts: new Float32Array( group.length * mga.position.array.length ),\n\n\t\t\t\t\t\t\t \t\t\treadIndices : mg.getIndex().array,\n\t\t\t\t\t\t\t \t\t\tindices: new Uint32Array( group.length * mg.getIndex().array.length ),\n\n\t\t\t\t\t\t\t \t\t\treadUVs : mga.uv.array,\n\t\t\t\t\t\t\t \t\t\tuvs: new Float32Array( group.length * mga.uv.array.length ),\n\n\t\t\t\t\t\t\t \t\t\treadNormals : mga.normal.array,\n\t\t\t\t\t\t\t \t\t\tnormals: new Float32Array( group.length * mga.normal.array.length ),\n\n\t\t\t\t\t\t\t \t\t\tmaterial:mesh.material,\n\t\t\t\t\t\t\t \t\t\t//material:new THREE.MeshBasicMaterial( {color: 0xffcccc, wireframe:true} ),\n\t\t\t\t\t\t\t \t\t\t/*material : new THREE.PointCloudMaterial ({\n\t\t\t\t\t\t\t\t\t      color: 0xFF0000,\n\t\t\t\t\t\t\t\t\t      size: 20\n\t\t\t\t\t\t\t\t\t    }),*/\n\t\t\t\t\t\t\t \t\t\tposition:{x:model.x, y:model.y, z:model.z}\n\t\t\t\t\t\t\t \t\t}\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse{\n\t\t\t\t\t\t\t \t\t/// Translate\n\t\t\t\t\t\t \t\t\tmove.x = model.x - meshGroups[meshIdx].position.x;\n\t\t\t\t\t\t \t\t\tmove.y = model.z - meshGroups[meshIdx].position.z;\n\t\t\t\t\t\t \t\t\tmove.z = model.y - meshGroups[meshIdx].position.y;\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \t/// Add geom verts\n\t\t\t\t\t\t\t \tvar readVerts = meshGroups[meshIdx].readVerts;\n\t\t\t\t\t\t\t \tvar writeVerts = meshGroups[meshIdx].verts;\n\t\t\t\t\t\t\t \tvar stride = readVerts.length;\n\n\t\t\t\t\t\t\t \tfor ( var i = 0, j = instanceIdx * stride; i < stride; i +=3, j +=3 ) {\n\t\t\t\t\t\t\t\t\twriteVerts[ j + 0 ] = readVerts[ i + 0 ] + move.x;\n\t\t\t\t\t\t\t\t\twriteVerts[ j + 1 ] = readVerts[ i + 1 ] + move.y;\n\t\t\t\t\t\t\t\t\twriteVerts[ j + 2 ] = readVerts[ i + 2 ] + move.z;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar readIndices = meshGroups[meshIdx].readIndices;\n\t\t\t\t\t\t\t \tvar writeIndices = meshGroups[meshIdx].indices;\n\t\t\t\t\t\t\t \tvar strideIndices = readIndices.length;\n\t\t\t\t\t\t\t \tvar shift = stride * instanceIdx  / 3;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, j = instanceIdx * strideIndices; i < strideIndices; i ++, j ++ ) {\n\t\t\t\t\t\t\t\t\twriteIndices[ j ] = readIndices[ i ] + shift;\n\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\tvar readUVs = meshGroups[meshIdx].readUVs;\n\t\t\t\t\t\t\t\tvar writeUvs = meshGroups[meshIdx].uvs;\n\t\t\t\t\t\t\t\tvar uvStride = readUVs.length;\n\t\t\t\t\t\t\t\tfor ( var i = 0, j = instanceIdx * uvStride; i < uvStride; i ++, j ++ ) {\n\t\t\t\t\t\t\t\t\twriteUvs[ j ] = readUVs[ i ];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar readNormals = meshGroups[meshIdx].readNormals;\n\t\t\t\t\t\t\t\tvar writeNormals = meshGroups[meshIdx].normals;\n\t\t\t\t\t\t\t\tvar normalStride = readNormals.length;\n\t\t\t\t\t\t\t\tfor ( var i = 0, j = instanceIdx * normalStride; i < normalStride; i ++, j ++ ) {\n\t\t\t\t\t\t\t\t\twriteNormals[ j ] = readNormals[ i ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t});// End for each model in group\n\t\t\t\t\t\t\n\t\t\t\t\t}/// End if meshes\n\n\t\t\t\t\t/// Add each cluster of merged meshes to scene\n\t\t\t\t\tmeshGroups.forEach(function(meshGroup){\n\n\t\t\t\t\t\tvar mergedGeom = new THREE.BufferGeometry();\n\t\t\t\t\t\t\n\t\t\t\t\t\tmergedGeom.addAttribute( 'position', new THREE.BufferAttribute( meshGroup.verts, 3 ) );\n\t\t\t\t\t\t//mergedGeom.addAttribute( 'index', new THREE.BufferAttribute( meshGroup.indices, 1) );\n\t\t\t\t\t\tmergedGeom.setIndex(new THREE.BufferAttribute(meshGroup.indices, 1));\n\t\t\t\t\t\tmergedGeom.addAttribute( 'normal', new THREE.BufferAttribute( meshGroup.normals, 3 ) );\n\t\t\t\t\t\tmergedGeom.addAttribute( 'uv', new THREE.BufferAttribute( meshGroup.uvs, 2) );\n\n\t\t\t\t\t\tmergedGeom.buffersNeedUpdate = true;\n\n\t\t\t\t\t\tmesh = new THREE.Mesh( mergedGeom, meshGroup.material );\n\t\t\t\t\t\tmesh.position.set(meshGroup.position.x, meshGroup.position.z, meshGroup.position.y);\n\n\t\t\t\t\t\tself.getOutput().meshes.push(mesh);\n\n\t\t\t\t\t});// End for each meshgroup\n\n\n\t\t\t\t\t/// Rendering is done, render next.\n\t\t\t\t\tstepModels(i+1);\n\t\t\t\t}\n\n\t\t\t);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}/// End function stepModels\n\n\t\t/// Begin stepping trough the models, rendering them.\n\t\tstepModels(0);\n\t}\n\n\n\t/**\n\t * TODO\n\t * @method  getModelGroups\n\t * @param  {[type]} zone    [description]\n\t * @param  {[type]} zoneDef [description]\n\t * @param  {[type]} mapRect [description]\n\t * @return {[type]}         [description]\n\t */\n\tthis.getModelGroups = function(zone, zoneDef, mapRect){\n\n\t\t/// Calculate rect in global coordinates\n\t\tvar zPos = zone.zPos;\n\n\t\tvar mapX = mapRect[0];\n\t\tvar mapY = mapRect[1];\n\t\tvar c  = 32+16;\n\n\t\t// [\"x1\",\"uint32\",\"y1\",\"uint32\",\"x2\",\"uint32\", \"y2\", \"uint32\"]\n\t\tvar zoneRect = {\n\t\t\tx1:zone.vertRect[0]*c+mapX,\n\t\t\tx2:zone.vertRect[2]*c+mapX,\n\t\t\ty1:zone.vertRect[1]*-c-mapY,\n\t\t\ty2:zone.vertRect[3]*-c-mapY\n\t\t};\t\n\n\t\t\n\n\t\t/// Zone width and depth in local corrdinates\n\t\t/*var zdx = zone.vertRect.x1-zone.vertRect.x2;\n\t\tvar zdy = zone.vertRect.y1-zone.vertRect.y2;*/\n\t\t\n\t\t/// These zones seems to overflow :/\n\t\tif(zone.encodeData.length == 0){\n\t\t\treturn {};\n\t\t}\n\t\t\n\t\t//console.log(\"Get mdl groups\", zone);\n\t\t/// Testing: Render Zone Vert Rect\n\t\t//RenderUtils.renderRect(zoneRect, -zPos);\n\n\t\tvar zdx = zone.vertRect[0]-zone.vertRect[2];\n\t\tvar zdy = zone.vertRect[1]-zone.vertRect[3];\n\n\t\t/// Zone Flags increases a linear position, used to step trough the Zone.\n\t\tvar linearPos = 0;\n\n\t\tvar modelGroups = {};\n\n\t\tvar terrainTiles = this.getOutput(T3D.TerrainRenderer).terrainTiles;\n\n\t\tfor(var i = 0; i< zone.flags.length; i+=2){\n\n\t\t\t/// Step forward\n\t\t\tlinearPos += zone.flags[i];\n\n\t\t\t/// Check if a model should be placed\n\t\t\tvar flag = zone.flags[i+1];\n\t\t\tif(flag!=0){\n\t\t\t\t\n\t\t\t\t/// Extract flag data\n\t\t\t\t/// Layer is written in the last 4 bytes\n\t\t\t\tvar zoneDefLayer = flag >> 4;\n\n\t\t\t\t/// Get Zone Definition Layer\n\t\t\t\tvar layer = zoneDef.layerDefArray[zoneDefLayer-1];\n\n\t\t\t\t/// TESTING Only show layers with height >= 3\n\t\t\t\tif(layer/* && layer.height >= 0*/){\n\n\t\t\t\t\t/// Get X and Y from linear position\n\t\t\t\t\tvar modelX = (linearPos % zdx)*c + zoneRect.x1;\n\t\t\t\t\tvar modelY = Math.floor(linearPos / zdx)*c + zoneRect.y1;\n\n\t\t\t\t\t/// Get Z from intersection with terrain\n\t\t\t\t\tvar modelZ = null;\n\n\t\t\t\t\tvar startZ = 100000;\n\n\t\t\t\t\tvar raycaster = new THREE.Raycaster(\n\t\t\t\t\t\tnew THREE.Vector3(modelX, startZ, modelY),\n\t\t\t\t\t\tnew THREE.Vector3(0, -1, 0)\n\t\t\t\t\t);\n\n\t\t\t\t\t/// TODO: OPT?\n\t\t\t\t\tterrainTiles.forEach(function(chunk){\n\t\t\t\t\t\tif(modelZ === null){\n\t\t\t\t\t\t\tvar intersections = raycaster.intersectObject(chunk);\n\t\t\t\t\t\t\tif(intersections.length>0){\n\t\t\t\t\t\t\t\tmodelZ = startZ - intersections[0].distance;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t/// Get model id\n\t\t\t\t\t/// TODO: check with modelIdx = flag & 0xf;\n\t\t\t\t\tvar modelIdx = 0; \n\t\t\t\t\tvar model = layer.modelArray[modelIdx];\n\t\t\t\t\tvar modelFilename = model.filename;\n\t\t\t\t\tvar zOffsets = model.zOffsets;\n\n\t\t\t\t\tvar layerFlags = layer.layerFlags; //NOrmaly 128, 128\n\t\t\t\t\t\n\t\t\t\t\t//TODO: flip z,y?\n\t\t\t\t\tvar rotRangeX = layer.rotRangeX;//max min\n\t\t\t\t\tvar rotRangeY = layer.rotRangeY;//max min\n\t\t\t\t\tvar rotRangeZ = layer.rotRangeZ;//max min\n\t\t\t\t\tvar scaleRange = layer.scaleRange;//max min\n\t\t\t\t\tvar fadeRange = layer.fadeRange;//max min\n\n\t\t\t\t\t//Unused\n\t\t\t\t\t//tiling: 3\n\t\t\t\t\t//type: 1\n\t\t\t\t\t//width: 2\n\t\t\t\t\t//radiusGround: 2\n\n\t\t\t\t\t/// Create modelGroup (this zone only)\n\t\t\t\t\tif(!modelGroups[modelFilename]){\n\t\t\t\t\t\tmodelGroups[modelFilename] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\t/// Add entry to model group\n\t\t\t\t\tmodelGroups[modelFilename].push({\n\t\t\t\t\t\tx:modelX,\n\t\t\t\t\t\ty:modelY,\n\t\t\t\t\t\tz:modelZ,\n\t\t\t\t\t\trotRangeX:rotRangeX,\n\t\t\t\t\t\trotRangeY:rotRangeY,\n\t\t\t\t\t\trotRangeZ:rotRangeZ,\n\t\t\t\t\t\tscaleRange:scaleRange,\n\t\t\t\t\t\tfadeRange:fadeRange\n\n\t\t\t\t\t});\n\t\t\t\t\t\n\n\t\t\t\t}/// End if layer\n\n\t\t\t\t\n\t\t\t}/// End if flag != 0\n\n\t\t} /// End for each flag\n\n\t\treturn modelGroups;\n\t}\n}\n\n/// NOT USED??\nfunction addZoneMeshesToScene(meshes, isCached, position, scale, rotation){\n\t\n\t/// Called for each mesh in the zone\n\t/// TODO: Opt opt opt...\n\n    meshes.forEach(function(mesh){\n\n    \t/// Create new mesh if we got back a cached original.\n\t\tif(isCached)\n\t\t\tmesh = new THREE.Mesh( mesh.geometry, mesh.material );\n\n    \t/// Scale, position and rotate.\n    \tmesh.scale.set( scale, scale, scale );\n    \tif(rotation){\n\t    \tmesh.rotation.order = \"ZXY\";\n\t    \tmesh.rotation.set(rotation.x, rotation.y, rotation.z);\n\t    }\n    \tmesh.position.set(position.x, position.y, position.z);\n\n    \t/// Add to export\n    \tthis.getOutput().meshes.push(mesh);\n\t});\n\n}\n\n\n/// DataRenderer inheritance:\nZoneRenderer.prototype = Object.create(DataRenderer.prototype);\nZoneRenderer.prototype.constructor = ZoneRenderer;\n\n/**\n * Renders all zone meshes in a GW2 map described by the map's \"zon2\" chunk.\n * Output fileds generated:\n *\n * - *meshes* An array of THREE.Mesh objects visualizing all zone models refered by this map.\n * \n * @method  renderAsync\n * @async\n * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n */\nZoneRenderer.prototype.renderAsync = function(callback){\n\tvar self = this;\n\n\t/// Set up output array\n\tself.getOutput().meshes = [];\n\t\n\tvar zoneChunkData = this.mapFile.getChunk(\"zon2\").data;\n\tvar parameterChunkData = this.mapFile.getChunk(\"parm\").data;\n\tvar terrainChunkData = this.mapFile.getChunk(\"trn\").data;\n\tvar mapRect = parameterChunkData.rect;\n\t\t\t\t\n\t/// Zone data\n\tvar zones = zoneChunkData.zoneArray;\n\tvar zoneDefs = zoneChunkData.zoneDefArray;\n\n\t/// Render each zone\n\tlastPct = -1;\t\t\n\n\t/// Main render loop, render each zone\n\tfunction stepZone(i){\n\n\t\tvar pct = Math.round(100.0*i / zones.length);\n\t\tif(lastPct!=pct){\n\t\t\tself.logger.log(\n\t\t\t\tT3D.Logger.TYPE_PROGRESS,\n\t\t\t\t\"Loading 3D Models (Zone)\", pct\n\t\t\t);\n\t\t\tlastPct = pct;\n\t\t}\n\n\t\tif(i >= zones.length){\n\t\t\tcallback();\n\t\t\treturn;\n\t\t}\n\n\t\t/// Main zone render function call\n\t\tself.renderZone(zones[i], zoneDefs, mapRect,\n\t\t\tstepZone.bind(self,i+1)\n\t\t);\t\n\n\t}\n\n\tstepZone(0);\n}\n\nmodule.exports = ZoneRenderer;\n\n//// Not used: zone defintion per chunk data \"images\" 32*32 points\n/*\n//Total map dx and dy\nvar d = terrainChunkHeader.data;\nvar pd = parameterChunkHeader.data;\nvar dx = (pd.rect.x2-pd.rect.x1);\nvar dy = (pd.rect.y2-pd.rect.y1);\n\n//Each chunk dx and dy\n\nvar c =1;\nvar cdx = c*dx/d.dims.dim1;\n\nvar cdy = c*dy/d.dims.dim2;\n\nvar cdx = dx/(d.numChunksD_1*2);\nvar cdy =dy/(d.numChunksD_2*2);\n\n\nfor(var i=0; i<zoneDefs.length; i++){\n\tvar zoneDef = zoneDefs[i];\n\t\n\t//TODO: opt!\n\tzoneDef.layerDefs.forEach(function(layer){\n\n\t\tlayer.modelArray.forEach(function(model){\n\t\t\n\t\t\t\n\t\t});\n\t\t\n\n\t});\n\n\tvar chunkMat = new THREE.MeshBasicMaterial(\n\t\t{\n\t\t\tcolor: 0x00ff00,\n\t\t\twireframe:true,\n\t\t \topacity: 1.0,\n\t\t}\n\t);\n\n\t//TODO: opt!\n\t\n\tif(\n\t\tzoneDef.token == 597  ||\n\t\tzoneDef.token == 1369  ||\n\t\tzoneDef.token == 903  \n\t){\n\n\t\tzoneDef.pageTable.pageArray.forEach(function(page){\n\t\t\tvar flags = page.flags;\n\t\t\tvar coord = page.chunkCoord;\n\n\n\t\t\t//Hightlight this coord\n\t\t\tvar rect = {};\n\n\t\t\t\n\t\t\t//var globalOffsetX = pd.rect.x2 - cdx;\n\t\t\tvar globalOffsetX = pd.rect.x1 + cdx/2;\n\t\t\tvar chunkOffsetX = coord[0] * cdx;\n\n\t\t\trect.x1  = globalOffsetX + chunkOffsetX;\n\n\t\t\t///Adjust for odd / even number of chunks\n\t\t\tif(d.numChunksD_2 % 2 == 0){\n\t\t\t\t\n\t\t\t\tvar globalOffsetY = -pd.rect.y1;\n\t\t\t\tvar chunkOffsetY = -coord[1] * cdy;\n\n\t\t\t\trect.y1  =  chunkOffsetY + globalOffsetY;\n\t\t\t}\n\t\t\telse{\n\n\t\t\t\tvar globalOffsetY =  -pd.rect.y1;\n\t\t\t\tvar chunkOffsetY = -coord[1] * cdy;\n\n\t\t\t\trect.y1 = globalOffsetY +  chunkOffsetY;\t\n\t\t\t}\n\n\t\t\trect.x2 = rect.x1+cdx;\n\t\t\trect.y2 = rect.y1+cdy;\n\n\n\t\t\t\n\n\t\t\tRenderUtils.renderRect(rect, 4000,chunkMat, 4000);\n\n\t\t\t//for(var j=0; j<flags.length; j++){\n\t\t\t//\tif(flags[j]>0){\n\t\t\t//\t\tconsole.log(\"Found flag\",flags[j],\"@ zoneDef\",zoneDef.token,\"coord\",coord,\"index\",j);\n\t\t\t//\t}\n\t\t\t//}\n\t\t});\n\n\t}\n\n}*/","/*\nCopyright (C) 2015 RequestTimeout <https://github.com/RequestTimeout408>\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nmodule.exports  = [\n    //uint8_t  version;\n    \"version\",\"uint8\",                      \n\n    //uint8_t  magic[3];\n    \"magic\", \"string:3\",                    \n\n    //uint32_t headerSize;\n    \"headerSize\",\"uint32\",                  \n\n    //uint32_t unknown1;\n    \"unknown1\",\"uint32\",                    \n\n    //uint32_t chunkSize;\n    \"chunkSize\",\"uint32\",                   \n    \n    //uint32_t crc;\n    \"crc\",\"uint32\",                         \n    \n    //uint32_t unknown2;\n    \"unknown2\",\"uint32\",                    \n    \n    //uint64_t mftOffset;\n    \"mftOffset\",[ \"[]\",\"uint32\", 2 ],\n    \n    //uint32_t mftSize;\n    \"mftSize\",\"uint32\",\n    \n    //uint32_t flags;\n    \"flags\",\"uint32\"\n];","/*\nCopyright (C) 2015 RequestTimeout <https://github.com/RequestTimeout408>\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = [\n\t//uint8_t  magic[4];\n\t\"magic\",\"string:4\",\n\t\t\n\t//uint64_t unknown1;\n\t\"unknown1\",[ \"[]\",\"uint32\", 2 ],\n\n\t//uint32_t nbOfEntries;\n\t\"nbOfEntries\",\"uint32\",\n\n\t//uint32_t unknown2;\n\t\"unknown2\",\"uint32\",\n\t\n\t//uint32_t unknown3;\n\t\"unknown3\",\"uint32\",\n];","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar HEAD_STRUCT = [\n\t'type', 'cstring:4',\n\t'chunkDataSize', 'uint32',\n\t'chunkVersion', 'uint16',\n\t'chunkHeaderSize', 'uint16',\n\t'offsetTableOffset', 'uint32',\n];\n\n\n/**\n * Settings for resolving conflicting chunk names in different files.\n * @private \n * @property DUPLICATE_SETTINGS\n * @type {Object}\n */\nvar DUPLICATE_SETTINGS = {\n\t'ANIM':['MODL','Unknown'],\n\n\t'GAME':['MODL','Unknown'],\n\n\t'Main':['cntc','mMet'],\n\n\t'SKEL':['MODL','Unknown'],\n\n\t'TOOL':['AMAT','MODL'],\n\n\t'main':['Unknown','Unknown','cmaC'],\n\n\t'nvms':['Unknown','Unknown']\n};\n/*\n\tANIM, GAME, SKEL needs to know file name for scenefile...\n\n\tANIM: 2\n\t\tModelFileAnimationV25\t\tMODL\n\t\tSceneFileAnimationV2\t\t?\n\n\tGAME: 2\n\t\tModelFileGame\t\t\t\tMODL ???\n\t\tSceneFileGameV6\t\t\t\t?\n\n\tMain: 2\n\t\tPackContent\t\t\t\t\tcntc\n\t\tPackMapMetadata\t\t\t\tmMet\n\n\tSKEL: 2\n\t\tModelFileSkeletonV1\t\t\tMODL\n\t\tSceneFileSkeletonV3\t\t\t?\n\n\tTOOL: 2\n\t\tAmatToolParams\t\t\t\tAMAT ???\n\t\tModelFileToolV16\t\t\tMODL ???\n\n\tmain: 3\n\t\tCollideNavMesh\n\t\tCollideNavMeshChunk\n\t\tCollideModelManifest\t\tcmaC\n\n\tnvms: 2\n\t\tPackMapNavMeshV2\n\t\tPackMapNavMeshChunkV2\n*/\n\n   \n\n\n\n/**\n * Basic chunk parsing functionality for Guild Wars 2 file chunks\n * @class GW2Chunk\n * @constructor\n * @param {DataStream} ds A DataStream containing deflated chunk binary data.\n * @param {Number} addr Offset of chunk start within the DataStream\n */\nvar Chunk = function(ds, addr){\n\n\t/**\n\t * @property {DataStream} ds The DataStream data source used by this chunk.\n\t */\n\tthis.ds = ds;\n\n\t/**\n\t * @property {Number} addr The address to this Chunk within ds.\n\t */\n\tthis.addr = addr;\n\n\t/**\n\t * @property {Object} data The typed data read from the body of this chunk.\n\t */\n\tthis.data = null;\n\n\n\t/**\n\t * @property {Number} headerLength The length in bytes of the chunk header.\n\t */\n\tthis.headerLength  = NaN;\n\n\t/**\n\t * @property {Object} header Chunk header data.\n\t */\n\tthis.loadHead();\n};\n\n/**\n * Parses the chunk header data, populating the header property.\n * @method loadHead\n */\nChunk.prototype.loadHead=function(){\n\tthis.ds.seek(this.addr);\t\n\tthis.header = this.ds.readStruct(HEAD_STRUCT);\n\n\tthis.headerLength = this.ds.position - this.addr;\n};\n\n/**\n * @method  getDefinition\n * @param  {String} fileType The main type of the pack file containing this chunk.\n * Used for resolving chunk naming conflicts between pack file types.\n * @return {Array}\tDataStream formatted array describing the data\n * sctructures of this chunk\n */\nChunk.prototype.getDefinition=function(fileType){\n\n\t/// Normally we're looking for the 0th occurance\n\t/// But some chunk names occur multiple times and we're interrested\n\t/// in the N:th occurance of the definition.\n\t/// \n\t/// I've no idea how this is automated, for now just use the \n\t/// settings object I've put together from experience.\n\tvar useNthIndex = 0;\n\n\t/// If this chunk has multiple definitions\n\t/// get to know what def to use...\n\tvar fileTypes = DUPLICATE_SETTINGS[this.header.type];\n\tif(fileTypes){\n\n\t\tuseNthIndex = -1;\n\n\t\t/// Check what file name entry matches this file name\n\t\tfor(var i=0; i<fileTypes.length && useNthIndex == -1; i++){\n\t\t\tvar ft = fileTypes[i];\n\n\n\t\t\tif(ft == fileType){\n\t\t\t\tuseNthIndex = i;\n\t\t\t}\n\t\t}\n\n\t\t/// We didnt find this file name!\n\t\t/// TODO: if you get this error, please update the DUPLICATE_SETTINGS above\n\t\tif(useNthIndex == -1){\n\t\t\tdebugger;\n\t\t}\n\t}\n\n\tvar defsFound = 0;\n\tfor(var i=0; i<T3D.formats.length; i++){\n\t\tvar f = T3D.formats[i];\n\t\t\n\t\t/// Chunk name needs to match\n\t\tif(\tf.name == this.header.type ){\n\n\t\t\t/// There needs to be a chunk def version matching the one specifiend \n\t\t\t/// \n\t\t\t/// AND If this is the Nth occurance of the chunk definition\n\t\t\t/// and we're looking for the Nth occurance, return it.\n\t\t\t/// \n\t\t\t/// chunkVersion in the dat uses 0 indexing\n\t\t\tif( defsFound == useNthIndex && f.versions[this.header.chunkVersion] ){\n\t\t\t\treturn ( new f.versions[this.header.chunkVersion]() ).__root;\t\n\t\t\t}\n\n\t\t\tdefsFound++;\n\t\t}\n\t}\n\t\n\n};\n\n/**\n * Parses the chunk main data, populating the data property.\n * @method loadData\n * @param  {String} fileType The main type of the pack file containing this chunk.\n * Used for resolving chunk naming conflicts between pack file types when\n * looking up the structure definition for this chunk.\n */\nChunk.prototype.loadData=function(fileType){\n\n\tvar def = this.getDefinition(fileType);\n\t\n\tif(def){\n\t\tthis.ds.seek(this.addr + this.headerLength);\n\t\tthis.data =  this.ds.readStruct(def);\n\t}\n\n\telse{\n\t\tT3D.Logger.log(T3D.Logger.TYPE_WARNING,\n\t\t\t\"Could not find a definition for chunk\",\n\t\t\tthis.header.type,\n\t\t\t\"version\", this.header.chunkVersion,\n\t\t\t\"file name\", fileType);\n\t}\n\t\n};\n\n/**\n * Retrieves the next chunk is the datastream. In practice this means the next chunk\n * within the same pack file.\n * @method next\n * @return {GW2Chunk} The next chunk if any, otherwise null.\n */\nChunk.prototype.next = function(){\n\ttry{\n\t\t\n\t\t// Calculate actual data size, as mChunkDataSize\n\t\t// does not count the size of some header variables\n\t\treturn new Chunk(this.ds,this.addr + 8 + this.header.chunkDataSize);\n\t}\n\tcatch(e){\n\t\t/// Out of bounds probably\t\t\n\t}\n\treturn null;\n};\n\nmodule.exports = Chunk;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar Chunk = require('./GW2Chunk');\n\nvar HEAD_STRUCT = [\n\t'identifier', 'cstring:2',\n\t'unknownField1', 'uint16',\n\t'unknownField2', 'uint16',\n\t'pkFileVersion', 'uint16',\n\t'type', 'cstring:4'\n];\n\n\n/**\n * Basic header and chunk parsing functionality for Guild Wars 2 pack files (PF)\n * @class GW2File\n * @constructor\n * @param {DataStream} ds A DataStream containing deflated file binary data.\n * @param {Number} addr Offset of file start within the DataStream\n * @param {boolean} noChunks If true, the file does not parse its\n * chunks on creation.\n */\nvar File = function(ds, addr, noChunks){\n\n\t/**\n\t * @property {DataStream} ds The DataStream data source used by this file.\n\t */\n\tthis.ds = ds;\n\n\t/**\n\t * @property {Number} addr The address to this File within ds.\n\t */\n\tthis.addr = addr;\n\n\t/// Not used anymore I think\n\tthis.data = null;\n\n\t/**\n\t * @property {Number} headerLength The length in bytes of the file header.\n\t */\n\tthis.headerLength  = NaN;\n\n\t/**\n\t * All {{#crossLink \"GW2Chunk\"}}chunks{{/crossLink}} contained in the file.\n\t *\n\t * @property chunks\n\t * @type GW2Chunk[]\n\t */\n\tthis.chunks = [];\n\t\n\n\t/**\n\t * @property {Object} header Chunk header data.\n\t */\n\tthis.readHead();\n\t\n\tif(!noChunks){\n\t\tthis.readChunks();\n\t}\n};\n\n\n/**\n * Parses the file header data, populating the header property.\n * @method readHead\n */\nFile.prototype.readHead = function(){\n\tthis.ds.seek(this.addr);\n\tthis.header = this.ds.readStruct(HEAD_STRUCT);\n\tthis.headerLength = this.ds.position - this.addr;\n};\n\n/**\n * Parses the file headers and populates the chunks property.\n * @method readChunks\n */\nFile.prototype.readChunks = function(){\n\n\t/// Reset chunks\n\tthis.chunks = [];\n\n\t//var structs = this.getChunkStructs && this.getChunkStructs();\n\n\t/// Load basic Chunk in order to read the chunk header.\n\tvar ch = new Chunk(this.ds, this.headerLength + this.addr);\t\n\n    //while(structs && ch!=null && ch.header.type){\n    while(ch!=null && ch.header.type){\n\n    \t/// Load data and pass file type if we need to determine what chunk entry to use\n    \t/// (Some chunks in different files share the same chunk name)\n\t\tch.loadData(this.header.type);\n\t    this.chunks.push(ch);\n\n    \t/// Load next basic Chunk in order to read the chunk header.\n    \tch = ch.next();\n    }\n};\n\n\n/**\n * Get a GW2Chunk from this file\n * @method getChunk\n * @param  {String} type The name, or type of the desired chunk.\n * @return {GW2Chunk} The first GW2Chunk in this file matching the type name, or null if no matching GW2Chunk was found.\n */\nFile.prototype.getChunk = function (type){\n\tfor(var i=0; i<this.chunks.length; i++){\n\t\tif( this.chunks[i].header.type.toLowerCase() == type.toLowerCase() )\n\t\t\treturn this.chunks[i]; \n\t}\n\treturn null;\n};\n\n/**\n * Provides a list of known header types and their parsing structure. Should be defined by each file type individually.\n * @method getChunkStructs\n * @return {Object} An object mapping chunk identifiers to DataStream structure descriptors.\n */\nFile.prototype.getChunkStructs = function(){\n\treturn {}\n};\n\nmodule.exports = File;","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/*\n\tguid 1683952224941671000 is fucked up floor in SAB HUB\n\tmaterialFilename for that mesh is 564821, shared with lots of stuff\n\tlod 1 and 2 are both 0\n\tmaterial flags is 2056\n*/\n\n/**\n * Collection of methods for generating THREE materials and textures\n * from Guild Wars 2 data formats.\n * @Class MaterialUtils\n * @static\n */\nvar ME = module.exports = {};\n\n\n/**\n * Builds a custom vertex shader for a given number of uv cannels.\n * WIP not implemented yet!\n * \n * @method  buildVS\n * @param  {Number} numUv Number of UV channels used by this shader\n * @return {String}       Genereted vertex shader source\n */\nfunction buildVS(numUv){\n\n\tvar vdefs = \"\";\n\tvar adefs = \"\";\n\tvar reads = \"\";\n\tfor(var i=0; i< numUv; i++){\n\t\tvdefs += \"varying vec2 vUv_\"+(i+1)+\";\\n\";\n\t\t\n\t\t/// uv and uv2 are defined by THREE\n\t\tif(i>1)\n\t\t\tadefs += \"attribute vec2 uv\"+(i+1)+\";\\n\";\n\n\n\t\treads += \"vUv_\" + (i+1) + \" = uv\"+(i>0?(i+1):\"\")+\";\\n\";\n\t}\n\n\treturn adefs + vdefs +\n\t    \"void main()\\n\"+\n\t    \"{\\n\"+\n\t        reads+\n\t        \"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\"+\n\t        \"gl_Position = projectionMatrix * mvPosition;\\n\"+\n\t    \"}\";\n}\n\n\n/**\n * Generate a texture of a specified color, used to be part of THREEjs\n * \n * @method generateDataTexture\n * @param {Number} width \n * @param {Number} height \n * @param {THREE.Color} color \n */\nfunction generateDataTexture(width, height, color){\n\t// create a buffer with color data\n\tvar size = width * height;\n\tvar data = new Uint8Array( 4 * size );\n\tvar r = Math.floor( color.r * 255 );\n\tvar g = Math.floor( color.g * 255 );\n\tvar b = Math.floor( color.b * 255 );\n\tvar a = 255;\n\n\tfor ( var i = 0; i < size; i ++ ) {\n\t\tvar stride = i * 4;\n\n\t\tdata[ stride ] = r;\n\t\tdata[ stride + 1 ] = g;\n\t\tdata[ stride + 2 ] = b;\n\t\tdata[ stride + 3 ] = a;\n\t}\n\t// used the buffer to create a DataTexture\n\treturn new THREE.DataTexture( data, width, height, THREE.RGBAFormat );\n}\n\n/**\n * Builds a custom pixel shader for a given number of uv cannels.\n * WIP not implemented yet!\n * \n * @method buildPS\n * @param  {Array}  textures  THREE textures\n * @param  {Number} numUv     Number of UV channels used by this shader\n * @param  {Number} alphaTest Texture see-trough alpha treshold\n * @param  {TODO} lightMap  TODO\n */\nfunction buildPS(textures, numUv, alphaTest, lightMap){\n\tvar t1uv = \"vUv_\"+(textures[0].uvIdx+1);\n\t\n\n\tvar discard = \"\";\n\n\tif(alphaTest){\n\t\tdiscard = \"    if (c1.a < 0.5) \\n\"+\n    \t\"       discard;\\n\";\t\n\t}\n\n    /// Color from 1st text or lighted by 2nd?\n    var writeColor = \"gl_FragColor = c1;\\n\";\n\n    if(lightMap){\n    \tvar texIdx = 0;\n    \t//var t2uv = \"vUv_4\";//+(3-textures[texIdx].uvIdx+1);\n    \tvar t2uv = \"vUv_1\";// + (textures[texIdx].uvIdx+1);\n    \t//console.log(\"t2uv\",t2uv);\n\n    \twriteColor = \"   vec4 c2 = texture2D( texture\"+(texIdx+1)+\", \"+t2uv+\" );\\n\"+\n\t    \"     gl_FragColor = c2;\\n\";\n\t    //\"     gl_FragColor = vec4(c2.rgb * c1.r/.5, c2.a);\\n\";\n    }\n\n\n    var uniforms = \"\"\n    textures.forEach(function(t,idx){\n    \tuniforms += \"uniform sampler2D texture\"+(idx+1)+\";\\n\";\n    });\n\t/*uniforms += \"uniform sampler2D texture1;\\n\";\n\tif(lightMap)\n\t\tuniforms += \"uniform sampler2D texture2;\\n\";*/\n\n\tvar varyings = \"\";\t\n\tfor(var i=0; i< numUv; i++){\n\t\tvaryings += \"varying vec2 vUv_\"+(i+1)+\";\\n\";\n\n\t}\n\n\treturn uniforms + varyings +\n    \"void main( void ) {\\n\"+\n    \"    vec4 c1 = texture2D( texture1, \"+t1uv+\" );\\n\"+\n    discard +\n    writeColor +\n    \"}\";\n}\n\n/**\n * WIP, concept for generatin materials to render multi UV chanelled meshes.\n * \n * @method getUVMat\n * @param  {Array} \ttextures  THREE texture\n * @param  {Number} numUV     Number of UV channels used by this shader\n * @param  {Number} alphaTest Texture see-trough alpha treshold\n * @return {THREE.ShaderMaterial} Generated shader\n */\nfunction getUVMat(textures, numUV, alphaTest){\n\n\tvar lightMap = false;\n\tvar uniforms = {};\n\n\ttextures.forEach(function(t,idx){\n\t\tuniforms[\"texture\"+idx] = { type: \"t\", value: t };\n\t});\n\n\tif(textures.length>1){\n\t\tlightMap = true;\t\t\n\t}\n\n\tvar attributes = {};\n\n\tfor(var i=2; i<numUV; i++){\n\t\tattributes[\"uv\"+(i+1)] =  { type: 'v2', value: [] };\n\t}\n\n\tvar vs = buildVS(numUV);\n\n\treturn new THREE.ShaderMaterial( {\n\t\tuniforms: uniforms,\n\t\tvertexShader: vs,\n\t\tfragmentShader: buildPS(\n\t\t\t\ttextures,\n\t\t\t\tnumUV,\n\t\t\t\talphaTest,\n\t\t\t\tlightMap\n\t\t\t), \n\t\tattributes: attributes,\n\t\tside: THREE.FrontSide,\n\t} );\n\n}\n\n/**\n * Builds a THREE texture from a ModelMaterialData by reading settings and\n * loading any required data from the localReader. Uses sharedTextures for \n * texture caching.\n *\n * This method is full of guesses and estimations, and could be improved on\n * a lot, allowing rendering of multi UV channeled materials, or special\n * materials like custom color chanelled gear.\n * \n * @method getMaterial\n * @param  {ModelMaterialData} material \tA value object often automaticaly  \n *                                       \tgenerated by a\n *                                       \t{{#crossLink \"GW2Chunk\"}}{{/crossLink}}\n *                                       \tstructure definitions can be found in \n *                                       \tAllFormats.js, look for the latest \n *                                       \tversion of ModelMaterialData\n *                                       \t\n * @param  {GW2File} materialFile   A GW2File instance, must be of type AMAT\n * @param  {LocalReader} localReader The LocalReader to load the file contents from.   \n * @param  {Object} sharedTextures  Value Object for keeping the texture cache\n * @return {THREE.Material}         A THREE Material with the generated contents and settings.\n */\nvar getMaterial = ME.getMaterial = function(material, materialFile, localReader, sharedTextures){\n\n\tif(!materialFile)\n\t\treturn;\n\t\n\tvar dxChunk =  materialFile.getChunk(\"dx9s\");\n\tvar grChunk = materialFile.getChunk(\"grmt\");\n\n\t/// Append all textures to the custom material\n\tvar finalTextures = [];\n\t\n\t//Some materials don't use textures..\n\tif(material && material.textures.length/* && material.textures[texIndex]*/){\n\n\t\t/// TODO: check for flags!\t\t\t\n\t\t/// \n\t\t/// techinques[] -> passes[] -> effects[] -> samplerIndex[]\n\t\t/// \n\t\t//console.log(\"num effects\",dxChunk.data.techniques[0].passes[0].effects.length);\n\n\t\t//if(grChunk.data.flags!=76)\n\t\t//\treturn;\n\n\t\t/// 3 teqs : high medium low\t\t\t\t\t\t\t\tGRAPHICS LEVEL SETTINGS\n\t\t/// 1 passes\t\t\t\t\t\t\t\t\t\t\t\tDON'T CARE\n\t\t/// 15 effects\t\t\tEach effect has a pixel shader \t\tHOW??\n\t\t/// 1 or 2 sampler indices \t\t\t\t\t\t\t\t\tUSE ALL! (Multi material)\n\t\t\n\t\tvar effects = dxChunk.data.techniques[0].passes[0].effects;\n\t\t//var effect = effects[10];\n\t\tvar effect = effects[0];\n\n\t\tvar shader = dxChunk.data.shaders[effect.pixelShader];\n\t\t\n\t\t/*effects.forEach(function (eff) {\n\t\t\tif(eff.samplerIndex.length > effect.samplerIndex.length)\n\t\t\t\teffect = eff;\n\t\t});*/\n\t\t//var samplerIdx = effect.samplerIndex[0];\n\n\t\tvar samplerTextures = [];\n\t\tfor(var i=0; i<effect.samplerIndex.length; i++)\n\t\t{\n\n\t\t\tvar samplerIdx = effect.samplerIndex[i];\n\t\t\tvar sampler = dxChunk.data.samplers[samplerIdx];\n\n\t\t\t/// SHOULD NEVER HAPPEN, hide mesh!\n\t\t\tif(!sampler)\n\t\t\t\tcontinue;//return;\n\n\t\t\tvar textureToken = sampler && grChunk.data.texTokens[sampler.textureIndex];\n\t\t\tif(!textureToken)\n\t\t\t\ttextureToken = \"0-0\";\n\t\t\t/*else\n\t\t\t\ttextureToken =textureToken.val;*/\n\n\t\t\t/// Find the texture reffered by this sampler\n\t\t\tvar samplerTex = null;\n\n\t\t\tmaterial.textures.forEach(function(tex, index){\n\n\t\t\t\t///Seems like only 1st part of token is used...\n\t\t\t\tif(!samplerTex && tex.token.split(\"-\")[0] == textureToken.split(\"-\")[0]){\n\t\t\t\t\t//console.log(\"TEX match\",tex.token, textureToken)\n\t\t\t\t\tsamplerTex = tex;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/// Add this sampler's texture to the collection of all textures\n\t\t\tif(samplerTex){\n\t\t\t\tsamplerTextures.push(samplerTex);\n\t\t\t}\n\t\t\telse{\n\t\t\t\t///FALLBACK, just guess what texture we should use\n\t\t\t\tif(sampler)\n\t\t\t\t\tsamplerTextures.push(material.textures[sampler.textureIndex]);\n\t\t\t\telse if(material.textures.length>0)\n\t\t\t\t\tsamplerTextures.push(material.textures[0]);\n\t\t\t\telse return;\n\t\t\t}\n\n\n\t\t}/// END for each sampler index in effect\n\n\t\t/// We now have all textures\n\t\t//console.log(\"textures from sampler\", samplerTextures);\n\t\t\t\t\n\n\t\t/// Fallback to using whatever texture there is.\n\t\tif(samplerTextures.length <= 0){\n\t\t\treturn;\n\t\t\t//mainTex =  material.textures[0];\t\t\t\n\t\t}\n\n\n\t\t//console.log(\"num samplers \",samplerTextures.length);\n\t\tsamplerTextures.forEach(function(texture, idx){\n\n\t\t\tif(!texture)\n\t\t\t\treturn;\n\t\t\t\n\t\t\t/// Set texture \"URL\"\n\t\t\tvar texURL = texture && texture.filename;\n\n\t\t\t/// Load texture from RAM or local reader:\n\t\t\tfinalTextures[idx] = getTexture(texURL, localReader, sharedTextures)\n\t\t\tif(finalTextures[idx]){\n\t\t\t\tfinalTextures[idx].uvIdx = texture.uvPSInputIndex;\t\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\n\t}/// End if material and texture\t\t\t\n\n\tvar finalMaterial;\n\n\n\t/// Create custom shader material if there are textures\n\tif(finalTextures){\n\n\t\t// TODO: make this work!\n\t\tif(false && finalTextures.length>0){\n\t\t\tfinalMaterial = getUVMat( finalTextures, material.texCoordCount, grChunk.data.flags!=16460 );\t\n\t\t}\n\t\telse{\n\t\t\tvar ft=false;\n\t\t\tvar nt=false;\n\t\t\tmaterial.textures.forEach(function(t){\n\t\t\t\t//Flag for diffuse map\n\t\t\t\tif(!ft && t.token.split(\"-\")[0] == \"1733499172\")\n\t\t\t\t\tft = t;\n\n\t\t\t\t//Flag for normal map\n\t\t\t\tif(!nt && t.token.split(\"-\")[0] == \"404146670\")\n\t\t\t\t\tnt = t;\n\t\t\t});\n\t\t\t\n\t\t\tif(!ft || ft.filename<=0)\n\t\t\t\treturn;\n\n\t\t\tfinalMaterial = new THREE.MeshPhongMaterial({\n\t\t\t\tside: THREE.FrontSide, map:getTexture(ft.filename, localReader, sharedTextures)\n\t\t\t}); \n\t\t\tif(nt) {\n\t\t\t\tvar normalMap = getTexture(nt.filename, localReader, sharedTextures);\n\t\t\t\tnormalMap.flipY = true;\n\t\t\t\tfinalMaterial.normalMap = normalMap;\n\t\t\t}\n\n\t\t\t\t\n\t\t\tfinalMaterial.textureFilename = ft.filename;\n\t\t\tif(grChunk.data.flags!=16460){\n\t\t\t\t//console.log(\"Setting alpha flag for \",grChunk.data.flags)\n\t\t\t\tfinalMaterial.alphaTest = 0.05;\n\t\t\t}\n\t\t}\n\t\t\t\n\t}\n\n\t/// Fallback material is monocolored red\n\telse{\n\t\tfinalMaterial = new THREE.MeshBasicMaterial({\n\t\t\tside: THREE.FrontSide,\n\t\t\tcolor:0xff0000,\n\t\t\tshading: THREE.FlatShading}); \n\t}\n\n\t\n\tfinalMaterial.needsUpdate = true;\n\n\n\t/// Set material props\n\t/// disable for now in order for custom shaders not to fuck up\n\t\n\tif(material){\n\n\t\tvar alphaMask0 = 0x0001;// + 0x0100 + 0x0200;\n    \tvar alphaMask1 = 0x0010\n    \tvar alphaMask2 = 0x0100 + 0x0200;\n    \tvar alphaMask2b =  0x0200;\n\n\t\t\n\t\tvar grChunk = materialFile.getChunk(\"grmt\");\n\n\t\t//Enable alpha test for transparent flags\n    \tif( (\n    \t\t material.materialFlags & alphaMask0 ||\n    \t\t material.materialFlags & alphaMask1 ||\n    \t\t material.materialFlags & alphaMask2\n    \t\t) //&& solidColor != null\n\t\t){\n    \t\t//return;\n    \t\t//mesh.material.transparent = true;\n    \t\t//mesh.material.opacity = 2.0;\n\n    \t\t//var clr = solidColor;\n    \t\t//var propAlpha = 0;\n\n    \t\t///Backgroud color adds to alpha\n    \t\t//if( mesh.materialFlags == 2569  ){\n\n    \t\t/// This is rly just guesswork\n    \t\t/// Check material flag  2568 (as int) and compare material filename 27353 to 20041\n    \t\t/// Same flags but some have alpha and some don't\n    \t\t//if( mesh.materialFlags & alphaMask2b  ){\n    \t\t//\tpropAlpha =  (clr[3] - 128)/128;\n    \t\t//\t//propAlpha = Math.max(0,propAlpha);\n    \t\t//}\n\n    \t\t//mesh.material.alphaTest = Math.max(0, 0.1 );//- propAlpha*2);\n    \t\t\n    \t}\n\n\n\t\t/// GRCHUNK -> DATA -> FLAGS\n\n\t\t///HAS LIGHT - TEX - ? - EMISSIVE16460\n\t\t///\n\t\t\n\t\t/// 56533 LOD FOR TOMBSTONE?\n\t\t\n\t\t//\t16460\t\t\t0100 0000 0100 1100\t\t\t\"standard\" stuff rendering OK in SAB (no alpha test)\n\n\t\t//\t\n\t\t//\t16452(SAB)\t\t0100 0000 0100 0100\t\t\tyellow numbers in sab signs\n\t\t//\t16448(SAB)\t\t0100 0000 0100 0000\t\t\tfaces on rocks, cloudmen, skybox portal images, holes in walls, floor plates...\n\t\t//\t\t\t\t\t\t\t\t\t\t\t\tno lighting??\n\t\t//\t\n\t\t//\t 8268\t\t\t0010 0000 0100 1100\t\n\t\t//\t 3392\t\t\t0000 1101 0100 0000\t\t\tMoto machine light bulbs\n\t\t//\t 2380\t\t\t0000 1001 0100 1100\n\t\t//\t 2368\t\t\t0000 1001 0100 0000\t\t\tFountain water with rings, portal border and circular \"light\"\n\t\t//\t  332\t\t\t0000 0001 0100 1100\n\t\t//\t  324\t\t\t0000 0001 0100 0100\t\t\tMoto face sprites\n\t\t//\t  \n\t\t//\t  320(SAB)\t\t0000 0001 0100 0000\t\t\tportal textures (normal maps ish)\n\t\t//\t  \n\t\t//\t   76\t\t\t0000 0000 0100 1100\t\t\tLOTS OF STUFF\n\t\t//\t   \t\t\t\t\t\t\t\t\t\t\tTree leaves, ground, hills, some roofs, flags, street lights\n\t\t//\t   \t\t\t\t\t\t\t\t\t\t\tsheild textures, some fences, water tops, waterfall\n\t\t//\t   \t\t\t\t\t\t\t\t\t\t\t\n\t\t//\t   \t\t\t\t\t\t\t\t\t\t\tIN KHYLO \"everything with alpha\"\n\t\t//\t   \n\t\t//\t   \n\t\t//\t   68\t\t\t0000 0000 0100 0100\t\t\tSome flowers (lo res?) fountain edges foam\n\t\t//\t   \n\t\t//\t   64(SAB)\t\t0000 0000 0100 0000\t\t\tclouds, sun iamge\n\n\n\t\tvar lightMask = 8;\n\t\t\n\t\tvar knownFileFlags = [\n\t\t\t16460,\n\t\t\t16452,\n\t\t\t16448,\n\t\t\t8268,\n\t\t\t3392,\n\t\t\t2380,\n\t\t\t2368,\n\t\t\t332,\n\t\t\t324,\n\t\t\t320,\n\t\t\t76,\n\t\t\t68,\n\t\t\t64];\n\n\t\tif(knownFileFlags.indexOf(grChunk.data.flags)<0){\n\t\t\tT3D.Logger.log(\n\t\t\t\tT3D.Logger.TYPE_WARNING,\n\t\t\t\t\"unknown GR flag\",grChunk.data.flags\n\t\t\t);\n\t\t}\n\n\t\tif( !(grChunk.data.flags & lightMask) ){\n\t\t\t//debugger;\n\t\t\t//console.log(\"no light\");\n\t\t\tfinalMaterial =  new THREE.MeshBasicMaterial({\n\t\t\t\tside: THREE.FrontSide,\n\t\t\t\tmap: finalMaterial.map\n\t\t\t});\n\n\t\t}\n\t\t\n\t\tif(grChunk.data.flags!=16460){\n\t\t\tfinalMaterial.alphaTest = 0.05;\n\t\t}\n\n\n\t}/// End if material\n\t\n\n\treturn finalMaterial;\n\n}\n\n\n/**\n * Load image data into a THREE.Texture from a texture file in the .dat file, using a LocalReader.\n * Any loaded tetures are added to sharedTextures, allowing for texture caching and fewer reads.\n * \n * @method  getTexture\n * @param  {Number} texURL         The fileId or baseId of the file to load image data from.\n * @param  {LocalReader} localReader    The LocalReader to load the file contents from.\n * @param  {Object} sharedTextures Value Object for keeping the texture cache\n * @return {THREE.Texture} A texture that will be populated by the file data when it is loaded.\n */\nvar getTexture = ME.getTexture = function(texURL, localReader, sharedTextures){\n\n\tvar finalTexture;\n\n\t/// Read texture from shared array of loaded textures\n\t/// or read it from URL and add to shared ones!\t\t\t\n\tif(texURL && sharedTextures[texURL]){\n\n\t\t/// Just read from already loaded textures.\n\t\tfinalTexture = sharedTextures[texURL];\n\n\t}\n\telse if(texURL){\n\n\t\t/// Load and add to shared array.\n\t\tfinalTexture = loadLocalTexture(localReader,texURL);\n\n\t\t/// Set standard texture functionality.\n\t\tfinalTexture.wrapT = THREE.RepeatWrapping;\n\t\tfinalTexture.wrapS = THREE.RepeatWrapping;\n\t\tfinalTexture.flipY = false;\n\n\t\tsharedTextures[texURL] = finalTexture;\n\t}\n\n\treturn finalTexture;\n}\n\n\n\n/**\n * Load image data into a THREE.Texture from a texture file in the .dat file, using a LocalReader.\n * If you're loading multiple textures, make sure to use\n * {{#crossLink \"MaterialUtils/getTexture\"}}{{/crossLink}} that allows you to cache textures.\n * \n * @method loadLocalTexture\n * @param {LocalReader} localReader - The LocalReader to load the file contents from.\n * @param {Number} fileId - The fileId or baseId of the file to load image data from.\n * @param {Number} mapping - What THREE mapping the returned texture will use, not implemented.\n \n * @return {THREE.Texture} A texture that will be populated by the file data when it is loaded.\n */\nvar loadLocalTexture = ME.loadLocalTexture = function(localReader, fileId, mapping, defaultColor, onerror){\n\t\n\tif(defaultColor === undefined){\n\t\tdefaultColor = Math.floor( 0xffffff * Math.random() )\n\t}\n\n\t/// Temporary texture that will be returned by the function.\n\t/// Color is randomized in order to differentiate different textures during loading.\n\tvar texture =  generateDataTexture(\n\t\t1, // Width\n\t\t1, // Height\n\t\tnew THREE.Color( defaultColor ) // Color\n\t);\n\n\t//Threejs r71 is using these settings by default, r72+ changed it\n\ttexture.minFilter = THREE.LinearMipMapLinearFilter;\n\ttexture.magFilter = THREE.LinearFilter;\n\ttexture.generateMipmaps = true;\n\ttexture.flipY = true;\n\n\t/// Only allow non-zero fileId, otherwise jsut return static texture\n\tif( parseInt(fileId) <= 0 ){\n\t\tif(onerror)\n\t\t\tonerror();\n\t\treturn texture;\n\t}\n\n\t/// Load file using LocalReader.\n\tlocalReader.loadTextureFile(fileId,\n\t\tfunction(inflatedData, dxtType, imageWidth, imageHeigth){\n\n\t\t\t/// Require infalted data to be returned.\n\t\t\tif(!inflatedData){\n\t\t\t\tif(onerror)\n\t\t\t\t\tonerror();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/// Create image using returned data.\n\t\t\tvar image = {\n\t\t\t\tdata   : new Uint8Array(inflatedData),\n\t\t\t\twidth  : imageWidth,\n\t\t\t\theight : imageHeigth\n\t\t\t};\n\n\t\t\t/// Use RGBA for all textures for now...\n\t\t\t/// TODO: don't use alpha for some formats!\n\t\t\ttexture.format = (dxtType==3 || dxtType==5 || true) ? THREE.RGBAFormat : THREE.RGBFormat;\n\n\t\t\t/// Update texture with the loaded image.\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\t\t}\n\t);\t\n\n\t/// Return texture with temporary content.\n\treturn texture;\n};","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Collection Math and sorting methods\n * @Class MathUtils\n * @static\n */\nvar ME = module.exports = {};\n\n/**\n * Takes an integer and calculates what the 16 bit float\n * representation of the binary data used to read the integer is.\n * @method f16\n * @param  {Number} h Integer value\n * @return {Number} Float value\n */\nME.f16 = function(h) {\n    var s = (h & 0x8000) >> 15;\n    var e = (h & 0x7C00) >> 10;\n    var f = h & 0x03FF;\n\n    if(e == 0) {\n        return (s?-1:1) * Math.pow(2,-14) * (f/Math.pow(2, 10));\n    } else if (e == 0x1F) {\n        return f?NaN:((s?-1:1)*Infinity);\n    }\n\n    return(s?-1:1) * Math.pow(2, e-15) * (1+(f/Math.pow(2, 10)));\n}\n\n\n/**\n * Calculates the number of binary ones present in the data used to\n * generate the input integer.\n * @method popcount\n * @param  {Number} bits Integer\n * @return {Number}      Number of binary ones in the data\n */\nME.popcount = function(bits) {\n  var SK5  = 0x55555555,\n      SK3  = 0x33333333,\n      SKF0 = 0x0f0f0f0f,\n      SKFF = 0xff00ff;\n\n  bits -= (bits >> 1) & SK5;\n  bits  = (bits & SK3) + ((bits >> 2) & SK3);\n  bits  = (bits & SKF0) + ((bits >> 4) & SKF0);\n  bits += bits >> 8;\n\n  return (bits + (bits >> 15)) & 63;\n}\n\n\n/**\n * Calculates the 64 bit integer value of two 32 bit integers. Only works up to \n * the limit of the javascript Number maximum value.\n * @method arr32To64\n * @param  {Number[]} arr     Input integers, length should be 2.\n * @return {Number}      64 bit representation of the two integers.\n */\nvar base32Max = Math.pow(2,32);\nME.arr32To64 = function(arr){\n  /// Re-read as uint64 (still little endian)\n  /// Warn: this will not work for ~50+ bit longs cus all JS numbers are 64 bit floats...\n  return base32Max*arr[1] + arr[0];\n};\n\n\n/**\n * Sorts an array and returns unique values only.\n * @method  sort_unique\n * @param  {Array} arr_in     Input array\n * @param  {Function} comparator A comparator function between the objects in arr_in\n * @return {Array}            Sorted and unique value.\n */\nME.sort_unique = function(arr_in, comparator) {\n  var arr = Array.prototype.sort.call(arr_in, comparator);\n   \n    var u = {}, a = [];\n    for(var i = 0, l = arr.length; i < l; ++i){\n      if(u.hasOwnProperty(arr[i])) {\n        continue;\n      }\n      a.push(arr[i]);\n      u[arr[i]] = 1;\n  }\n\n  return a;\n}","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Collection of methods used for parsing complex data types from the .dat\n *\n * Most of these methods are only refered by the automatically generated script\n * AllFormats.js\n * \n * @Class ParserUtils\n * @static\n */\n\nmodule.exports = {\n\n\t/**\n\t * Generates a function for reading an array using DataStream\n\t * @method  getArrayReader\n\t * @param  {Array} structDef DataStream formatted structure definition\n\t *                           for the items in the array.\n\t * @param  {Number} maxCount The maximum allowed length of the array.\n\t *                           Allows any length if left unspecified.\n\t * @return {Function}        The generated parsing function.\n\t */\n\tgetArrayReader : function(structDef, maxCount){\n\t\treturn function(ds, struct){\n\t\t\tvar ret = [];\n\t\t\ttry{\n\n\t\t    \tvar arr_len = ds.readUint32();\n\t\t    \tvar offset = ds.readUint32(); \n\t\t\t\tif(offset == 0){\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t\tvar arr_ptr = ds.position -4 + offset;\n\t\t    \tvar pos = ds.position;\t   \n\n\t\t    \tif(maxCount && arr_len > maxCount){\n\t\t    \t\tthrow(\"Array length \"+arr_len+\" exceeded allowed maximum \" + maxCount);\n\t\t    \t}\n\n\t\t    \tvar pos = ds.position;   \t\n\t\t    \t\n\t    \t\n\t\t    \tds.seek( arr_ptr );\n\t\t    \tret = ds.readType (['[]',structDef,arr_len], struct);\n\t\t    \tds.seek(pos);\n\t    \t}\n\t    \tcatch(e){\n\t    \t\tconsole.warn(\"getArrayReader Failed loading array\", e);\n\t    \t\tconsole.warn(\"getArrayReader Failed loading array, structDef\", structDef);\n\t    \t}\n\t    \treturn ret;\n\t    }\n\t},\n\n\t/**\n\t * Generates a function for reading a refered array using DataStream\n\t * @method  getRefArrayReader\n\t * @param  {Array} structDef DataStream formatted structure definition\n\t *                           for the items in the array.\n\t * @return {Function}        The generated parsing function.\n\t */\n\tgetRefArrayReader : function(structDef){\n\t\treturn function(ds, struct){\n\t    \t\n\t    \tvar ret_arr=[];\n\n\t    \t/// Read array of offsets\n\t    \tvar arr_len = ds.readUint32();\n\t\t    var arr_ptr = ds.position + ds.readUint32();\n\n\t    \tif(arr_len==0){\n\t    \t\treturn ret_arr;\n\t    \t}\n\n\t    \tvar orgPos = ds.position;\n\n\t    \t/// Go to pointer and read an array of offsets!\n\t    \tds.seek(arr_ptr);\n\t    \tvar offsets = ds.readInt32Array(arr_len);\t\n\n\n\t    \t//p_data is after having read array\n\t    \t//var pointer = p_data - 4;\n\t    \tvar pointer = orgPos -4;\n\n        \t//auto offset  = *reinterpret_cast<const int32*>(pointer);\n        \tds.seek(pointer);\n        \tvar offset = ds.readUint32(); /// this should be the same as arr_ptr\n        \t\n        \t//pointer     += offset;\n        \tpointer +=offset;\n\n\t    \tfor(var i=0;i<offsets.length;i++){\n\n\t    \t\t\n\t    \t\tif(offsets[i] != 0){\n\n\t    \t\t\tvar pos = pointer + i * 4 + offsets[i];\n\t\t    \t\tds.seek(pos);\n\n\t\t    \t\ttry{\n\t\t    \t\t\tret_arr.push(ds.readStruct(structDef));\t\n\t\t    \t\t}\n\t\t    \t\tcatch(e){\n\t\t    \t\t\t//debugger;\n\t\t    \t\t\tret_arr.push(null);\n\t\t    \t\t\tconsole.warn(\"getRefArrayReader could not find refered data at offset\",offsets[i] ,e);\n\t\t    \t\t}\n\n\t    \t\t}\n\t    \t\t\n\t    \t}/// End for each offset\n\n\t    \tds.seek(orgPos);\n\t    \treturn ret_arr;\n\n\n\t    }\n\t},\n\n\n\t/**\n\t * Generates a function for reading a 64bit initeger. For now just reads each\n\t * 32 bit integer and glues together as a string.\n\t * @method  getQWordReader\n\t * @return {Function}        The generated parsing function.\n\t */\n\tgetQWordReader:function(){\n\t\tvar base32Max = 4294967296;\n\t\treturn function(ds, struct){\n\t\t\treturn ds.readUint32()+\"-\"+ds.readUint32();\n\n\t\t\tvar p0= ds.readUint32();\n\t\t\tvar p1= ds.readUint32();\n\t\t\treturn base32Max*p1 + p0;\n\t\t}\n\t\t\n\t},\n\t\n\t/**\n\t * Generates a function for reading a string of 8 bit chars.\n\t * @method  getStringReader\n\t * @return {Function}        The generated parsing function.\n\t */\n\tgetStringReader : function(){\n\t\treturn function(ds, struct){\n\t\t\tvar ptr = ds.position + ds.readUint32();\n\t    \tvar pos = ds.position;\t    \t\n\n\t    \t/// Go to pointer\n\t    \tds.seek( ptr );\n\n\t    \tvar ret = ds.readCString();\n\n\t\t\t/// Go back to where we were\n\t    \tds.seek( pos );\n\n\t    \treturn ret;\n\t    }\n\t},\n\n\t/**\n\t * Generates a function for reading a string of 16 bit chars.\n\t * @method  getString16Reader\n\t * @return {Function}        The generated parsing function.\n\t */\n\tgetString16Reader : function(stringOffset){\n\t\treturn function(ds, struct){\n\t\t\tvar ptr = ds.position + ds.readUint32() + (stringOffset ? stringOffset : 0);\n\t    \tvar pos = ds.position;\t    \t\n\n\t    \t/// Go to pointer\n\t    \tds.seek( ptr );\n\n\t    \tvar ret = \"\";\n\t    \tvar num;\n\t    \twhile(ds.position+2<ds.byteLength && (num = ds.readUint16()) != 0 ){\n\t    \t\tret += String.fromCharCode(num);\n\t    \t}\n\t    \t//ds.readCString();\n\n\t\t\t/// Go back to where we were\n\t    \tds.seek( pos );\n\n\t    \treturn ret;\n\t    }\n\t},\n\n\n\t/**\n\t * Generates a function for reading a pointer.\n\t * @method getPointerReader\n\t * @param  {Array} structDef DataStream formatted structure definition\n\t *                           for the item pointed to.\n\t * @return {Function}        The generated parsing function.\n\t */\n\tgetPointerReader : function(structDef){\n\t\treturn function(ds, struct){\n\t\t\tvar offset = ds.readUint32(); \n\n\t\t\tif(offset == 0){\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tvar ptr = ds.position -4 + offset;\n\t    \tvar pos = ds.position;\t    \t\n\n\t    \t/// Go to pointer\n\t    \tds.seek( ptr );\n\t    \t\n\t    \tvar ret = ds.readStruct(structDef);\n\n\t\t\t/// Go back to where we were\n\t    \tds.seek( pos );\n\n\n\t    \treturn ret;\n\t    }\n\t},\n\n\t/**\n\t * Generates a function for reading a filename/file Id.\n\t * @method  getFileNameReader\n\t * @return {Function}        The generated parsing function.\n\t */\n\tgetFileNameReader : function(){\n\t\treturn function(ds, struct){\n\t\t\ttry{\n\t\t\t\tvar ptr = ds.position + ds.readUint32();\n\t    \t\tvar pos = ds.position;\t    \t\n\t    \t\n\t\t    \t/// Go to pointer\n\t\t    \tds.seek( ptr );\n\n\t\t    \tvar fileRef = ds.readStruct([\n\t\t    \t\t\"m_lowPart\", \"uint16\", //uint16 m_lowPart;\n\t\t\t\t    \"m_highPart\", \"uint16\", //uint16 m_highPart;\n\t\t\t\t    \"m_terminator\", \"uint16\",//uint16 m_terminator;\n\t\t\t\t]);\n\n\n\t\t\t\t/// Getting the file name...\n\t\t\t\t/// Both need to be >= than 256 (terminator is 0)\n\t\t\t\tvar ret = 0xFF00 * (fileRef.m_highPart - 0x100) + (fileRef.m_lowPart - 0x100) + 1;\n\t\t\t\t//var ret = (fileRef.m_highPart - 0x100) * 0xff00 + (fileRef.m_lowPart - 0xff);\n\n\t\t\t\tif(ret<0){\n\t\t\t\t\tret = 0;\n\t\t\t\t\t//console.log(\"FR negative\", fileRef.m_highPart, fileRef.m_lowPart, fileRef.m_terminator);\n\t\t\t\t\t//debugger;\n\t\t\t\t}\n\n\t\t    \t/// Go back to where we were\n\t\t    \tds.seek( pos );\n\n\t\t    \treturn ret;\n\t    \t}\n\t    \tcatch(e){\n\t    \t\t/// Go back to where we were\n\t\t    \tds.seek( pos );\n\n\t\t    \treturn -1;\n\t    \t}\t    \t\n\t    }\n\t}\n}","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Todo doc\n */\n\n\n/**\n * @function\n * @param   {Array}     array           Array to iterate over\n * @param   {Function}  promiseTask     Working function on the element that returns a promise\n * @param   {Number}    limit           Amount of simultaneously spawned promises\n * @param   {String}    logPrefix       Progress prefix\n * @returns {Promise}   Return a promise that resolves when it has done iterating over\n */\nfunction limitedAsyncIterator(array, promiseTask, limit, logPrefix){\n    return new Promise((resolve, reject) => {\n        let index = 0;\n        let returned = 0;\n    \n        function startNewPromise(){\n            //Progress:\n            if(logPrefix)\n                progress(index, array.length, logPrefix);\n\n            //Continues iterating as long as we're in the range of the array\n            if(index<array.length){\n                //Tasks are supposed to handle their faults, it will spawn a new task\n                //either way if it resolves or rejects\n                promiseTask(array[index], index)\n                    .then(startNewPromise)\n                    .catch(startNewPromise);\n                index += 1;\n            } else {\n                returned += 1;\n                //Wait for the last promise to return\n                if(returned == limit)\n                    resolve();\n            }\n        }\n\n        //Start the first promise\n        for(let p = 0; p<limit; p++)\n            startNewPromise();\n    \n    })\n}\n\nfunction progress(done, amount, prefix){\n    done += 1;\n    //Call at every percent\n    if(done%Math.floor(amount/100) == 0) {\n        T3D.Logger.log(T3D.Logger.TYPE_PROGRESS,\n            prefix, done/Math.floor(amount/100))\n    }\n\n    return done;\n}\n\nmodule.exports = {\n    limitedAsyncIterator: limitedAsyncIterator\n}","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Collection of methods used for generating THREE meshes from Guild Wars 2 data formats.\n * @Class RenderUtils\n * @static\n */\n\nvar GW2File = require(\"../format/file/GW2File\");\nvar MaterialUtils = require(\"./MaterialUtils\");\nvar MathUtils = require(\"./MathUtils\");\n\n\n//TODO: Remove this local cache!!\nvar matFiles = {};\n\n/**\n * Object describing the meaning of the bits in fvf integers.\n * @property fvfFormat\n * @private\n * @type {Object}\n */\nvar fvfFormat = {\n\tPosition              : 0x00000001,   /**< 12 bytes. Position as three 32-bit floats in the order x, y, z. */\n\tWeights               : 0x00000002,   /**< 4 bytes. Contains bone weights. */\n    Group                 : 0x00000004,   /**< 4 bytes. Related to bone weights. */\n    Normal                : 0x00000008,   /**< 12 bytes. Normal as three 32-bit floats in the order x, y, z. */\n    Color                 : 0x00000010,   /**< 4 bytes. Vertex color. */\n    Tangent               : 0x00000020,   /**< 12 bytes. Tangent as three 32-bit floats in the order x, y, z. */\n    Bitangent             : 0x00000040,   /**< 12 bytes. Bitangent as three 32-bit floats in the order x, y, z. */\n    TangentFrame          : 0x00000080,   /**< 12 bytes. */\n    UV32Mask              : 0x0000ff00,   /**< 8 bytes for each set bit. Contains UV-coords as two 32-bit floats in the order u, v. */\n    UV16Mask              : 0x00ff0000,   /**< 4 bytes for each set bit. Contains UV-coords as two 16-bit floats in the order u, v. */\n    Unknown1              : 0x01000000,   /**< 48 bytes. Unknown data. */\n    Unknown2              : 0x02000000,   /**< 4 bytes. Unknown data. */\n    Unknown3              : 0x04000000,   /**< 4 bytes. Unknown data. */\n    Unknown4              : 0x08000000,   /**< 16 bytes. Unknown data. */\n    PositionCompressed    : 0x10000000,   /**< 6 bytes. Position as three 16-bit floats in the order x, y, z. */\n    Unknown5              : 0x20000000,   /**< 12 bytes. Unknown data. **/\n};\n\nvar ME = module.exports = {};\n\n/**\n * Creates a mesh representing a single plane.\n * \n * @method  renderRect\n * @param  {Object} rect     An object with x1,x2,y1 and y2 properties.\n * @param  {Number} yPos     Vertical position of the rectangle.\n * @param  {THREE.Material} material \tMesh material to apply.\n * @param  {Number} dy       Mesh height.\n * @return {THREE.Mesh}      The generated mesh.\n */\nvar renderRect = ME.renderRect = function(rect, yPos, material, dy){\n\tvar dx = rect.x1 - rect.x2;\n\tvar dz = rect.y1 - rect.y2;\n\tif(!dy)\n\t\tdy = 1;\n\n\tvar cx = (rect.x1 + rect.x2)/2;\n\tvar cz = (rect.y1 + rect.y2)/2;\n\tvar cy = yPos;\n\n\tvar geometry = new THREE.BoxGeometry( dx, dy, dz );\n\n\n\tmaterial = material || new THREE.MeshBasicMaterial(\n\t\t{\n\t\t \tcolor: 0xff0000,\n\t\t\twireframe:true,\n\t\t}\n\t);\n\tvar plane = new THREE.Mesh( geometry, material );\n\tplane.overdraw = true;\n\t\n\tplane.position.x = cx;\n\tplane.position.y = cy;\n\tplane.position.z = cz;\n\n\treturn plane;\n};\n\n\n/**\n * Load image data into a THREE.Texture from a file within the GW2 .dat file using a LocalReader.\n *\n * @method loadLocalTexture\n * \n * @param {LocalReader} localReader The LocalReader to load the file contents from.\n * @param {Number} fileId The fileId or baseId of the file to load image data from.\n * @param {Number} mapping What THREE mapping the returned texture will use, not implemented.\n * @param  {Array} defaultColor RGBA array of 4 integers. The default solid color of the mesh, should texture loading fail.\n * @param {Function} onerror Error callback, not implemented.\n * \n * @return {THREE.Texture} A texture that will be populated by the file data when it is loaded.\n */\nvar loadLocalTexture = ME.loadLocalTexture = function(localReader, fileId, mapping, defaultColor, onerror){\n\treturn MaterialUtils.loadLocalTexture(localReader, fileId, mapping, defaultColor, onerror);\n};\n\n/**\n* Returns a THREE representation of the data contained by a GW2 model file.\n* The data is read using a LocalReader reference into the GW2 .dat.\n*\n* @method renderGeomChunk\n* \n* @param {LocalReader} localReader The LocalReader to load the file contents from.\n* @param {Object} chunk Model GEOM chunk.\n* @param {Object} modelDataChunk Model MODL chunk.\n* @param {Object} sharedTextures  Value Object for keeping the texture cache.\n* @param {boolean} showUnmaterialed If false does not render any models with missing materials.\n* \n* @return {Array} Each geometry in the model file represented by a textured THREE.Mesh object\n*/\nvar renderGeomChunk = ME.renderGeomChunk = function(localReader, chunk, modelDataChunk, sharedTextures, showUnmaterialed){\n\n\tvar rawMeshes = chunk.data.meshes;\n\tvar meshes = [];\n\tvar mats = modelDataChunk.data.permutations[0].materials;\n\t\n\trawMeshes.forEach(function(rawMesh){\n\n\t\tvar rawGeom = rawMesh.geometry;\n\t\tvar fvf = rawGeom.verts.mesh.fvf;//rawGeom.fvf;\n\n\t\tvar numVerts = rawGeom.verts.vertexCount;//rawGeom.vertexCount;\n\t\t\n\t\tvar rawVerts = rawGeom.verts.mesh.vertices;//rawGeom.vertices\n\n\t\tvar indices = rawGeom.indices.indices;\n\n\t\tvar geom = new THREE.BufferGeometry();\n\n\t\tvar vertDS =  new DataStream(rawVerts.buffer);\n\n\t\t//Dirty step length for now:\n\t\tvar stride = rawVerts.length / numVerts;\n\n\t\t//Each vertex\n\t\t//DO UV as well\n\t\tvar vertices = new Float32Array( numVerts * 3 );\n\t\tvar tangents = null; \n\t\tvar normals = null;\n\t\tvar uvs = []; \n\t\t\n\n\t\t/// Calculate the distance to the first pair of UV data from the\n\t\t/// start of the vertex entry\n\t\t/// \n\t\tvar distToNormals = \n\t\t\t!!(fvf & fvfFormat.Position) \t\t* 12 +\n\t\t\t!!(fvf & fvfFormat.Weights) \t\t*  4 +\n\t\t\t!!(fvf & fvfFormat.Group) \t\t\t*  4 ;\n\n\t\tvar distToTangent = \n\t\t\tdistToNormals\t\t\t\t\t\t\t +\n\t\t\t!!(fvf & fvfFormat.Normal) \t\t\t* 12 +\n\t\t\t!!(fvf & fvfFormat.Color) \t\t\t*  4;\n\n\t\tvar distToBittangent = \n\t\t\tdistToTangent\t\t\t\t\t\t +\n\t\t\t!!(fvf & fvfFormat.Tangent) \t\t* 12;\n\n\t\tvar distToTangentFrame = distToBittangent\t +\n\t\t\t!!(fvf & fvfFormat.Bitangent) \t\t* 12;\n\n\t\tvar distToUV = \n\t\t\tdistToTangentFrame\t\t\t\t\t\t +\n\t\t\t!!(fvf & fvfFormat.TangentFrame) \t* 12;\n\n\t\t/// Check if the UV is 32 bit float or 16 bit float.\n\t\tvar uv32Flag = (fvf & fvfFormat.UV32Mask) >> 8;\n\t\tvar uv16Flag = (fvf & fvfFormat.UV16Mask) >> 16;\n\t\tvar isUV32 = !!uv32Flag;\n\t\tvar hasUV = !!uv16Flag || !!uv32Flag;\n\t\t\n\t\t/// Popcount (count the number of binary 1's) in the UV flag\n\t\t/// to get the number of UV pairs used in this vertex format.\n\t\tvar masked = isUV32 ? uv32Flag : uv16Flag;\n\t\tvar numUV = MathUtils.popcount(masked);\n\n\t\tnumUV = Math.min(numUV,1.0);\n\n\n\t\t/// Create typed UV arrays\n\t\tif(hasUV){\n\t\t\tfor(var i=0; i<numUV; i++){\n\t\t\t\tuvs[i] = new Float32Array( numVerts * 2 );\n\t\t\t}\n\t\t}\n\t\t\n\n\t\t\n\t\n\t\tif( !!(fvf & fvfFormat.Normal) ){\n\t\t\t\n\t\t\t//console.log(\"HAS Normal\");\n\n\t\t}\n\t\n\t\tif( !!(fvf & fvfFormat.Tangent) ){\n\t\t\t\n\t\t\t//console.log(\"HAS Tangent\");\n\n\t\t}\n\n\t\tif( !!(fvf & fvfFormat.Bitangent) ){\n\t\t\t\n\t\t\t//console.log(\"HAS Bitangent\");\n\n\t\t}\n\t\tif( !!(fvf & fvfFormat.TangentFrame) ){\n\t\t\t\n\t\t\t//console.log(\"HAS TangentFrame\");\n\n\t\t}\n\n\t\t/// Read data from each vertex data entry\n\t\tfor(var i=0; i<numVerts; i++){\n\n\t\t\t/// Go to vertex memory position\n\t\t\tvertDS.seek(i*stride);\n\n\t\t\t/// Read position data\n\t\t\t/// (we just hope all meshes has 32 bit position...)\n\t\t\tvar x = vertDS.readFloat32();\n\t\t\tvar z = vertDS.readFloat32();\n\t\t\tvar y = vertDS.readFloat32();\n\n\t\t\t/// Write position data, transformed to Tyria3D coordinate system.\n\t\t\tvertices[i*3 + 0] =  x ;//- c.x;\n\t\t\tvertices[i*3 + 1] = -y ;//+ c.y;\n\t\t\tvertices[i*3 + 2] = -z ;//+ c.z;\n\n\t\t\t/// Read data at UV position\n\t\t\tif(hasUV){\n\t\t\t\t\n\t\t\t\tfor(var uvIdx=0; uvIdx<numUV; uvIdx++){\n\n\t\t\t\t\tvertDS.seek(\n\t\t\t\t\t\ti*stride + \n\t\t\t\t\t\tdistToUV + \n\t\t\t\t\t\tuvIdx*(isUV32 ? 8 : 4)\n\t\t\t\t\t);\n\n\t\t\t\t\t/// Add one UV pair:\n\t\t\t\n\t\t\t\t\tvar u,v;\n\t\t\t\t\tif(isUV32){\n\t\t\t\t\t\tu = vertDS.readUint32();\n\t\t\t\t\t\tv = vertDS.readUint32();\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tu = MathUtils.f16(vertDS.readUint16());\n\t\t\t\t\t\tv = MathUtils.f16(vertDS.readUint16());\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t/// Push to correct UV array\n\t\t\t\t\tuvs[uvIdx][i*2 + 0] = u;\n\t\t\t\t\tuvs[uvIdx][i*2 + 1] = v;\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t} /// End if has UV\n\t\t\t\t\n\n\t\t\t\n\n\t\t} /// End each vertex\n\n\t\t/// Each face descripbed in indices\n\t\tvar faces = new Uint16Array( indices.length );\t\t\n\t\tfor(var i=0; i<indices.length; i+=3){\n\n\t\t\t// This is ONE face\n\t\t\tfaces[i + 0] = indices[i + 2];\n\t\t\tfaces[i + 1] = indices[i + 1];\n\t\t\tfaces[i + 2] = indices[i + 0];\n\n\t\t}// End each index aka \"face\"\n\n\n\t\t/// Add position, index and uv props to buffered geometry\n\t\tgeom.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\t//geom.addAttribute( 'index', new THREE.BufferAttribute( faces, 1) );\n\t\tgeom.setIndex(new THREE.BufferAttribute(faces, 1));\n\n\t\tif(normals){\n\t\t\tconsole.log(\"adding normals\");\n\t\t\tgeom.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\t\t\tgeom.normalizeNormals();\n\t\t\tgeom.normalsNeedUpdate = true;\n\t\t}\n\t\telse{\n\t\t\t/// Calculate normals\n\t\t\tgeom.computeVertexNormals();\n\t\t}\n\n\t\t\n\t\tif(hasUV){\n\n\t\t\tfor(var uvIdx=0; uvIdx<numUV; uvIdx++){\n\n\t\t\t\t/// Names are \"uv\", \"uv2\", \"uv3\", ... , \"uvN\"\n\t\t\t\tvar uvName = \"uv\" + ( uvIdx > 0 ? uvIdx+1 : \"\" );\n\t\t\t\t\n\t\t\t\t/// Set \"custom\" attribute uvN\n\t\t\t\tgeom.addAttribute( uvName, new THREE.BufferAttribute( uvs[uvIdx], 2 ) );\n\n\t\t\t\t/// Flag for update\n\t\t\t\tgeom.attributes[uvName].needsUpdate = true;\t\n\t\t\t}\n\t\t\t\n\n\t\t\t/// Not needed anymore?\n\t\t\tgeom.uvsNeedUpdate = true;\t\n\t\t}\n\t\t\n\n\t\t/// Tell geometry to update its UVs and buffers\n\t\tgeom.buffersNeedUpdate = true;\n\n\t\t/// DONE READING VERTEX DATA\n\t\t\n\n\t\t/// Get material used for this mesh\n\t\tvar matIdx = rawMesh.materialIndex;\n\t\tvar mat = mats[matIdx];\n\t\tvar materialFile = null\n\n\t\tif(mat && matFiles[mat.filename]){\n\t\t\tmaterialFile = matFiles[mat.filename];\t\t\t\n\t\t}\n\n\t\tvar finalMaterial =  MaterialUtils.getMaterial(mat, materialFile, localReader, sharedTextures);\t\n\t\n\n\t\t/// IF we could not find a material abort OR use a wireframe placeholder.\n\t\tif(!finalMaterial){\n\t\t\tif(showUnmaterialed){\n\t\t\t\tfinalMaterial = new THREE.MeshLambertMaterial(\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor: 0x5bb1e8,\n\t\t\t\t\t\twireframe:false,\n\t\t\t\t\t\tside: THREE.DoubleSide\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn;\t\n\t\t\t}\t\t\t\n\t\t}\n\n\t\t\n\n\t\t/// Create the final mesh from the BufferedGeometry and MeshBasicMaterial\n\t\tvar finalMesh = new THREE.Mesh(geom, finalMaterial);\n\n\t\t\n\t\t/// Set material info on the returned mesh\n\t\tif(mat){\n\t\t\tfinalMesh.materialFlags = mat.materialFlags;\n\t\t\tfinalMesh.materialFilename = mat.filename;\n\t\t}\n\n\t\tfinalMesh.materialName = rawMesh.materialName;\n\n\t\t/// Use materialFilename, materialName, and material.textureFilename in order to build export\n\n\t\t/// Set lod info on the returned mesh\n\t\tfinalMesh.numLods = rawMesh.geometry.lods.length;\n\t\tfinalMesh.lodOverride = modelDataChunk.data.lodOverride;\n\n\t\t/// Set flag and UV info on the returned mehs\n\t\tfinalMesh.flags = rawMesh.flags;\n\t\tfinalMesh.numUV = numUV;\n\n\t\t/// Add mesh to returned Array\n\t\tmeshes.push( finalMesh );\n\n\t});/// End rawMeshes forEach\n\t\n\treturn meshes;\t\n};\n\n/**\n * Loads mesh array from Model file and sends as argument to callback.\n * @method loadMeshFromModelFile\n * @param  {Number} filename Name of the model file to load data from.\n * @param  {Array} solidColor RGBA array of 4 integers\n * @param {LocalReader} localReader The LocalReader to load the file contents from.\n * @param {Object} sharedTextures  Value Object for keeping the texture cache.\n * @param {boolean} showUnmaterialed If false does not render any models with missing materials.\n \n * @param  {Function} callback Fired once all meshes have been loaded.\n * two arguments are passed to the callback function.\n * \n * The first argument is an Array with each textured THREE.Mesh objects.\n * \n * The second argument is the bounding spehere of this model file.\n * \n */\n\nvar loadMeshFromModelFile = ME.loadMeshFromModelFile =\nfunction(filename, solidColor, localReader, sharedTextures, showUnmaterialed, callback){\n\n\t//Short handles prop attributes\n\tvar finalMeshes = [];\n\n\t///Load file\n\tlocalReader.loadFile(filename,function(inflatedData){\n\t\ttry{\n\t\t\tif(!inflatedData){\n\t\t\t\tthrow \"Could not find MFT entry for \"+filename;\n\t\t\t}\n\n\t\t\tvar ds = new DataStream(inflatedData);\n\n\t\t\tvar modelFile = new GW2File(ds,0);\n\n\t\t\t//MODL for materials -> textures\n\t\t\tvar modelDataChunk = modelFile.getChunk(\"modl\");\n\t\t    \n\t\t    //GEOM for geometry\n\t\t    var geometryDataChunk = modelFile.getChunk(\"geom\");\n\n\n\t\t    /// Hacky fix for not being able to adjust for position\n\t\t    var boundingSphere = modelDataChunk.data.boundingSphere;\n\t\t    var bsc = boundingSphere.center;\n\t\t    boundingSphere.radius+= Math.sqrt( bsc[0]*bsc[0] + Math.sqrt(bsc[1]*bsc[1] + bsc[2]*bsc[2]) );\n\n\t\t    /// Load all material files\n\t\t    var allMats = modelDataChunk.data.permutations[0].materials;\n\n\t\t    function loadMaterialIndex(mIdx, matCallback){\n\t\t    \t\n\t\t    \tif(mIdx>=allMats.length){\n\t\t    \t\t\n\t\t    \t\tmatCallback();\n\t\t    \t\treturn;\n\t\t    \t}\n\n\t\t    \tvar mat = allMats[mIdx];\n\n\t\t    \t/// Skip if file is loaded\n\t\t    \tif(matFiles[mat.filename]){\n\t\t    \t\tloadMaterialIndex(mIdx+1,matCallback);\n\t\t    \t\treturn;\n\t\t\t\t}\t\t\n\n\t\t\t\tlocalReader.loadFile(mat.filename,\n\t\t\t\t\tfunction(inflatedData){\n\t\t\t\t\t\tif(inflatedData){\n\t\t\t\t\t\t\tvar ds = new DataStream(inflatedData);\n\t\t\t\t\t\t\tvar materialFile = new GW2File(ds,0);\n\t\t\t\t\t\t\tmatFiles[mat.filename] = materialFile;\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tloadMaterialIndex(mIdx+1,matCallback);\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t);\n\t\t    }\n\n\n\n\t\t    loadMaterialIndex(0, function(){\n\n\t\t    \t/// Create meshes\n\t\t\t    var meshes = renderGeomChunk(localReader, geometryDataChunk, modelDataChunk, sharedTextures, showUnmaterialed);\t\t\t    \n\n\t\t\t    // Build mesh group\n\t\t\t    meshes.forEach(function(mesh){\n\t\t\t    \t\n\t\t\t    \t/// Material flags\n\t\t\t    \tvar knownflags = [\n\n\t\t\t    \t\t/*\n\t\t\t\t\t\t\t1-5\n\t\t\t\t\t\t\tHas Tex?\tIDK\t\t\tLight?\t\tAlpha?\n\n\t\t\t\t\t\t\t5-8\n\t\t\t\t\t\t\t0\t\t\t0\t \t\tIDK\t\t \tWater?\n\n\t\t\t\t\t\t\t9-12\n\t\t\t\t\t\t\tHas Tex?\t0\t\t\tAlpha?\t\tAlpha?\n\n\t\t\t\t\t\t\t13\n\t\t\t\t\t\t\tIDK KEV\n\t\t\t    \t\t*/\n\n\t\t\t    \t\t0,\t\t\t//0 0000 0000 0000\t\tGround / Wall splashes\n\t\t\t    \t\t8,\t\t\t//0 0000 0000 1000\t\tBroken Khylo roof DDS\n\t\t\t    \t\t9,\t\t\t//0 0000 0000 1001\t\tTree leaves\n\n\t\t\t    \t\t520,\t\t//0 0010 0000 1000\t\tSome LOD modules, fires, smoke, inside of tents (some DSS textures)\n\t\t\t    \t\t\n\n\t\t\t    \t\t2056,\t\t//0 1000 0000 1000\t\tSolid objects, also broken animations\n\n\t\t\t    \t\t///Solids here are unhappy, or are they? could be animations etc\n\t\t\t    \t\t2057,\t\t//0 1000 0000 1001\t\tWindmill sails, bushes, trees, but also a statue and a few pieces of wall\n\n\t\t\t    \t\t2060,\t\t//0 1000 0000 1100\t\tA few solid objects, like wooden barricades, one(!) painting\n\t\t\t    \t\t2061,\t\t//0 1000 0000 1101\t\tA few bushes, two paintings\n\t\t\t    \t\t\n\t\t\t    \t\t\n\t\t\t    \t\t2312,\t\t//0 1001 0000 1000\t\tOpaque Clock tower main walls AND IVY\n\t\t\t    \t\t2316,\t\t//0 1001 0000 1100\t\tBushes, inner flower walkway a ramp and a box\n\n\t\t\t    \t\t// Number 10\n\t\t\t    \t\t2568,\t\t//0 1010 0000 1000\t\tLots of solids; walls, tents also some tent details WITH alpa\n\n\t\t\t    \t\t//Number 11\n\t\t\t    \t\t2569,\t\t//0 1010 0000 1001\t\tSolids like walls and roofs and appernt non solids like ropes\n\n\t\t\t    \t\t2572,\t\t//0 1010 0000 1100\t\tSolid wooden beems, lamp posts\n\t\t\t    \t\t2573,\t\t//0 1010 0000 1101\t\tLamp holders, bushes, fences, apparent non solids\n\t\t\t    \t\t2584,\t\t//0 1010 0001 1000\t\tFountain Well water\n\n\t\t\t    \t\t2824,\t\t//0 1011 0000 1000\t\tWindows, sign arrows, cloth roofs (non solids) BUT straw roofs\n\t\t\t    \t\t2828,\t\t//0 1011 0000 1100\t\tA few fence post (non solids)\n\t\t\t    \t\t2840,\t\t//0 1011 0001 1000\t\tFountain running water + pipe water\n\n\t\t\t    \t\t4617,\t\t//1 0010 0000 1001\t\tFound nothing\n\t\t\t    \t\t6664\t\t//1 1010 0000 1000\t\tTwo groups of solid boxes\n\t\t\t    \t];\n\n\t\t\t    \tvar alphaMask0 = 0x0001;// + 0x0100 + 0x0200;\n\t\t\t    \tvar alphaMask1 = 0x0010\n\t\t\t    \tvar alphaMask2 = 0x0100 + 0x0200;\n\t\t\t    \tvar alphaMask2b =  0x0200;\n\n\t\t\t    \tvar texMask = 0x8 + 0x0800;\n\n\n\t\t\t    \tif(knownflags.indexOf(mesh.materialFlags)!==11){\n\t\t\t    \t\t//return;\n\t\t\t    \t}\n\n\t\t\t    \t// No smoke etc\n\t\t\t    \tif( mesh.materialFlags == 520 ){\n\t\t\t    \t\t//return;\n\t\t\t    \t}\n\n\t\t\t    \t//Must have texture\n\t\t\t    \tif(!showUnmaterialed && !(mesh.materialFlags & texMask) ){\n\t\t\t    \t\treturn;\n\t\t\t    \t}\n\n\t\t\t\t\t//NO lods\n\t\t\t    \tif(mesh.flags == 4 || mesh.flags == 1 || mesh.flags == 0){\n\t\t\t    \t\t//return;\n\t\t\t    \t}\n\n\t\t\t\t\t//Add to final colection\n\t\t\t\t\tfinalMeshes.push(mesh);\n\n\t\t\t    });/// END FOR EACH meshes\n\n\t\t\t\tcallback(finalMeshes, boundingSphere);\n\n\t\t\t    \n\t\t    });/// END LOAD MATERIALS CALLBACK\n\n\n\t\t}\n\t    catch(e){\n\t    \tconsole.warn(\"Failed rendering model \"+filename,e);\n\t    \tvar mesh = new THREE.Mesh( new THREE.BoxGeometry( 200, 2000, 200 ), new THREE.MeshNormalMaterial() );\n\t    \tmesh.flags = 4;\n\t    \tmesh.materialFlags = 2056;\n\t    \tmesh.lodOverride = [1000000,1000000];\n\t    \tfinalMeshes.push(mesh);\n\n\t    \t/// Send the final meshes to callback function\n\t    \tcallback(finalMeshes);\n\t    }\n\t\t    \n\t});/// END FILE LOADED CALLBACK FUNCTION\n};\n\n\n/**\n * Gets a mesh array from Model file and sends as argument to callback. Uses a cache of meshes in order\n * to never read the same model file twice.\n * @method getMeshesForFilename\n * \n * @param  {Number} filename The fileId or baseId of the Model file to load\n * @param  {Array} color RGBA array of 4 integers\n * @param  {LocalReader} localReader The LocalReader object used to read data from the GW2 .dat file.\n * @param {Object} sharedMeshes  Value Object for keeping the texture cache.\n * @param {Object} sharedTextures  Value Object for keeping the texture cache.\n * @param {boolean} showUnmaterialed If false does not render any models with missing materials.\n * @param  {Function} callback Fired once all meshes have been loaded.\n * three arguments are passed to the callback function.\n * \n * The first argument is an Array with each textured THREE.Mesh objects.\n *\n * The second argument is a boolean, true indicates that these meshes were not\n * loaded from the dat file, but retrieved from the run time cache.\n * \n * The third argument is the bounding spehere of this model file.\n */\nvar getMeshesForFilename = ME.getMeshesForFilename =\nfunction(filename, color, localReader, sharedMeshes, sharedTextures, showUnmaterialed, callback){\n\n\t/// If this file has already been loaded, just return a reference to the meshes.\n\t/// isCached will be set to true to inform the caller the meshes will probably\n\t/// have to be cloned in some way.\n\tif( sharedMeshes[filename] ){\n\t\tcallback(sharedMeshes[filename].meshes, true, sharedMeshes[filename].boundingSphere)\n\t}\n\n\t/// If this file has never been loaded, load it using loadMeshFromModelFile\n\t/// the resulting mesh array will be cached within this model's scope.\n\telse{\n\n\t\tloadMeshFromModelFile(filename, color, localReader, sharedTextures, showUnmaterialed, function(meshes, boundingSphere){\n\n\t\t\t/// Cache result if any.\n\t\t\tif(meshes){\n\t\t\t\tsharedMeshes[filename] ={\n\t\t\t\t\tmeshes : meshes,\n\t\t\t\t\tboundingSphere : boundingSphere\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/// Allways fire callback.\n\t\t\tcallback(meshes, false, boundingSphere);\n\n\t\t});\n\t}\n}\n\n\n/**\n * WIP, Tries to find all fileIds refered by a model file.\n * @method  getFilesUsedByModel\n * @param  {Number}   filename    Model file Id\n * @param  {LocalReader}   localReader LocalReader instance to read from\n * @param  {Function} callback   First argument is list of used file IDs\n */\nvar getFilesUsedByModel = ME.getFilesUsedByModel = function(filename, localReader, callback){\n\tvar fileIds = [filename];\n\n\t///Load model file\n\tlocalReader.loadFile(filename,function(inflatedData){\n\t\t\n\t\ttry{\n\t\t\tif(!inflatedData){\n\t\t\t\tthrow \"Could not find MFT entry for \"+filename;\n\t\t\t}\n\n\t\t\tvar ds = new DataStream(inflatedData);\n\t\t\tvar modelFile = new GW2File(ds,0);\n\n\t\t\t//MODL for materials -> textures\n\t\t\tvar modelDataChunk = modelFile.getChunk(\"modl\");\n\n\t\t\t/// Get materials used by model\n\t\t\tvar mats = modelDataChunk.data.permutations[0].materials;\n\n\t\t\t/// Add each material file AND referenced TEXTURES\n\t\t\tmats.forEach(function(mat){\n\n\t\t\t\t/// Add material file id\n\t\t\t\tvar matFileName = mat.filename;\n\t\t\t\tfileIds.push(matFileName);\n\n\t\t\t\t/// Add each texture file id\n\t\t\t\tmat.textures.forEach(function(tex){\n\t\t\t\t\tfileIds.push(tex.filename);\n\t\t\t\t})\n\t\t\t\t\n\t\t\t});\n\t\t\t\n\t\t}\n\t\tcatch(e){\n\t\t\tconsole.warn(\"Could not export any data\",e);\n\t\t}\n\n\t\tcallback(fileIds);\n\t});\n\n}\n\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * TODO doc\n */\n\n\nmodule.exports = {\n    ///TODO: port fog from in-engine\n\n    getFragmentShader: function(){\n        return [\n            \"uniform vec2 uvScale;\",\n            \"uniform vec2 offset;\",\n            \"uniform sampler2D texturePicker;\",\n            \"uniform sampler2D texturePicker2;\",\n            \"uniform sampler2D texture1;\",\n            \"uniform sampler2D texture2;\",\n            \"uniform sampler2D texture3;\",\n            \"uniform sampler2D texture4;\",\n    \n            THREE.ShaderChunk[\"logdepthbuf_pars_fragment\"],\n    \n            \"varying vec2 vUv;\",\n            \"varying vec3 vecNormal;\",\n    \n            \"vec3 blend(\",\n                    \"vec4 texture1, float a1, vec4 texture2, float a2,\",\n                    \"vec4 texture3, float a3, vec4 texture4, float a4)\",\n            \"{\",\n                \"float depth = 2.0;\",\n                \"float alphaMult = 1.0;\",\n                \"float alphaAdd  = 0.0;\",\n                \"a1 *= 4.0;\",\n                \"a2 *= 4.0;\",\n                \"a3 *= 4.0;\",\n                \"a4 *= 4.0;\",\n                \"a1 =  a1+(1.5+texture1.a);\",\n                \"a2 =  a2+(1.5+texture2.a);\",\n                \"a3 =  a3+(1.5+texture3.a);\",\n                \"a4 =  a4+(1.5+texture4.a);\",\n                \"float ma = max(a1,a2);\",\n                \"ma = max(ma,a3);\",\n                \"ma = max(ma,a4);\",\n                \"ma -= depth;\",\n                \"float b1 = max(a1 - ma, 0.0);\",\n                \"float b2 = max(a2 - ma, 0.0);\",\n                \"float b3 = max(a3 - ma, 0.0);\",\n                \"float b4 = max(a4 - ma, 0.0);\",\n                \"return (\",\n                    \"texture1.rgb * b1 + texture2.rgb * b2 +\",\n                    \"texture3.rgb * b3 + texture4.rgb * b4 \",\n                \") / (b1 + b2 + b3 + b4);\",\n            \"}\",\n    \n            \"void main( void ) {\",\n                \"vec2 position = vUv*uvScale;\",\n                \"float edge = 1.0/1024.0;\",\n                \"vec2 compPos = edge + (vUv*0.25 + offset) * (1.0-edge*2.0);\",\n                \"vec4 tp1 = texture2D( texturePicker, compPos);\",\n                \"vec4 tp2 = texture2D( texturePicker2, compPos);\",\n                \"vec4 composite = tp1;\",\n                \"vec4 t1 = texture2D( texture1, position );\",\n                \"vec4 t2 = texture2D( texture2, position );\",\n                \"vec4 t3 = texture2D( texture3, position );\",\n                \"vec4 t4 = texture2D( texture4, position );\",\n                \"vec3 color = blend(\",\n                    \"t1, tp1.a,\",\n                    \"t2, tp1.b,\",\n                    \"t3, tp1.g,\",\n                    \"t4, tp1.r\",\n                \");\",\n                \"color *= 0.5+tp2.r;\",\n                \"gl_FragColor = vec4(color,1.0);\",\n                THREE.ShaderChunk[\"logdepthbuf_fragment\"],\n            \"}\"\n    \n        ].join( \"\\n\" );\n    },\n    getVertexShader : function(){\n        return [\n            \"varying vec2 vUv;\",\n            \"varying vec3 vecNormal;\",\n            THREE.ShaderChunk[\"logdepthbuf_pars_vertex\"],\n            \"void main()\",\n            \"{\",\n\n                \"vUv =  uv;\",\n                \"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n                \"vecNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\",\n                \"gl_Position = projectionMatrix * mvPosition;\",\n                THREE.ShaderChunk[\"logdepthbuf_vertex\"],\n            \"}\"\n        ].join( \"\\n\" );\n    }\n}"]}